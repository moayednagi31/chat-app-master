{"ast":null,"code":"import _classCallCheck from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\moaid\\\\Desktop\\\\chat-app-master\\\\web\\\\src\\\\components\\\\chat\\\\Contacts.js\";\nimport React from \"react\";\nimport Contact from \"./Contact\";\nimport { Row, Input } from 'reactstrap';\n/**\n * Contacts.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Contacts = /*#__PURE__*/function (_React$Component) {\n  _inherits(Contacts, _React$Component);\n\n  var _super = _createSuper(Contacts);\n\n  function Contacts() {\n    var _this;\n\n    _classCallCheck(this, Contacts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      search: ''\n    };\n\n    _this.onSearch = function (e) {\n      return _this.setState({\n        search: e.target.value\n      });\n    };\n\n    _this.renderContact = function (contact, index) {\n      if (!contact.name.includes(_this.state.search)) return;\n\n      var messages = _this.props.messages.filter(function (e) {\n        return e.sender === contact.id || e.receiver === contact.id;\n      });\n\n      var lastMessage = messages[messages.length - 1];\n      var unseen = messages.filter(function (e) {\n        return !e.seen && e.sender === contact.id;\n      }).length;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-100\",\n        onClick: _this.props.onChatNavigate.bind(_assertThisInitialized(_this), contact),\n        children: /*#__PURE__*/_jsxDEV(Contact, {\n          contact: contact,\n          message: lastMessage,\n          unseen: unseen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 16\n        }, _assertThisInitialized(_this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }, _assertThisInitialized(_this));\n    };\n\n    return _this;\n  }\n\n  _createClass(Contacts, [{\n    key: \"render\",\n    value:\n    /**\n     * Render component.\n     */\n    function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: \"search\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            onChange: this.onSearch,\n            placeholder: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          id: \"contacts\",\n          children: this.props.contacts.map(function (contact, index) {\n            return _this2.renderContact(contact, index);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }, this);\n    }\n    /**\n     * Render single contact.\n     * @param contact\n     * @param index\n     */\n\n  }]);\n\n  return Contacts;\n}(React.Component);\n\nexport default Contacts;","map":{"version":3,"sources":["C:/Users/moaid/Desktop/chat-app-master/web/src/components/chat/Contacts.js"],"names":["React","Contact","Row","Input","Contacts","state","search","onSearch","e","setState","target","value","renderContact","contact","index","name","includes","messages","props","filter","sender","id","receiver","lastMessage","length","unseen","seen","onChatNavigate","bind","contacts","map","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,YAA3B;AAEA;AACA;AACA;;;;IACMC,Q;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AAAEC,MAAAA,MAAM,EAAE;AAAV,K;;UAKRC,Q,GAAW,UAAAC,CAAC;AAAA,aAAI,MAAKC,QAAL,CAAc;AAACH,QAAAA,MAAM,EAAEE,CAAC,CAACE,MAAF,CAASC;AAAlB,OAAd,CAAJ;AAAA,K;;UAuBZC,a,GAAgB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACjC,UAAG,CAACD,OAAO,CAACE,IAAR,CAAaC,QAAb,CAAsB,MAAKX,KAAL,CAAWC,MAAjC,CAAJ,EAA8C;;AAC9C,UAAIW,QAAQ,GAAG,MAAKC,KAAL,CAAWD,QAAX,CAAoBE,MAApB,CAA2B,UAAAX,CAAC;AAAA,eAAIA,CAAC,CAACY,MAAF,KAAaP,OAAO,CAACQ,EAArB,IAA2Bb,CAAC,CAACc,QAAF,KAAeT,OAAO,CAACQ,EAAtD;AAAA,OAA5B,CAAf;;AACA,UAAIE,WAAW,GAAGN,QAAQ,CAACA,QAAQ,CAACO,MAAT,GAAkB,CAAnB,CAA1B;AACA,UAAIC,MAAM,GAAGR,QAAQ,CAACE,MAAT,CAAgB,UAAAX,CAAC;AAAA,eAAI,CAACA,CAAC,CAACkB,IAAH,IAAWlB,CAAC,CAACY,MAAF,KAAaP,OAAO,CAACQ,EAApC;AAAA,OAAjB,EAAyDG,MAAtE;AACA,0BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAmC,QAAA,OAAO,EAAE,MAAKN,KAAL,CAAWS,cAAX,CAA0BC,IAA1B,gCAAqCf,OAArC,CAA5C;AAAA,+BACI,QAAC,OAAD;AAAS,UAAA,OAAO,EAAEA,OAAlB;AAA2B,UAAA,OAAO,EAAEU,WAApC;AAAiD,UAAA,MAAM,EAAEE;AAAzD;AAAA;AAAA;AAAA;AAAA;AADJ,SAA4BX,KAA5B;AAAA;AAAA;AAAA;AAAA,uCADJ;AAKH,K;;;;;;;;AA/BA;AACJ;AACA;AACI,sBAAQ;AAAA;;AACL,0BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACK,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,iCACI,QAAC,KAAD;AAAO,YAAA,QAAQ,EAAE,KAAKP,QAAtB;AAAgC,YAAA,WAAW,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADL,eAII,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,UAAR;AAAA,oBACM,KAAKW,KAAL,CAAWW,QAAX,CAAoBC,GAApB,CAAwB,UAACjB,OAAD,EAAUC,KAAV;AAAA,mBAAoB,MAAI,CAACF,aAAL,CAAmBC,OAAnB,EAA4BC,KAA5B,CAApB;AAAA,WAAxB;AADN;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH;AAEA;AACJ;AACA;AACA;AACA;;;;;EA7BuBd,KAAK,CAAC+B,S;;AA0C7B,eAAe3B,QAAf","sourcesContent":["import React from \"react\";\nimport Contact from \"./Contact\";\nimport { Row, Input } from 'reactstrap';\n\n/**\n * Contacts.\n */\nclass Contacts extends React.Component {\n\n    state = { search: ''};\n\n    /**\n     * Handle search event.\n     */\n    onSearch = e => this.setState({search: e.target.value});\n\n    /**\n     * Render component.\n     */\n    render(){\n       return (\n           <div className=\"list\">\n                <Row className=\"search\">\n                    <Input onChange={this.onSearch} placeholder=\"Search\" />\n                </Row>\n               <Row id=\"contacts\">\n                    {this.props.contacts.map((contact, index) => this.renderContact(contact, index) )}\n               </Row>\n           </div>\n       );\n   }\n\n    /**\n     * Render single contact.\n     * @param contact\n     * @param index\n     */\n    renderContact = (contact, index) => {\n       if(!contact.name.includes(this.state.search)) return;\n       let messages = this.props.messages.filter(e => e.sender === contact.id || e.receiver === contact.id);\n       let lastMessage = messages[messages.length - 1];\n       let unseen = messages.filter(e => !e.seen && e.sender === contact.id).length;\n       return(\n           <div className=\"w-100\" key={index} onClick={this.props.onChatNavigate.bind(this, contact)}>\n               <Contact contact={contact} message={lastMessage} unseen={unseen}/>\n           </div>\n       );\n   }\n}\nexport default Contacts;\n"]},"metadata":{},"sourceType":"module"}