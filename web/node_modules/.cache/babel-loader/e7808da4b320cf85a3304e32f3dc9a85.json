{"ast":null,"code":"import _objectSpread from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\moaid\\\\Desktop\\\\chat-app-master\\\\web\\\\src\\\\views\\\\Chat.js\";\n\n/**\n * web/src/views/Chat.js\n */\nimport React from 'react';\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { ContactHeader, Contacts, ChatHeader, Messages, MessageForm, UserProfile, EditProfile } from 'components';\nimport socketIO from 'socket.io-client';\nimport Auth from 'Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Chat = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      contacts: [],\n      contact: {},\n      // Will hold { id, name, ... } of the current chat\n      userProfile: false,\n      profile: false,\n      // Existing message-related states\n      connected: false,\n      messages: [],\n      typing: false,\n      timeout: null,\n      user: null,\n      // ------ CALL STATES ------\n      callState: 'idle',\n      // 'idle' | 'calling' | 'receiving' | 'inCall'\n      incomingCallModal: false,\n      callerInfo: null,\n      // Will hold { from, callerName }\n      // WebRTC\n      localStream: null,\n      remoteStream: null,\n      peerConnection: null,\n      // NEW: Store an SDP offer if it arrives before we have a peerConnection.\n      pendingOffer: null\n    };\n\n    _this.initSocketConnection = function () {\n      var socket = socketIO(process.env.REACT_APP_SOCKET, {\n        query: 'token=' + Auth.getToken()\n      }); // --- Existing events ---\n\n      socket.on('connect', function () {\n        console.log('[CHAT] Socket connected');\n\n        _this.setState({\n          connected: true\n        });\n      });\n      socket.on('disconnect', function () {\n        console.log('[CHAT] Socket disconnected');\n\n        _this.setState({\n          connected: false\n        });\n      });\n      socket.on('data', _this.onData);\n      socket.on('message', _this.onNewMessage);\n      socket.on('user_status', _this.updateUsersState);\n      socket.on('typing', _this.onTypingMessage);\n      socket.on('error', _this.onSocketError); // ---------------- NEW: CALL EVENTS ----------------\n\n      socket.on('incomingCall', function (data) {\n        // data => { from: userId, callerName: ... }\n        console.log('[CHAT] Incoming call from:', data);\n\n        _this.setState({\n          callState: 'receiving',\n          incomingCallModal: true,\n          callerInfo: data // store who is calling\n\n        }); // OPTIONAL: Update contact so we know who we're talking to\n\n\n        if (!_this.state.contact.id || _this.state.contact.id !== data.from) {\n          _this.setState({\n            contact: _objectSpread(_objectSpread({}, _this.state.contact), {}, {\n              id: data.from,\n              name: data.callerName\n            })\n          });\n        }\n      }); // --- IMPORTANT CHANGE HERE: Store or handle the offer ---\n\n      socket.on('offer', function (_ref) {\n        var sdp = _ref.sdp,\n            caller = _ref.caller;\n        console.log('[CHAT] Received offer from:', caller); // If we already have a peerConnection, handle it right away.\n\n        if (_this.state.peerConnection) {\n          _this.handleOffer(sdp, caller);\n        } else {\n          // We haven't accepted the call yet => store it in state until we create peerConnection\n          console.log('[CHAT] No peerConnection yet. Storing pendingOffer...');\n\n          _this.setState({\n            pendingOffer: {\n              sdp: sdp,\n              caller: caller\n            }\n          });\n        }\n      });\n      socket.on('answer', function (_ref2) {\n        var sdp = _ref2.sdp,\n            callee = _ref2.callee;\n        console.log('[CHAT] Received answer from:', callee);\n\n        if (_this.state.peerConnection) {\n          var desc = new RTCSessionDescription(sdp);\n\n          _this.state.peerConnection.setRemoteDescription(desc).then(function () {\n            console.log('[CHAT] Remote description set for answer, callState = inCall');\n\n            _this.setState({\n              callState: 'inCall'\n            });\n          }).catch(function (err) {\n            return console.error('[CHAT] Error setting remote desc (answer)', err);\n          });\n        }\n      });\n      socket.on('iceCandidate', function (_ref3) {\n        var candidate = _ref3.candidate,\n            from = _ref3.from;\n        console.log('[CHAT] Received ICE candidate from:', from);\n\n        if (_this.state.peerConnection && candidate) {\n          _this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(function (e) {\n            return console.error('[CHAT] Error adding ICE candidate', e);\n          });\n        }\n      });\n      socket.on('hangUp', function () {\n        console.log('[CHAT] Call ended by remote');\n\n        _this.endCall();\n      });\n\n      _this.setState({\n        socket: socket\n      });\n    };\n\n    _this.handleOffer = function (sdp, caller) {\n      console.log('[CHAT] handleOffer => Setting remote desc & creating answer...');\n      var desc = new RTCSessionDescription(sdp);\n\n      _this.state.peerConnection.setRemoteDescription(desc).then(function () {\n        console.log('[CHAT] Remote description set (offer). Creating answer...');\n        return _this.state.peerConnection.createAnswer();\n      }).then(function (answer) {\n        console.log('[CHAT] Created answer, setting local desc and sending...');\n\n        _this.state.peerConnection.setLocalDescription(answer);\n\n        _this.state.socket.emit('answer', {\n          sdp: answer,\n          target: caller\n        });\n\n        _this.setState({\n          callState: 'inCall'\n        });\n      }).catch(function (err) {\n        return console.error('[CHAT] Error handling offer->answer', err);\n      });\n    };\n\n    _this.initiateCall = function (contact) {\n      var _this$state$user;\n\n      if (!contact.id) return;\n      console.log('[CHAT] Initiating call with contact:', contact.id);\n\n      _this.setState({\n        callState: 'calling',\n        contact: contact\n      }); // Notify the callee that we're calling\n\n\n      _this.state.socket.emit('callUser', {\n        recipientId: contact.id,\n        callerName: ((_this$state$user = _this.state.user) === null || _this$state$user === void 0 ? void 0 : _this$state$user.username) || 'Unknown Caller'\n      }); // Access microphone (audio only)\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        console.log('[CHAT] Got localStream, tracks:', stream.getAudioTracks());\n\n        _this.setState({\n          localStream: stream\n        });\n\n        var peerConnection = _this.createPeerConnection(); // Add local tracks\n\n\n        stream.getTracks().forEach(function (track) {\n          console.log('[CHAT] Adding local track:', track.label);\n          peerConnection.addTrack(track, stream);\n        }); // Create offer\n\n        peerConnection.createOffer().then(function (offer) {\n          console.log('[CHAT] Created offer, setting local desc');\n          peerConnection.setLocalDescription(offer);\n          console.log('[CHAT] Sending offer to server...');\n\n          _this.state.socket.emit('offer', {\n            sdp: offer,\n            target: contact.id\n          });\n        }).catch(function (err) {\n          return console.error('[CHAT] Offer creation error', err);\n        });\n\n        _this.setState({\n          peerConnection: peerConnection\n        });\n      }).catch(function (err) {\n        return console.error('[CHAT] getUserMedia error', err);\n      });\n    };\n\n    _this.acceptCall = function () {\n      var _this$state$callerInf;\n\n      console.log('[CHAT] Accepting call from:', _this.state.callerInfo);\n\n      _this.setState({\n        incomingCallModal: false,\n        callState: 'inCall'\n      });\n\n      var callerId = (_this$state$callerInf = _this.state.callerInfo) === null || _this$state$callerInf === void 0 ? void 0 : _this$state$callerInf.from;\n\n      if (callerId && (!_this.state.contact.id || _this.state.contact.id !== callerId)) {\n        _this.setState({\n          contact: _objectSpread(_objectSpread({}, _this.state.contact), {}, {\n            id: callerId,\n            name: _this.state.callerInfo.callerName\n          })\n        });\n      } // Access microphone (audio only for now)\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        console.log('[CHAT] Got localStream (callee), tracks:', stream.getAudioTracks());\n\n        _this.setState({\n          localStream: stream\n        });\n\n        var peerConnection = _this.createPeerConnection(); // Add local tracks\n\n\n        stream.getTracks().forEach(function (track) {\n          console.log('[CHAT] Callee adding local track:', track.label);\n          peerConnection.addTrack(track, stream);\n        }); // Once the peerConnection is ready, if there's a stored pendingOffer, handle it now.\n\n        _this.setState({\n          peerConnection: peerConnection\n        }, function () {\n          if (_this.state.pendingOffer) {\n            var _this$state$pendingOf = _this.state.pendingOffer,\n                sdp = _this$state$pendingOf.sdp,\n                caller = _this$state$pendingOf.caller;\n\n            _this.handleOffer(sdp, caller);\n\n            _this.setState({\n              pendingOffer: null\n            });\n          }\n        });\n      }).catch(function (err) {\n        return console.error('[CHAT] Error accessing mic (callee)', err);\n      });\n    };\n\n    _this.rejectCall = function () {\n      console.log('[CHAT] Rejecting call from:', _this.state.callerInfo);\n\n      _this.setState({\n        incomingCallModal: false,\n        callState: 'idle',\n        callerInfo: null,\n        pendingOffer: null // discard any stored offer\n\n      }); // Optionally notify the caller that call is rejected\n      // e.g. this.state.socket.emit('callRejected', {...});\n\n    };\n\n    _this.createPeerConnection = function () {\n      console.log('[CHAT] Creating RTCPeerConnection...');\n      var configuration = {\n        iceServers: [{\n          urls: 'stun:stun1.l.google.com:19302'\n        } // Add a TURN server if needed for NAT traversal\n        ]\n      };\n      var peerConnection = new RTCPeerConnection(configuration); // On ICE candidate\n\n      peerConnection.onicecandidate = function (event) {\n        if (event.candidate) {\n          var targetId = _this.state.contact.id || _this.state.callerInfo && _this.state.callerInfo.from;\n          console.log('[CHAT] Sending ICE candidate to:', targetId);\n\n          _this.state.socket.emit('iceCandidate', {\n            candidate: event.candidate,\n            target: targetId\n          });\n        } else {\n          console.log('[CHAT] ICE gathering complete (no more candidates)');\n        }\n      }; // On track (remote stream)\n\n\n      peerConnection.ontrack = function (event) {\n        console.log('[CHAT] ontrack => remote track label:', event.track.label);\n\n        _this.setState({\n          remoteStream: event.streams[0]\n        });\n      }; // Handle connection state changes\n\n\n      peerConnection.onconnectionstatechange = function () {\n        var state = peerConnection.connectionState;\n        console.log('[CHAT] PeerConnection state:', state);\n\n        if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n          console.log('[CHAT] PeerConnection ended, calling endCall()');\n\n          _this.endCall();\n        }\n      };\n\n      return peerConnection;\n    };\n\n    _this.endCall = function () {\n      console.log('[CHAT] endCall invoked');\n      var _this$state = _this.state,\n          socket = _this$state.socket,\n          contact = _this$state.contact,\n          callerInfo = _this$state.callerInfo,\n          peerConnection = _this$state.peerConnection,\n          localStream = _this$state.localStream,\n          callState = _this$state.callState;\n      var targetId = contact.id || callerInfo && callerInfo.from; // If we are calling or in call, notify other side\n\n      if (callState === 'calling' || callState === 'inCall') {\n        console.log('[CHAT] Emitting hangUp to target:', targetId);\n        socket.emit('hangUp', {\n          target: targetId\n        });\n      } // Close peerConnection\n\n\n      if (peerConnection) {\n        console.log('[CHAT] Closing peerConnection...');\n        peerConnection.close();\n      } // Stop local media\n\n\n      if (localStream) {\n        console.log('[CHAT] Stopping localStream tracks');\n        localStream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      }\n\n      _this.setState({\n        callState: 'idle',\n        peerConnection: null,\n        localStream: null,\n        remoteStream: null,\n        callerInfo: null,\n        incomingCallModal: false,\n        pendingOffer: null // clear any pending offer\n\n      });\n    };\n\n    _this.onData = function (user, contacts, messages, users) {\n      console.log('[CHAT] onData => user:', user, ' contacts:', contacts.length);\n      var contact = contacts[0] || {};\n\n      _this.setState({\n        messages: messages,\n        contacts: contacts,\n        user: user,\n        contact: contact\n      }, function () {\n        _this.updateUsersState(users);\n      });\n    };\n\n    _this.onNewMessage = function (message) {\n      if (message.sender === _this.state.contact.id) {\n        _this.setState({\n          typing: false\n        });\n\n        _this.state.socket.emit('seen', _this.state.contact.id);\n\n        message.seen = true;\n      }\n\n      var newMessages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: newMessages\n      });\n    };\n\n    _this.onTypingMessage = function (sender) {\n      if (_this.state.contact.id !== sender) return;\n\n      _this.setState({\n        typing: sender\n      });\n\n      clearTimeout(_this.state.timeout);\n      var timeout = setTimeout(function () {\n        return _this.setState({\n          typing: false\n        });\n      }, 3000);\n\n      _this.setState({\n        timeout: timeout\n      });\n    };\n\n    _this.onSocketError = function (err) {\n      console.error('[CHAT] Socket error:', err);\n\n      if (err === 'auth_error') {\n        Auth.logout();\n\n        _this.props.history.push('/login');\n      }\n    };\n\n    _this.updateUsersState = function (users) {\n      var contacts = _this.state.contacts;\n      contacts.forEach(function (element, index) {\n        if (users[element.id]) contacts[index].status = users[element.id];\n      });\n\n      _this.setState({\n        contacts: contacts\n      });\n\n      var contact = _this.state.contact;\n      if (users[contact.id]) contact.status = users[contact.id];\n\n      _this.setState({\n        contact: contact\n      });\n    };\n\n    _this.sendMessage = function (message) {\n      if (!_this.state.contact.id) return;\n      message.receiver = _this.state.contact.id;\n\n      var newMessages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: newMessages\n      });\n\n      _this.state.socket.emit('message', message);\n    };\n\n    _this.sendType = function () {\n      if (_this.state.contact.id) {\n        _this.state.socket.emit('typing', _this.state.contact.id);\n      }\n    };\n\n    _this.logout = function () {\n      console.log('[CHAT] Logging out user');\n\n      _this.state.socket.disconnect();\n\n      Auth.logout();\n\n      _this.props.history.push('/');\n    };\n\n    _this.renderChat = function () {\n      var _this$state2 = _this.state,\n          contact = _this$state2.contact,\n          user = _this$state2.user,\n          messages = _this$state2.messages;\n      if (!contact || !contact.id) return null;\n      var filtered = messages.filter(function (m) {\n        return m.sender === contact.id || m.receiver === contact.id;\n      });\n      return /*#__PURE__*/_jsxDEV(Messages, {\n        user: user,\n        messages: filtered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 12\n      }, _assertThisInitialized(_this));\n    };\n\n    _this.onChatNavigate = function (contact) {\n      console.log('[CHAT] onChatNavigate => switching to contact:', contact.id);\n\n      _this.setState({\n        contact: contact\n      });\n\n      _this.state.socket.emit('seen', contact.id);\n\n      var newMessages = _this.state.messages.map(function (m) {\n        if (m.sender === contact.id) {\n          return _objectSpread(_objectSpread({}, m), {}, {\n            seen: true\n          });\n        }\n\n        return m;\n      });\n\n      _this.setState({\n        messages: newMessages\n      });\n    };\n\n    _this.userProfileToggle = function () {\n      return _this.setState({\n        userProfile: !_this.state.userProfile\n      });\n    };\n\n    _this.profileToggle = function () {\n      return _this.setState({\n        profile: !_this.state.profile\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Initialize socket.io connection.\n      this.initSocketConnection();\n    } // ============ SOCKET.IO CONNECTION & EVENTS ============\n\n  }, {\n    key: \"render\",\n    value: // ============ RENDERING ============\n    function render() {\n      var _this2 = this;\n\n      if (!this.state.connected || !this.state.contacts || !this.state.messages) {\n        return /*#__PURE__*/_jsxDEV(Spinner, {\n          id: \"loader\",\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 14\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Row, {\n        className: \"h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"contacts-section\",\n          className: \"col-6 col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(ContactHeader, {\n            user: this.state.user,\n            toggle: this.profileToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Contacts, {\n            contacts: this.state.contacts,\n            messages: this.state.messages,\n            onChatNavigate: this.onChatNavigate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(UserProfile, {\n            contact: this.state.contact,\n            toggle: this.userProfileToggle,\n            open: this.state.userProfile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(EditProfile, {\n            user: this.state.user,\n            toggle: this.profileToggle,\n            open: this.state.profile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"messages-section\",\n          className: \"col-6 col-md-8\",\n          children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n            contact: this.state.contact,\n            typing: this.state.typing,\n            toggle: this.userProfileToggle,\n            logout: this.logout // pass the call method so ChatHeader can call\n            ,\n            onCall: this.initiateCall\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 11\n          }, this), this.renderChat(), /*#__PURE__*/_jsxDEV(MessageForm, {\n            sender: this.sendMessage,\n            sendType: this.sendType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 11\n          }, this), (this.state.callState === 'calling' || this.state.callState === 'inCall') && /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: this.endCall,\n            className: \"mt-2\",\n            children: \"Hang Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), this.state.remoteStream && /*#__PURE__*/_jsxDEV(\"audio\", {\n            ref: function ref(audioEl) {\n              if (audioEl && _this2.state.remoteStream) {\n                console.log('[CHAT] Attaching remoteStream to audio element');\n                audioEl.srcObject = _this2.state.remoteStream;\n              }\n            },\n            autoPlay: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: this.state.incomingCallModal,\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: \"Incoming Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: this.state.callerInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.callerInfo.callerName, \" is calling...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"success\",\n              onClick: this.acceptCall,\n              children: \"Accept\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              onClick: this.rejectCall,\n              children: \"Reject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/moaid/Desktop/chat-app-master/web/src/views/Chat.js"],"names":["React","Row","Spinner","Button","Modal","ModalHeader","ModalBody","ModalFooter","ContactHeader","Contacts","ChatHeader","Messages","MessageForm","UserProfile","EditProfile","socketIO","Auth","Chat","state","contacts","contact","userProfile","profile","connected","messages","typing","timeout","user","callState","incomingCallModal","callerInfo","localStream","remoteStream","peerConnection","pendingOffer","initSocketConnection","socket","process","env","REACT_APP_SOCKET","query","getToken","on","console","log","setState","onData","onNewMessage","updateUsersState","onTypingMessage","onSocketError","data","id","from","name","callerName","sdp","caller","handleOffer","callee","desc","RTCSessionDescription","setRemoteDescription","then","catch","err","error","candidate","addIceCandidate","RTCIceCandidate","e","endCall","createAnswer","answer","setLocalDescription","emit","target","initiateCall","recipientId","username","navigator","mediaDevices","getUserMedia","audio","video","stream","getAudioTracks","createPeerConnection","getTracks","forEach","track","label","addTrack","createOffer","offer","acceptCall","callerId","rejectCall","configuration","iceServers","urls","RTCPeerConnection","onicecandidate","event","targetId","ontrack","streams","onconnectionstatechange","connectionState","close","stop","users","length","message","sender","seen","newMessages","concat","clearTimeout","setTimeout","logout","props","history","push","element","index","status","sendMessage","receiver","sendType","disconnect","renderChat","filtered","filter","m","onChatNavigate","map","userProfileToggle","profileToggle","audioEl","srcObject","Component"],"mappings":"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","sourcesContent":["/**\n * web/src/views/Chat.js\n */\n\nimport React from 'react';\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport {\n  ContactHeader,\n  Contacts,\n  ChatHeader,\n  Messages,\n  MessageForm,\n  UserProfile,\n  EditProfile,\n} from 'components';\nimport socketIO from 'socket.io-client';\nimport Auth from 'Auth';\n\nclass Chat extends React.Component {\n  state = {\n    contacts: [],\n    contact: {},         // Will hold { id, name, ... } of the current chat\n    userProfile: false,\n    profile: false,\n\n    // Existing message-related states\n    connected: false,\n    messages: [],\n    typing: false,\n    timeout: null,\n    user: null,\n\n    // ------ CALL STATES ------\n    callState: 'idle',  // 'idle' | 'calling' | 'receiving' | 'inCall'\n    incomingCallModal: false,\n    callerInfo: null,   // Will hold { from, callerName }\n\n    // WebRTC\n    localStream: null,\n    remoteStream: null,\n    peerConnection: null,\n\n    // NEW: Store an SDP offer if it arrives before we have a peerConnection.\n    pendingOffer: null,\n  };\n\n  componentDidMount() {\n    // Initialize socket.io connection.\n    this.initSocketConnection();\n  }\n\n  // ============ SOCKET.IO CONNECTION & EVENTS ============\n  initSocketConnection = () => {\n    const socket = socketIO(process.env.REACT_APP_SOCKET, {\n      query: 'token=' + Auth.getToken(),\n    });\n\n    // --- Existing events ---\n    socket.on('connect', () => {\n      console.log('[CHAT] Socket connected');\n      this.setState({ connected: true });\n    });\n    socket.on('disconnect', () => {\n      console.log('[CHAT] Socket disconnected');\n      this.setState({ connected: false });\n    });\n    socket.on('data', this.onData);\n    socket.on('message', this.onNewMessage);\n    socket.on('user_status', this.updateUsersState);\n    socket.on('typing', this.onTypingMessage);\n    socket.on('error', this.onSocketError);\n\n    // ---------------- NEW: CALL EVENTS ----------------\n    socket.on('incomingCall', (data) => {\n      // data => { from: userId, callerName: ... }\n      console.log('[CHAT] Incoming call from:', data);\n      this.setState({\n        callState: 'receiving',\n        incomingCallModal: true,\n        callerInfo: data,   // store who is calling\n      });\n\n      // OPTIONAL: Update contact so we know who we're talking to\n      if (!this.state.contact.id || this.state.contact.id !== data.from) {\n        this.setState({\n          contact: {\n            ...this.state.contact,\n            id: data.from,\n            name: data.callerName,\n          },\n        });\n      }\n    });\n\n    // --- IMPORTANT CHANGE HERE: Store or handle the offer ---\n    socket.on('offer', ({ sdp, caller }) => {\n      console.log('[CHAT] Received offer from:', caller);\n      // If we already have a peerConnection, handle it right away.\n      if (this.state.peerConnection) {\n        this.handleOffer(sdp, caller);\n      } else {\n        // We haven't accepted the call yet => store it in state until we create peerConnection\n        console.log('[CHAT] No peerConnection yet. Storing pendingOffer...');\n        this.setState({ pendingOffer: { sdp, caller } });\n      }\n    });\n\n    socket.on('answer', ({ sdp, callee }) => {\n      console.log('[CHAT] Received answer from:', callee);\n      if (this.state.peerConnection) {\n        const desc = new RTCSessionDescription(sdp);\n        this.state.peerConnection.setRemoteDescription(desc)\n          .then(() => {\n            console.log('[CHAT] Remote description set for answer, callState = inCall');\n            this.setState({ callState: 'inCall' });\n          })\n          .catch(err => console.error('[CHAT] Error setting remote desc (answer)', err));\n      }\n    });\n\n    socket.on('iceCandidate', ({ candidate, from }) => {\n      console.log('[CHAT] Received ICE candidate from:', from);\n      if (this.state.peerConnection && candidate) {\n        this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate))\n          .catch(e => console.error('[CHAT] Error adding ICE candidate', e));\n      }\n    });\n\n    socket.on('hangUp', () => {\n      console.log('[CHAT] Call ended by remote');\n      this.endCall();\n    });\n\n    this.setState({ socket });\n  };\n\n  // Helper to handle incoming offer -> setRemoteDesc -> createAnswer\n  handleOffer = (sdp, caller) => {\n    console.log('[CHAT] handleOffer => Setting remote desc & creating answer...');\n    const desc = new RTCSessionDescription(sdp);\n    this.state.peerConnection.setRemoteDescription(desc)\n      .then(() => {\n        console.log('[CHAT] Remote description set (offer). Creating answer...');\n        return this.state.peerConnection.createAnswer();\n      })\n      .then(answer => {\n        console.log('[CHAT] Created answer, setting local desc and sending...');\n        this.state.peerConnection.setLocalDescription(answer);\n        this.state.socket.emit('answer', {\n          sdp: answer,\n          target: caller,\n        });\n        this.setState({ callState: 'inCall' });\n      })\n      .catch(err => console.error('[CHAT] Error handling offer->answer', err));\n  };\n\n  // ============ CALLING FUNCTIONS ============\n  initiateCall = (contact) => {\n    if (!contact.id) return;\n    console.log('[CHAT] Initiating call with contact:', contact.id);\n\n    this.setState({\n      callState: 'calling',\n      contact: contact,\n    });\n\n    // Notify the callee that we're calling\n    this.state.socket.emit('callUser', {\n      recipientId: contact.id,\n      callerName: this.state.user?.username || 'Unknown Caller',\n    });\n\n    // Access microphone (audio only)\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n      .then(stream => {\n        console.log('[CHAT] Got localStream, tracks:', stream.getAudioTracks());\n        this.setState({ localStream: stream });\n\n        const peerConnection = this.createPeerConnection();\n\n        // Add local tracks\n        stream.getTracks().forEach(track => {\n          console.log('[CHAT] Adding local track:', track.label);\n          peerConnection.addTrack(track, stream);\n        });\n\n        // Create offer\n        peerConnection.createOffer()\n          .then(offer => {\n            console.log('[CHAT] Created offer, setting local desc');\n            peerConnection.setLocalDescription(offer);\n            console.log('[CHAT] Sending offer to server...');\n            this.state.socket.emit('offer', {\n              sdp: offer,\n              target: contact.id,\n            });\n          })\n          .catch(err => console.error('[CHAT] Offer creation error', err));\n\n        this.setState({ peerConnection });\n      })\n      .catch(err => console.error('[CHAT] getUserMedia error', err));\n  };\n\n  acceptCall = () => {\n    console.log('[CHAT] Accepting call from:', this.state.callerInfo);\n    this.setState({\n      incomingCallModal: false,\n      callState: 'inCall',\n    });\n\n    const callerId = this.state.callerInfo?.from;\n    if (callerId && (!this.state.contact.id || this.state.contact.id !== callerId)) {\n      this.setState({\n        contact: {\n          ...this.state.contact,\n          id: callerId,\n          name: this.state.callerInfo.callerName,\n        },\n      });\n    }\n\n    // Access microphone (audio only for now)\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n      .then(stream => {\n        console.log('[CHAT] Got localStream (callee), tracks:', stream.getAudioTracks());\n        this.setState({ localStream: stream });\n\n        const peerConnection = this.createPeerConnection();\n\n        // Add local tracks\n        stream.getTracks().forEach(track => {\n          console.log('[CHAT] Callee adding local track:', track.label);\n          peerConnection.addTrack(track, stream);\n        });\n\n        // Once the peerConnection is ready, if there's a stored pendingOffer, handle it now.\n        this.setState({ peerConnection }, () => {\n          if (this.state.pendingOffer) {\n            const { sdp, caller } = this.state.pendingOffer;\n            this.handleOffer(sdp, caller);\n            this.setState({ pendingOffer: null });\n          }\n        });\n      })\n      .catch(err => console.error('[CHAT] Error accessing mic (callee)', err));\n  };\n\n  rejectCall = () => {\n    console.log('[CHAT] Rejecting call from:', this.state.callerInfo);\n    this.setState({\n      incomingCallModal: false,\n      callState: 'idle',\n      callerInfo: null,\n      pendingOffer: null, // discard any stored offer\n    });\n    // Optionally notify the caller that call is rejected\n    // e.g. this.state.socket.emit('callRejected', {...});\n  };\n\n  createPeerConnection = () => {\n    console.log('[CHAT] Creating RTCPeerConnection...');\n    const configuration = {\n      iceServers: [\n        { urls: 'stun:stun1.l.google.com:19302' },\n        // Add a TURN server if needed for NAT traversal\n      ],\n    };\n    const peerConnection = new RTCPeerConnection(configuration);\n\n    // On ICE candidate\n    peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        const targetId =\n          this.state.contact.id ||\n          (this.state.callerInfo && this.state.callerInfo.from);\n        console.log('[CHAT] Sending ICE candidate to:', targetId);\n        this.state.socket.emit('iceCandidate', {\n          candidate: event.candidate,\n          target: targetId,\n        });\n      } else {\n        console.log('[CHAT] ICE gathering complete (no more candidates)');\n      }\n    };\n\n    // On track (remote stream)\n    peerConnection.ontrack = (event) => {\n      console.log('[CHAT] ontrack => remote track label:', event.track.label);\n      this.setState({ remoteStream: event.streams[0] });\n    };\n\n    // Handle connection state changes\n    peerConnection.onconnectionstatechange = () => {\n      const state = peerConnection.connectionState;\n      console.log('[CHAT] PeerConnection state:', state);\n      if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n        console.log('[CHAT] PeerConnection ended, calling endCall()');\n        this.endCall();\n      }\n    };\n\n    return peerConnection;\n  };\n\n  endCall = () => {\n    console.log('[CHAT] endCall invoked');\n    const { socket, contact, callerInfo, peerConnection, localStream, callState } = this.state;\n    const targetId = contact.id || (callerInfo && callerInfo.from);\n\n    // If we are calling or in call, notify other side\n    if (callState === 'calling' || callState === 'inCall') {\n      console.log('[CHAT] Emitting hangUp to target:', targetId);\n      socket.emit('hangUp', { target: targetId });\n    }\n\n    // Close peerConnection\n    if (peerConnection) {\n      console.log('[CHAT] Closing peerConnection...');\n      peerConnection.close();\n    }\n\n    // Stop local media\n    if (localStream) {\n      console.log('[CHAT] Stopping localStream tracks');\n      localStream.getTracks().forEach(track => track.stop());\n    }\n\n    this.setState({\n      callState: 'idle',\n      peerConnection: null,\n      localStream: null,\n      remoteStream: null,\n      callerInfo: null,\n      incomingCallModal: false,\n      pendingOffer: null, // clear any pending offer\n    });\n  };\n\n  // ============ EXISTING MESSAGING LOGIC ============\n  onData = (user, contacts, messages, users) => {\n    console.log('[CHAT] onData => user:', user, ' contacts:', contacts.length);\n    let contact = contacts[0] || {};\n    this.setState({ messages, contacts, user, contact }, () => {\n      this.updateUsersState(users);\n    });\n  };\n\n  onNewMessage = (message) => {\n    if (message.sender === this.state.contact.id) {\n      this.setState({ typing: false });\n      this.state.socket.emit('seen', this.state.contact.id);\n      message.seen = true;\n    }\n    let newMessages = this.state.messages.concat(message);\n    this.setState({ messages: newMessages });\n  };\n\n  onTypingMessage = (sender) => {\n    if (this.state.contact.id !== sender) return;\n    this.setState({ typing: sender });\n    clearTimeout(this.state.timeout);\n    const timeout = setTimeout(() => this.setState({ typing: false }), 3000);\n    this.setState({ timeout });\n  };\n\n  onSocketError = (err) => {\n    console.error('[CHAT] Socket error:', err);\n    if (err === 'auth_error') {\n      Auth.logout();\n      this.props.history.push('/login');\n    }\n  };\n\n  updateUsersState = (users) => {\n    let contacts = this.state.contacts;\n    contacts.forEach((element, index) => {\n      if (users[element.id]) contacts[index].status = users[element.id];\n    });\n    this.setState({ contacts });\n    let contact = this.state.contact;\n    if (users[contact.id]) contact.status = users[contact.id];\n    this.setState({ contact });\n  };\n\n  sendMessage = (message) => {\n    if (!this.state.contact.id) return;\n    message.receiver = this.state.contact.id;\n    let newMessages = this.state.messages.concat(message);\n    this.setState({ messages: newMessages });\n    this.state.socket.emit('message', message);\n  };\n\n  sendType = () => {\n    if (this.state.contact.id) {\n      this.state.socket.emit('typing', this.state.contact.id);\n    }\n  };\n\n  logout = () => {\n    console.log('[CHAT] Logging out user');\n    this.state.socket.disconnect();\n    Auth.logout();\n    this.props.history.push('/');\n  };\n\n  // ============ RENDERING ============\n  render() {\n    if (!this.state.connected || !this.state.contacts || !this.state.messages) {\n      return <Spinner id=\"loader\" color=\"success\" />;\n    }\n\n    return (\n      <Row className=\"h-100\">\n        {/* LEFT: Contacts Section */}\n        <div id=\"contacts-section\" className=\"col-6 col-md-4\">\n          <ContactHeader user={this.state.user} toggle={this.profileToggle} />\n          <Contacts\n            contacts={this.state.contacts}\n            messages={this.state.messages}\n            onChatNavigate={this.onChatNavigate}\n          />\n          <UserProfile\n            contact={this.state.contact}\n            toggle={this.userProfileToggle}\n            open={this.state.userProfile}\n          />\n          <EditProfile\n            user={this.state.user}\n            toggle={this.profileToggle}\n            open={this.state.profile}\n          />\n        </div>\n\n        {/* RIGHT: Messages Section */}\n        <div id=\"messages-section\" className=\"col-6 col-md-8\">\n          <ChatHeader\n            contact={this.state.contact}\n            typing={this.state.typing}\n            toggle={this.userProfileToggle}\n            logout={this.logout}\n            // pass the call method so ChatHeader can call\n            onCall={this.initiateCall}\n          />\n          {this.renderChat()}\n          <MessageForm sender={this.sendMessage} sendType={this.sendType} />\n\n          {/* Hang Up button if in a call */}\n          {(this.state.callState === 'calling' || this.state.callState === 'inCall') && (\n            <Button color=\"danger\" onClick={this.endCall} className=\"mt-2\">\n              Hang Up\n            </Button>\n          )}\n\n          {/* Audio element for remote stream */}\n          {this.state.remoteStream && (\n            <audio\n              ref={(audioEl) => {\n                if (audioEl && this.state.remoteStream) {\n                  console.log('[CHAT] Attaching remoteStream to audio element');\n                  audioEl.srcObject = this.state.remoteStream;\n                }\n              }}\n              autoPlay\n            />\n          )}\n        </div>\n\n        {/* INCOMING CALL MODAL */}\n        <Modal isOpen={this.state.incomingCallModal}>\n          <ModalHeader>Incoming Call</ModalHeader>\n          <ModalBody>\n            {this.state.callerInfo && (\n              <p>{this.state.callerInfo.callerName} is calling...</p>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"success\" onClick={this.acceptCall}>Accept</Button>\n            <Button color=\"secondary\" onClick={this.rejectCall}>Reject</Button>\n          </ModalFooter>\n        </Modal>\n      </Row>\n    );\n  }\n\n  renderChat = () => {\n    const { contact, user, messages } = this.state;\n    if (!contact || !contact.id) return null;\n    let filtered = messages.filter(\n      (m) => m.sender === contact.id || m.receiver === contact.id\n    );\n    return <Messages user={user} messages={filtered} />;\n  };\n\n  onChatNavigate = (contact) => {\n    console.log('[CHAT] onChatNavigate => switching to contact:', contact.id);\n    this.setState({ contact });\n    this.state.socket.emit('seen', contact.id);\n    let newMessages = this.state.messages.map((m) => {\n      if (m.sender === contact.id) {\n        return { ...m, seen: true };\n      }\n      return m;\n    });\n    this.setState({ messages: newMessages });\n  };\n\n  userProfileToggle = () => this.setState({ userProfile: !this.state.userProfile });\n  profileToggle = () => this.setState({ profile: !this.state.profile });\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}