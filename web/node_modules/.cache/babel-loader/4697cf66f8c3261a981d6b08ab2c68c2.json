{"ast":null,"code":"import _objectSpread from\"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/moaid/Desktop/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/**\n * web/src/views/Chat.js\n */import React from'react';import{Row,Spinner,Button,Modal,ModalHeader,ModalBody,ModalFooter}from'reactstrap';import{ContactHeader,Contacts,ChatHeader,Messages,MessageForm,UserProfile,EditProfile}from'components';import socketIO from'socket.io-client';import Auth from'Auth';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chat=/*#__PURE__*/function(_React$Component){_inherits(Chat,_React$Component);var _super=_createSuper(Chat);function Chat(){var _this;_classCallCheck(this,Chat);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={contacts:[],contact:{},// Will hold { id, name, ... } of the current chat\nuserProfile:false,profile:false,// Existing message-related states\nconnected:false,messages:[],typing:false,timeout:null,user:null,// ------ CALL STATES ------\ncallState:'idle',// 'idle' | 'calling' | 'receiving' | 'inCall'\nincomingCallModal:false,callerInfo:null,// Will hold { from, callerName }\n// WebRTC\nlocalStream:null,remoteStream:null,peerConnection:null,// NEW: Store an SDP offer if it arrives before we have a peerConnection.\npendingOffer:null};_this.initSocketConnection=function(){var socket=socketIO(process.env.REACT_APP_SOCKET,{query:'token='+Auth.getToken()});// --- Existing events ---\nsocket.on('connect',function(){console.log('[CHAT] Socket connected');_this.setState({connected:true});});socket.on('disconnect',function(){console.log('[CHAT] Socket disconnected');_this.setState({connected:false});});socket.on('data',_this.onData);socket.on('message',_this.onNewMessage);socket.on('user_status',_this.updateUsersState);socket.on('typing',_this.onTypingMessage);socket.on('error',_this.onSocketError);// ---------------- NEW: CALL EVENTS ----------------\nsocket.on('incomingCall',function(data){// data => { from: userId, callerName: ... }\nconsole.log('[CHAT] Incoming call from:',data);_this.setState({callState:'receiving',incomingCallModal:true,callerInfo:data// store who is calling\n});// OPTIONAL: Update contact so we know who we're talking to\nif(!_this.state.contact.id||_this.state.contact.id!==data.from){_this.setState({contact:_objectSpread(_objectSpread({},_this.state.contact),{},{id:data.from,name:data.callerName})});}});// --- IMPORTANT CHANGE HERE: Store or handle the offer ---\nsocket.on('offer',function(_ref){var sdp=_ref.sdp,caller=_ref.caller;console.log('[CHAT] Received offer from:',caller);// If we already have a peerConnection, handle it right away.\nif(_this.state.peerConnection){_this.handleOffer(sdp,caller);}else{// We haven't accepted the call yet => store it in state until we create peerConnection\nconsole.log('[CHAT] No peerConnection yet. Storing pendingOffer...');_this.setState({pendingOffer:{sdp:sdp,caller:caller}});}});socket.on('answer',function(_ref2){var sdp=_ref2.sdp,callee=_ref2.callee;console.log('[CHAT] Received answer from:',callee);if(_this.state.peerConnection){var desc=new RTCSessionDescription(sdp);_this.state.peerConnection.setRemoteDescription(desc).then(function(){console.log('[CHAT] Remote description set for answer, callState = inCall');_this.setState({callState:'inCall'});}).catch(function(err){return console.error('[CHAT] Error setting remote desc (answer)',err);});}});socket.on('iceCandidate',function(_ref3){var candidate=_ref3.candidate,from=_ref3.from;console.log('[CHAT] Received ICE candidate from:',from);if(_this.state.peerConnection&&candidate){_this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(function(e){return console.error('[CHAT] Error adding ICE candidate',e);});}});socket.on('hangUp',function(){console.log('[CHAT] Call ended by remote');_this.endCall();});_this.setState({socket:socket});};_this.handleOffer=function(sdp,caller){console.log('[CHAT] handleOffer => Setting remote desc & creating answer...');var desc=new RTCSessionDescription(sdp);_this.state.peerConnection.setRemoteDescription(desc).then(function(){console.log('[CHAT] Remote description set (offer). Creating answer...');return _this.state.peerConnection.createAnswer();}).then(function(answer){console.log('[CHAT] Created answer, setting local desc and sending...');_this.state.peerConnection.setLocalDescription(answer);_this.state.socket.emit('answer',{sdp:answer,target:caller});_this.setState({callState:'inCall'});}).catch(function(err){return console.error('[CHAT] Error handling offer->answer',err);});};_this.initiateCall=function(contact){var _this$state$user;if(!contact.id)return;console.log('[CHAT] Initiating call with contact:',contact.id);_this.setState({callState:'calling',contact:contact});// Notify the callee that we're calling\n_this.state.socket.emit('callUser',{recipientId:contact.id,callerName:((_this$state$user=_this.state.user)===null||_this$state$user===void 0?void 0:_this$state$user.username)||'Unknown Caller'});// Access microphone (audio only)\nnavigator.mediaDevices.getUserMedia({audio:true,video:false}).then(function(stream){console.log('[CHAT] Got localStream, tracks:',stream.getAudioTracks());_this.setState({localStream:stream});var peerConnection=_this.createPeerConnection();// Add local tracks\nstream.getTracks().forEach(function(track){console.log('[CHAT] Adding local track:',track.label);peerConnection.addTrack(track,stream);});// Create offer\npeerConnection.createOffer().then(function(offer){console.log('[CHAT] Created offer, setting local desc');peerConnection.setLocalDescription(offer);console.log('[CHAT] Sending offer to server...');_this.state.socket.emit('offer',{sdp:offer,target:contact.id});}).catch(function(err){return console.error('[CHAT] Offer creation error',err);});_this.setState({peerConnection:peerConnection});}).catch(function(err){return console.error('[CHAT] getUserMedia error',err);});};_this.acceptCall=function(){var _this$state$callerInf;console.log('[CHAT] Accepting call from:',_this.state.callerInfo);_this.setState({incomingCallModal:false,callState:'inCall'});var callerId=(_this$state$callerInf=_this.state.callerInfo)===null||_this$state$callerInf===void 0?void 0:_this$state$callerInf.from;if(callerId&&(!_this.state.contact.id||_this.state.contact.id!==callerId)){_this.setState({contact:_objectSpread(_objectSpread({},_this.state.contact),{},{id:callerId,name:_this.state.callerInfo.callerName})});}// Access microphone (audio only for now)\nnavigator.mediaDevices.getUserMedia({audio:true,video:false}).then(function(stream){console.log('[CHAT] Got localStream (callee), tracks:',stream.getAudioTracks());_this.setState({localStream:stream});var peerConnection=_this.createPeerConnection();// Add local tracks\nstream.getTracks().forEach(function(track){console.log('[CHAT] Callee adding local track:',track.label);peerConnection.addTrack(track,stream);});// Once the peerConnection is ready, if there's a stored pendingOffer, handle it now.\n_this.setState({peerConnection:peerConnection},function(){if(_this.state.pendingOffer){var _this$state$pendingOf=_this.state.pendingOffer,sdp=_this$state$pendingOf.sdp,caller=_this$state$pendingOf.caller;_this.handleOffer(sdp,caller);_this.setState({pendingOffer:null});}});}).catch(function(err){return console.error('[CHAT] Error accessing mic (callee)',err);});};_this.rejectCall=function(){console.log('[CHAT] Rejecting call from:',_this.state.callerInfo);_this.setState({incomingCallModal:false,callState:'idle',callerInfo:null,pendingOffer:null// discard any stored offer\n});// Optionally notify the caller that call is rejected\n// e.g. this.state.socket.emit('callRejected', {...});\n};_this.createPeerConnection=function(){console.log('[CHAT] Creating RTCPeerConnection...');var configuration={iceServers:[{urls:'stun:stun1.l.google.com:19302'}// Add a TURN server if needed for NAT traversal\n]};var peerConnection=new RTCPeerConnection(configuration);// On ICE candidate\npeerConnection.onicecandidate=function(event){if(event.candidate){var targetId=_this.state.contact.id||_this.state.callerInfo&&_this.state.callerInfo.from;console.log('[CHAT] Sending ICE candidate to:',targetId);_this.state.socket.emit('iceCandidate',{candidate:event.candidate,target:targetId});}else{console.log('[CHAT] ICE gathering complete (no more candidates)');}};// On track (remote stream)\npeerConnection.ontrack=function(event){console.log('[CHAT] ontrack => remote track label:',event.track.label);_this.setState({remoteStream:event.streams[0]});};// Handle connection state changes\npeerConnection.onconnectionstatechange=function(){var state=peerConnection.connectionState;console.log('[CHAT] PeerConnection state:',state);if(state==='disconnected'||state==='failed'||state==='closed'){console.log('[CHAT] PeerConnection ended, calling endCall()');_this.endCall();}};return peerConnection;};_this.endCall=function(){console.log('[CHAT] endCall invoked');var _this$state=_this.state,socket=_this$state.socket,contact=_this$state.contact,callerInfo=_this$state.callerInfo,peerConnection=_this$state.peerConnection,localStream=_this$state.localStream,callState=_this$state.callState;var targetId=contact.id||callerInfo&&callerInfo.from;// If we are calling or in call, notify other side\nif(callState==='calling'||callState==='inCall'){console.log('[CHAT] Emitting hangUp to target:',targetId);socket.emit('hangUp',{target:targetId});}// Close peerConnection\nif(peerConnection){console.log('[CHAT] Closing peerConnection...');peerConnection.close();}// Stop local media\nif(localStream){console.log('[CHAT] Stopping localStream tracks');localStream.getTracks().forEach(function(track){return track.stop();});}_this.setState({callState:'idle',peerConnection:null,localStream:null,remoteStream:null,callerInfo:null,incomingCallModal:false,pendingOffer:null// clear any pending offer\n});};_this.onData=function(user,contacts,messages,users){console.log('[CHAT] onData => user:',user,' contacts:',contacts.length);var contact=contacts[0]||{};_this.setState({messages:messages,contacts:contacts,user:user,contact:contact},function(){_this.updateUsersState(users);});};_this.onNewMessage=function(message){if(message.sender===_this.state.contact.id){_this.setState({typing:false});_this.state.socket.emit('seen',_this.state.contact.id);message.seen=true;}var newMessages=_this.state.messages.concat(message);_this.setState({messages:newMessages});};_this.onTypingMessage=function(sender){if(_this.state.contact.id!==sender)return;_this.setState({typing:sender});clearTimeout(_this.state.timeout);var timeout=setTimeout(function(){return _this.setState({typing:false});},3000);_this.setState({timeout:timeout});};_this.onSocketError=function(err){console.error('[CHAT] Socket error:',err);if(err==='auth_error'){Auth.logout();_this.props.history.push('/login');}};_this.updateUsersState=function(users){var contacts=_this.state.contacts;contacts.forEach(function(element,index){if(users[element.id])contacts[index].status=users[element.id];});_this.setState({contacts:contacts});var contact=_this.state.contact;if(users[contact.id])contact.status=users[contact.id];_this.setState({contact:contact});};_this.sendMessage=function(message){if(!_this.state.contact.id)return;message.receiver=_this.state.contact.id;var newMessages=_this.state.messages.concat(message);_this.setState({messages:newMessages});_this.state.socket.emit('message',message);};_this.sendType=function(){if(_this.state.contact.id){_this.state.socket.emit('typing',_this.state.contact.id);}};_this.logout=function(){console.log('[CHAT] Logging out user');_this.state.socket.disconnect();Auth.logout();_this.props.history.push('/');};_this.renderChat=function(){var _this$state2=_this.state,contact=_this$state2.contact,user=_this$state2.user,messages=_this$state2.messages;if(!contact||!contact.id)return null;var filtered=messages.filter(function(m){return m.sender===contact.id||m.receiver===contact.id;});return/*#__PURE__*/_jsx(Messages,{user:user,messages:filtered});};_this.onChatNavigate=function(contact){console.log('[CHAT] onChatNavigate => switching to contact:',contact.id);_this.setState({contact:contact});_this.state.socket.emit('seen',contact.id);var newMessages=_this.state.messages.map(function(m){if(m.sender===contact.id){return _objectSpread(_objectSpread({},m),{},{seen:true});}return m;});_this.setState({messages:newMessages});};_this.userProfileToggle=function(){return _this.setState({userProfile:!_this.state.userProfile});};_this.profileToggle=function(){return _this.setState({profile:!_this.state.profile});};return _this;}_createClass(Chat,[{key:\"componentDidMount\",value:function componentDidMount(){// Initialize socket.io connection.\nthis.initSocketConnection();}// ============ SOCKET.IO CONNECTION & EVENTS ============\n},{key:\"render\",value:// ============ RENDERING ============\nfunction render(){var _this2=this;if(!this.state.connected||!this.state.contacts||!this.state.messages){return/*#__PURE__*/_jsx(Spinner,{id:\"loader\",color:\"success\"});}return/*#__PURE__*/_jsxs(Row,{className:\"h-100\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"contacts-section\",className:\"col-6 col-md-4\",children:[/*#__PURE__*/_jsx(ContactHeader,{user:this.state.user,toggle:this.profileToggle}),/*#__PURE__*/_jsx(Contacts,{contacts:this.state.contacts,messages:this.state.messages,onChatNavigate:this.onChatNavigate}),/*#__PURE__*/_jsx(UserProfile,{contact:this.state.contact,toggle:this.userProfileToggle,open:this.state.userProfile}),/*#__PURE__*/_jsx(EditProfile,{user:this.state.user,toggle:this.profileToggle,open:this.state.profile})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"messages-section\",className:\"col-6 col-md-8\",children:[/*#__PURE__*/_jsx(ChatHeader,{contact:this.state.contact,typing:this.state.typing,toggle:this.userProfileToggle,logout:this.logout// pass the call method so ChatHeader can call\n,onCall:this.initiateCall}),this.renderChat(),/*#__PURE__*/_jsx(MessageForm,{sender:this.sendMessage,sendType:this.sendType}),(this.state.callState==='calling'||this.state.callState==='inCall')&&/*#__PURE__*/_jsx(Button,{color:\"danger\",onClick:this.endCall,className:\"mt-2\",children:\"Hang Up\"}),this.state.remoteStream&&/*#__PURE__*/_jsx(\"audio\",{ref:function ref(audioEl){if(audioEl&&_this2.state.remoteStream){console.log('[CHAT] Attaching remoteStream to audio element');audioEl.srcObject=_this2.state.remoteStream;}},autoPlay:true})]}),/*#__PURE__*/_jsxs(Modal,{isOpen:this.state.incomingCallModal,children:[/*#__PURE__*/_jsx(ModalHeader,{children:\"Incoming Call\"}),/*#__PURE__*/_jsx(ModalBody,{children:this.state.callerInfo&&/*#__PURE__*/_jsxs(\"p\",{children:[this.state.callerInfo.callerName,\" is calling...\"]})}),/*#__PURE__*/_jsxs(ModalFooter,{children:[/*#__PURE__*/_jsx(Button,{color:\"success\",onClick:this.acceptCall,children:\"Accept\"}),/*#__PURE__*/_jsx(Button,{color:\"secondary\",onClick:this.rejectCall,children:\"Reject\"})]})]})]});}}]);return Chat;}(React.Component);export default Chat;","map":{"version":3,"sources":["C:/Users/moaid/Desktop/chat-app-master/web/src/views/Chat.js"],"names":["React","Row","Spinner","Button","Modal","ModalHeader","ModalBody","ModalFooter","ContactHeader","Contacts","ChatHeader","Messages","MessageForm","UserProfile","EditProfile","socketIO","Auth","Chat","state","contacts","contact","userProfile","profile","connected","messages","typing","timeout","user","callState","incomingCallModal","callerInfo","localStream","remoteStream","peerConnection","pendingOffer","initSocketConnection","socket","process","env","REACT_APP_SOCKET","query","getToken","on","console","log","setState","onData","onNewMessage","updateUsersState","onTypingMessage","onSocketError","data","id","from","name","callerName","sdp","caller","handleOffer","callee","desc","RTCSessionDescription","setRemoteDescription","then","catch","err","error","candidate","addIceCandidate","RTCIceCandidate","e","endCall","createAnswer","answer","setLocalDescription","emit","target","initiateCall","recipientId","username","navigator","mediaDevices","getUserMedia","audio","video","stream","getAudioTracks","createPeerConnection","getTracks","forEach","track","label","addTrack","createOffer","offer","acceptCall","callerId","rejectCall","configuration","iceServers","urls","RTCPeerConnection","onicecandidate","event","targetId","ontrack","streams","onconnectionstatechange","connectionState","close","stop","users","length","message","sender","seen","newMessages","concat","clearTimeout","setTimeout","logout","props","history","push","element","index","status","sendMessage","receiver","sendType","disconnect","renderChat","filtered","filter","m","onChatNavigate","map","userProfileToggle","profileToggle","audioEl","srcObject","Component"],"mappings":"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","sourcesContent":["/**\n * web/src/views/Chat.js\n */\n\nimport React from 'react';\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport {\n  ContactHeader,\n  Contacts,\n  ChatHeader,\n  Messages,\n  MessageForm,\n  UserProfile,\n  EditProfile,\n} from 'components';\nimport socketIO from 'socket.io-client';\nimport Auth from 'Auth';\n\nclass Chat extends React.Component {\n  state = {\n    contacts: [],\n    contact: {},         // Will hold { id, name, ... } of the current chat\n    userProfile: false,\n    profile: false,\n\n    // Existing message-related states\n    connected: false,\n    messages: [],\n    typing: false,\n    timeout: null,\n    user: null,\n\n    // ------ CALL STATES ------\n    callState: 'idle',  // 'idle' | 'calling' | 'receiving' | 'inCall'\n    incomingCallModal: false,\n    callerInfo: null,   // Will hold { from, callerName }\n\n    // WebRTC\n    localStream: null,\n    remoteStream: null,\n    peerConnection: null,\n\n    // NEW: Store an SDP offer if it arrives before we have a peerConnection.\n    pendingOffer: null,\n  };\n\n  componentDidMount() {\n    // Initialize socket.io connection.\n    this.initSocketConnection();\n  }\n\n  // ============ SOCKET.IO CONNECTION & EVENTS ============\n  initSocketConnection = () => {\n    const socket = socketIO(process.env.REACT_APP_SOCKET, {\n      query: 'token=' + Auth.getToken(),\n    });\n\n    // --- Existing events ---\n    socket.on('connect', () => {\n      console.log('[CHAT] Socket connected');\n      this.setState({ connected: true });\n    });\n    socket.on('disconnect', () => {\n      console.log('[CHAT] Socket disconnected');\n      this.setState({ connected: false });\n    });\n    socket.on('data', this.onData);\n    socket.on('message', this.onNewMessage);\n    socket.on('user_status', this.updateUsersState);\n    socket.on('typing', this.onTypingMessage);\n    socket.on('error', this.onSocketError);\n\n    // ---------------- NEW: CALL EVENTS ----------------\n    socket.on('incomingCall', (data) => {\n      // data => { from: userId, callerName: ... }\n      console.log('[CHAT] Incoming call from:', data);\n      this.setState({\n        callState: 'receiving',\n        incomingCallModal: true,\n        callerInfo: data,   // store who is calling\n      });\n\n      // OPTIONAL: Update contact so we know who we're talking to\n      if (!this.state.contact.id || this.state.contact.id !== data.from) {\n        this.setState({\n          contact: {\n            ...this.state.contact,\n            id: data.from,\n            name: data.callerName,\n          },\n        });\n      }\n    });\n\n    // --- IMPORTANT CHANGE HERE: Store or handle the offer ---\n    socket.on('offer', ({ sdp, caller }) => {\n      console.log('[CHAT] Received offer from:', caller);\n      // If we already have a peerConnection, handle it right away.\n      if (this.state.peerConnection) {\n        this.handleOffer(sdp, caller);\n      } else {\n        // We haven't accepted the call yet => store it in state until we create peerConnection\n        console.log('[CHAT] No peerConnection yet. Storing pendingOffer...');\n        this.setState({ pendingOffer: { sdp, caller } });\n      }\n    });\n\n    socket.on('answer', ({ sdp, callee }) => {\n      console.log('[CHAT] Received answer from:', callee);\n      if (this.state.peerConnection) {\n        const desc = new RTCSessionDescription(sdp);\n        this.state.peerConnection.setRemoteDescription(desc)\n          .then(() => {\n            console.log('[CHAT] Remote description set for answer, callState = inCall');\n            this.setState({ callState: 'inCall' });\n          })\n          .catch(err => console.error('[CHAT] Error setting remote desc (answer)', err));\n      }\n    });\n\n    socket.on('iceCandidate', ({ candidate, from }) => {\n      console.log('[CHAT] Received ICE candidate from:', from);\n      if (this.state.peerConnection && candidate) {\n        this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate))\n          .catch(e => console.error('[CHAT] Error adding ICE candidate', e));\n      }\n    });\n\n    socket.on('hangUp', () => {\n      console.log('[CHAT] Call ended by remote');\n      this.endCall();\n    });\n\n    this.setState({ socket });\n  };\n\n  // Helper to handle incoming offer -> setRemoteDesc -> createAnswer\n  handleOffer = (sdp, caller) => {\n    console.log('[CHAT] handleOffer => Setting remote desc & creating answer...');\n    const desc = new RTCSessionDescription(sdp);\n    this.state.peerConnection.setRemoteDescription(desc)\n      .then(() => {\n        console.log('[CHAT] Remote description set (offer). Creating answer...');\n        return this.state.peerConnection.createAnswer();\n      })\n      .then(answer => {\n        console.log('[CHAT] Created answer, setting local desc and sending...');\n        this.state.peerConnection.setLocalDescription(answer);\n        this.state.socket.emit('answer', {\n          sdp: answer,\n          target: caller,\n        });\n        this.setState({ callState: 'inCall' });\n      })\n      .catch(err => console.error('[CHAT] Error handling offer->answer', err));\n  };\n\n  // ============ CALLING FUNCTIONS ============\n  initiateCall = (contact) => {\n    if (!contact.id) return;\n    console.log('[CHAT] Initiating call with contact:', contact.id);\n\n    this.setState({\n      callState: 'calling',\n      contact: contact,\n    });\n\n    // Notify the callee that we're calling\n    this.state.socket.emit('callUser', {\n      recipientId: contact.id,\n      callerName: this.state.user?.username || 'Unknown Caller',\n    });\n\n    // Access microphone (audio only)\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n      .then(stream => {\n        console.log('[CHAT] Got localStream, tracks:', stream.getAudioTracks());\n        this.setState({ localStream: stream });\n\n        const peerConnection = this.createPeerConnection();\n\n        // Add local tracks\n        stream.getTracks().forEach(track => {\n          console.log('[CHAT] Adding local track:', track.label);\n          peerConnection.addTrack(track, stream);\n        });\n\n        // Create offer\n        peerConnection.createOffer()\n          .then(offer => {\n            console.log('[CHAT] Created offer, setting local desc');\n            peerConnection.setLocalDescription(offer);\n            console.log('[CHAT] Sending offer to server...');\n            this.state.socket.emit('offer', {\n              sdp: offer,\n              target: contact.id,\n            });\n          })\n          .catch(err => console.error('[CHAT] Offer creation error', err));\n\n        this.setState({ peerConnection });\n      })\n      .catch(err => console.error('[CHAT] getUserMedia error', err));\n  };\n\n  acceptCall = () => {\n    console.log('[CHAT] Accepting call from:', this.state.callerInfo);\n    this.setState({\n      incomingCallModal: false,\n      callState: 'inCall',\n    });\n\n    const callerId = this.state.callerInfo?.from;\n    if (callerId && (!this.state.contact.id || this.state.contact.id !== callerId)) {\n      this.setState({\n        contact: {\n          ...this.state.contact,\n          id: callerId,\n          name: this.state.callerInfo.callerName,\n        },\n      });\n    }\n\n    // Access microphone (audio only for now)\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n      .then(stream => {\n        console.log('[CHAT] Got localStream (callee), tracks:', stream.getAudioTracks());\n        this.setState({ localStream: stream });\n\n        const peerConnection = this.createPeerConnection();\n\n        // Add local tracks\n        stream.getTracks().forEach(track => {\n          console.log('[CHAT] Callee adding local track:', track.label);\n          peerConnection.addTrack(track, stream);\n        });\n\n        // Once the peerConnection is ready, if there's a stored pendingOffer, handle it now.\n        this.setState({ peerConnection }, () => {\n          if (this.state.pendingOffer) {\n            const { sdp, caller } = this.state.pendingOffer;\n            this.handleOffer(sdp, caller);\n            this.setState({ pendingOffer: null });\n          }\n        });\n      })\n      .catch(err => console.error('[CHAT] Error accessing mic (callee)', err));\n  };\n\n  rejectCall = () => {\n    console.log('[CHAT] Rejecting call from:', this.state.callerInfo);\n    this.setState({\n      incomingCallModal: false,\n      callState: 'idle',\n      callerInfo: null,\n      pendingOffer: null, // discard any stored offer\n    });\n    // Optionally notify the caller that call is rejected\n    // e.g. this.state.socket.emit('callRejected', {...});\n  };\n\n  createPeerConnection = () => {\n    console.log('[CHAT] Creating RTCPeerConnection...');\n    const configuration = {\n      iceServers: [\n        { urls: 'stun:stun1.l.google.com:19302' },\n        // Add a TURN server if needed for NAT traversal\n      ],\n    };\n    const peerConnection = new RTCPeerConnection(configuration);\n\n    // On ICE candidate\n    peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        const targetId =\n          this.state.contact.id ||\n          (this.state.callerInfo && this.state.callerInfo.from);\n        console.log('[CHAT] Sending ICE candidate to:', targetId);\n        this.state.socket.emit('iceCandidate', {\n          candidate: event.candidate,\n          target: targetId,\n        });\n      } else {\n        console.log('[CHAT] ICE gathering complete (no more candidates)');\n      }\n    };\n\n    // On track (remote stream)\n    peerConnection.ontrack = (event) => {\n      console.log('[CHAT] ontrack => remote track label:', event.track.label);\n      this.setState({ remoteStream: event.streams[0] });\n    };\n\n    // Handle connection state changes\n    peerConnection.onconnectionstatechange = () => {\n      const state = peerConnection.connectionState;\n      console.log('[CHAT] PeerConnection state:', state);\n      if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n        console.log('[CHAT] PeerConnection ended, calling endCall()');\n        this.endCall();\n      }\n    };\n\n    return peerConnection;\n  };\n\n  endCall = () => {\n    console.log('[CHAT] endCall invoked');\n    const { socket, contact, callerInfo, peerConnection, localStream, callState } = this.state;\n    const targetId = contact.id || (callerInfo && callerInfo.from);\n\n    // If we are calling or in call, notify other side\n    if (callState === 'calling' || callState === 'inCall') {\n      console.log('[CHAT] Emitting hangUp to target:', targetId);\n      socket.emit('hangUp', { target: targetId });\n    }\n\n    // Close peerConnection\n    if (peerConnection) {\n      console.log('[CHAT] Closing peerConnection...');\n      peerConnection.close();\n    }\n\n    // Stop local media\n    if (localStream) {\n      console.log('[CHAT] Stopping localStream tracks');\n      localStream.getTracks().forEach(track => track.stop());\n    }\n\n    this.setState({\n      callState: 'idle',\n      peerConnection: null,\n      localStream: null,\n      remoteStream: null,\n      callerInfo: null,\n      incomingCallModal: false,\n      pendingOffer: null, // clear any pending offer\n    });\n  };\n\n  // ============ EXISTING MESSAGING LOGIC ============\n  onData = (user, contacts, messages, users) => {\n    console.log('[CHAT] onData => user:', user, ' contacts:', contacts.length);\n    let contact = contacts[0] || {};\n    this.setState({ messages, contacts, user, contact }, () => {\n      this.updateUsersState(users);\n    });\n  };\n\n  onNewMessage = (message) => {\n    if (message.sender === this.state.contact.id) {\n      this.setState({ typing: false });\n      this.state.socket.emit('seen', this.state.contact.id);\n      message.seen = true;\n    }\n    let newMessages = this.state.messages.concat(message);\n    this.setState({ messages: newMessages });\n  };\n\n  onTypingMessage = (sender) => {\n    if (this.state.contact.id !== sender) return;\n    this.setState({ typing: sender });\n    clearTimeout(this.state.timeout);\n    const timeout = setTimeout(() => this.setState({ typing: false }), 3000);\n    this.setState({ timeout });\n  };\n\n  onSocketError = (err) => {\n    console.error('[CHAT] Socket error:', err);\n    if (err === 'auth_error') {\n      Auth.logout();\n      this.props.history.push('/login');\n    }\n  };\n\n  updateUsersState = (users) => {\n    let contacts = this.state.contacts;\n    contacts.forEach((element, index) => {\n      if (users[element.id]) contacts[index].status = users[element.id];\n    });\n    this.setState({ contacts });\n    let contact = this.state.contact;\n    if (users[contact.id]) contact.status = users[contact.id];\n    this.setState({ contact });\n  };\n\n  sendMessage = (message) => {\n    if (!this.state.contact.id) return;\n    message.receiver = this.state.contact.id;\n    let newMessages = this.state.messages.concat(message);\n    this.setState({ messages: newMessages });\n    this.state.socket.emit('message', message);\n  };\n\n  sendType = () => {\n    if (this.state.contact.id) {\n      this.state.socket.emit('typing', this.state.contact.id);\n    }\n  };\n\n  logout = () => {\n    console.log('[CHAT] Logging out user');\n    this.state.socket.disconnect();\n    Auth.logout();\n    this.props.history.push('/');\n  };\n\n  // ============ RENDERING ============\n  render() {\n    if (!this.state.connected || !this.state.contacts || !this.state.messages) {\n      return <Spinner id=\"loader\" color=\"success\" />;\n    }\n\n    return (\n      <Row className=\"h-100\">\n        {/* LEFT: Contacts Section */}\n        <div id=\"contacts-section\" className=\"col-6 col-md-4\">\n          <ContactHeader user={this.state.user} toggle={this.profileToggle} />\n          <Contacts\n            contacts={this.state.contacts}\n            messages={this.state.messages}\n            onChatNavigate={this.onChatNavigate}\n          />\n          <UserProfile\n            contact={this.state.contact}\n            toggle={this.userProfileToggle}\n            open={this.state.userProfile}\n          />\n          <EditProfile\n            user={this.state.user}\n            toggle={this.profileToggle}\n            open={this.state.profile}\n          />\n        </div>\n\n        {/* RIGHT: Messages Section */}\n        <div id=\"messages-section\" className=\"col-6 col-md-8\">\n          <ChatHeader\n            contact={this.state.contact}\n            typing={this.state.typing}\n            toggle={this.userProfileToggle}\n            logout={this.logout}\n            // pass the call method so ChatHeader can call\n            onCall={this.initiateCall}\n          />\n          {this.renderChat()}\n          <MessageForm sender={this.sendMessage} sendType={this.sendType} />\n\n          {/* Hang Up button if in a call */}\n          {(this.state.callState === 'calling' || this.state.callState === 'inCall') && (\n            <Button color=\"danger\" onClick={this.endCall} className=\"mt-2\">\n              Hang Up\n            </Button>\n          )}\n\n          {/* Audio element for remote stream */}\n          {this.state.remoteStream && (\n            <audio\n              ref={(audioEl) => {\n                if (audioEl && this.state.remoteStream) {\n                  console.log('[CHAT] Attaching remoteStream to audio element');\n                  audioEl.srcObject = this.state.remoteStream;\n                }\n              }}\n              autoPlay\n            />\n          )}\n        </div>\n\n        {/* INCOMING CALL MODAL */}\n        <Modal isOpen={this.state.incomingCallModal}>\n          <ModalHeader>Incoming Call</ModalHeader>\n          <ModalBody>\n            {this.state.callerInfo && (\n              <p>{this.state.callerInfo.callerName} is calling...</p>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"success\" onClick={this.acceptCall}>Accept</Button>\n            <Button color=\"secondary\" onClick={this.rejectCall}>Reject</Button>\n          </ModalFooter>\n        </Modal>\n      </Row>\n    );\n  }\n\n  renderChat = () => {\n    const { contact, user, messages } = this.state;\n    if (!contact || !contact.id) return null;\n    let filtered = messages.filter(\n      (m) => m.sender === contact.id || m.receiver === contact.id\n    );\n    return <Messages user={user} messages={filtered} />;\n  };\n\n  onChatNavigate = (contact) => {\n    console.log('[CHAT] onChatNavigate => switching to contact:', contact.id);\n    this.setState({ contact });\n    this.state.socket.emit('seen', contact.id);\n    let newMessages = this.state.messages.map((m) => {\n      if (m.sender === contact.id) {\n        return { ...m, seen: true };\n      }\n      return m;\n    });\n    this.setState({ messages: newMessages });\n  };\n\n  userProfileToggle = () => this.setState({ userProfile: !this.state.userProfile });\n  profileToggle = () => this.setState({ profile: !this.state.profile });\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}