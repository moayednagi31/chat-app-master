{"ast":null,"code":"import _classCallCheck from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\mohsh\\\\Downloads\\\\chat-app-master (1)\\\\chat-app-master\\\\web\\\\src\\\\views\\\\Chat.js\";\nimport React from 'react';\nimport { Row, Spinner } from 'reactstrap';\nimport { ContactHeader, Contacts, ChatHeader, Messages, MessageForm, UserProfile, EditProfile } from 'components';\nimport socketIO from 'socket.io-client';\nimport Auth from 'Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Chat = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      contacts: [],\n      contact: {},\n      userProfile: false,\n      profile: false,\n      // We'll assume these exist from your original code\n      connected: false,\n      messages: [],\n      typing: false,\n      timeout: null,\n      user: null\n    };\n\n    _this.initiateCall = function (contact) {\n      console.log('Initiating call with:', contact); // Here you can put your WebRTC or signaling logic.\n      // For example, emit an event to the server or open a call modal.\n    };\n\n    _this.onChatNavigate = function (contact) {\n      _this.setState({\n        contact: contact\n      }); // Mark unseen messages as seen.\n\n\n      _this.state.socket.emit('seen', contact.id);\n\n      var messages = _this.state.messages;\n      messages.forEach(function (element, index) {\n        if (element.sender === contact.id) messages[index].seen = true;\n      });\n\n      _this.setState({\n        messages: messages\n      });\n    };\n\n    _this.userProfileToggle = function () {\n      return _this.setState({\n        userProfile: !_this.state.userProfile\n      });\n    };\n\n    _this.profileToggle = function () {\n      return _this.setState({\n        profile: !_this.state.profile\n      });\n    };\n\n    _this.renderChat = function () {\n      var _this$state = _this.state,\n          contact = _this$state.contact,\n          user = _this$state.user;\n      if (!contact) return null; // Show only messages between me and the current contact\n\n      var messages = _this.state.messages.filter(function (e) {\n        return e.sender === contact.id || e.receiver === contact.id;\n      });\n\n      return /*#__PURE__*/_jsxDEV(Messages, {\n        user: user,\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 12\n      }, _assertThisInitialized(_this));\n    };\n\n    _this.initSocketConnection = function () {\n      var socket = socketIO(process.env.REACT_APP_SOCKET, {\n        query: 'token=' + Auth.getToken()\n      });\n      socket.on('connect', function () {\n        return _this.setState({\n          connected: true\n        });\n      });\n      socket.on('disconnect', function () {\n        return _this.setState({\n          connected: false\n        });\n      });\n      socket.on('data', _this.onData);\n      socket.on('new_user', _this.onNewUser);\n      socket.on('update_user', _this.onUpdateUser);\n      socket.on('message', _this.onNewMessage);\n      socket.on('user_status', _this.updateUsersState);\n      socket.on('typing', _this.onTypingMessage);\n      socket.on('error', _this.onSocketError);\n\n      _this.setState({\n        socket: socket\n      });\n    };\n\n    _this.onData = function (user, contacts, messages, users) {\n      var contact = contacts[0] || {};\n\n      _this.setState({\n        messages: messages,\n        contacts: contacts,\n        user: user,\n        contact: contact\n      }, function () {\n        _this.updateUsersState(users);\n      });\n    };\n\n    _this.onNewUser = function (user) {\n      var contacts = _this.state.contacts.concat(user);\n\n      _this.setState({\n        contacts: contacts\n      });\n    };\n\n    _this.onUpdateUser = function (user) {\n      if (_this.state.user.id === user.id) {\n        _this.setState({\n          user: user\n        });\n\n        Auth.setUser(user);\n        return;\n      }\n\n      var contacts = _this.state.contacts;\n      contacts.forEach(function (element, index) {\n        if (element.id === user.id) {\n          contacts[index] = user;\n          contacts[index].status = element.status;\n        }\n      });\n\n      _this.setState({\n        contacts: contacts\n      });\n\n      if (_this.state.contact.id === user.id) _this.setState({\n        contact: user\n      });\n    };\n\n    _this.onNewMessage = function (message) {\n      if (message.sender === _this.state.contact.id) {\n        _this.setState({\n          typing: false\n        });\n\n        _this.state.socket.emit('seen', _this.state.contact.id);\n\n        message.seen = true;\n      }\n\n      var messages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: messages\n      });\n    };\n\n    _this.onTypingMessage = function (sender) {\n      if (_this.state.contact.id !== sender) return;\n\n      _this.setState({\n        typing: sender\n      });\n\n      clearTimeout(_this.state.timeout);\n      var timeout = setTimeout(_this.typingTimeout, 3000);\n\n      _this.setState({\n        timeout: timeout\n      });\n    };\n\n    _this.onSocketError = function (err) {\n      if (err === 'auth_error') {\n        Auth.logout();\n\n        _this.props.history.push('/login');\n      }\n    };\n\n    _this.typingTimeout = function () {\n      return _this.setState({\n        typing: false\n      });\n    };\n\n    _this.sendMessage = function (message) {\n      if (!_this.state.contact.id) return;\n      message.receiver = _this.state.contact.id;\n\n      var messages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: messages\n      });\n\n      _this.state.socket.emit('message', message);\n    };\n\n    _this.sendType = function () {\n      if (_this.state.contact.id) {\n        _this.state.socket.emit('typing', _this.state.contact.id);\n      }\n    };\n\n    _this.logout = function () {\n      _this.state.socket.disconnect();\n\n      Auth.logout();\n\n      _this.props.history.push('/');\n    };\n\n    _this.updateUsersState = function (users) {\n      var contacts = _this.state.contacts;\n      contacts.forEach(function (element, index) {\n        if (users[element.id]) contacts[index].status = users[element.id];\n      });\n\n      _this.setState({\n        contacts: contacts\n      });\n\n      var contact = _this.state.contact;\n      if (users[contact.id]) contact.status = users[contact.id];\n\n      _this.setState({\n        contact: contact\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value:\n    /**\r\n     * When component mounts.\r\n     */\n    function componentDidMount() {\n      // Initialize socket.io connection.\n      this.initSocketConnection();\n    }\n    /**\r\n     * Method to initiate a call (audio/video) with the current contact\r\n     * or whichever contact is passed in.\r\n     */\n\n  }, {\n    key: \"render\",\n    value:\n    /**\r\n     * Render chat page\r\n     */\n    function render() {\n      // If socket.io client not connected, show loading spinner.\n      if (!this.state.connected || !this.state.contacts || !this.state.messages) {\n        return /*#__PURE__*/_jsxDEV(Spinner, {\n          id: \"loader\",\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 14\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Row, {\n        className: \"h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"contacts-section\",\n          className: \"col-6 col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(ContactHeader, {\n            user: this.state.user,\n            toggle: this.profileToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Contacts, {\n            contacts: this.state.contacts,\n            messages: this.state.messages,\n            onChatNavigate: this.onChatNavigate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(UserProfile, {\n            contact: this.state.contact,\n            toggle: this.userProfileToggle,\n            open: this.state.userProfile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(EditProfile, {\n            user: this.state.user,\n            toggle: this.profileToggle,\n            open: this.state.profile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"messages-section\",\n          className: \"col-6 col-md-8\",\n          children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n            contact: this.state.contact,\n            typing: this.state.typing,\n            toggle: this.userProfileToggle,\n            logout: this.logout\n            /* NEW: pass a prop so ChatHeader has a \"Call\" button */\n            ,\n            onCall: this.initiateCall\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this), this.renderChat(), /*#__PURE__*/_jsxDEV(MessageForm, {\n            sender: this.sendMessage,\n            sendType: this.sendType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this);\n    }\n    /**\r\n     * Render messages component.\r\n     */\n\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/src/views/Chat.js"],"names":["React","Row","Spinner","ContactHeader","Contacts","ChatHeader","Messages","MessageForm","UserProfile","EditProfile","socketIO","Auth","Chat","state","contacts","contact","userProfile","profile","connected","messages","typing","timeout","user","initiateCall","console","log","onChatNavigate","setState","socket","emit","id","forEach","element","index","sender","seen","userProfileToggle","profileToggle","renderChat","filter","e","receiver","initSocketConnection","process","env","REACT_APP_SOCKET","query","getToken","on","onData","onNewUser","onUpdateUser","onNewMessage","updateUsersState","onTypingMessage","onSocketError","users","concat","setUser","status","message","clearTimeout","setTimeout","typingTimeout","err","logout","props","history","push","sendMessage","sendType","disconnect","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Spinner } from 'reactstrap';\r\nimport { \r\n  ContactHeader, \r\n  Contacts, \r\n  ChatHeader, \r\n  Messages, \r\n  MessageForm, \r\n  UserProfile, \r\n  EditProfile \r\n} from 'components';\r\nimport socketIO from 'socket.io-client';\r\nimport Auth from 'Auth';\r\n\r\nclass Chat extends React.Component {\r\n\r\n  state = { \r\n    contacts: [],\r\n    contact: {},\r\n    userProfile: false,\r\n    profile: false,\r\n    // We'll assume these exist from your original code\r\n    connected: false,\r\n    messages: [],\r\n    typing: false,\r\n    timeout: null,\r\n    user: null\r\n  };\r\n\r\n  /**\r\n   * When component mounts.\r\n   */\r\n  componentDidMount() {\r\n    // Initialize socket.io connection.\r\n    this.initSocketConnection();\r\n  }\r\n\r\n  /**\r\n   * Method to initiate a call (audio/video) with the current contact\r\n   * or whichever contact is passed in.\r\n   */\r\n  initiateCall = (contact) => {\r\n    console.log('Initiating call with:', contact);\r\n    // Here you can put your WebRTC or signaling logic.\r\n    // For example, emit an event to the server or open a call modal.\r\n  };\r\n\r\n  /**\r\n   * Handle navigation between chats.\r\n   */\r\n  onChatNavigate = (contact) => {\r\n    this.setState({ contact });\r\n    // Mark unseen messages as seen.\r\n    this.state.socket.emit('seen', contact.id);\r\n    let messages = this.state.messages;\r\n    messages.forEach((element, index) => {\r\n      if (element.sender === contact.id) messages[index].seen = true;\r\n    });\r\n    this.setState({ messages });\r\n  };\r\n\r\n  /**\r\n   * Toggle UserProfile component.\r\n   */\r\n  userProfileToggle = () => this.setState({ userProfile: !this.state.userProfile });\r\n\r\n  /**\r\n   * Toggle EditProfile component.\r\n   */\r\n  profileToggle = () => this.setState({ profile: !this.state.profile });\r\n\r\n  /**\r\n   * Render chat page\r\n   */\r\n  render() {\r\n    // If socket.io client not connected, show loading spinner.\r\n    if (!this.state.connected || !this.state.contacts || !this.state.messages) {\r\n      return <Spinner id=\"loader\" color=\"success\" />;\r\n    }\r\n    return (\r\n      <Row className=\"h-100\">\r\n        \r\n        {/* CONTACTS SECTION */}\r\n        <div id=\"contacts-section\" className=\"col-6 col-md-4\">\r\n          <ContactHeader \r\n            user={this.state.user} \r\n            toggle={this.profileToggle} \r\n          />\r\n          <Contacts\r\n            contacts={this.state.contacts}\r\n            messages={this.state.messages}\r\n            onChatNavigate={this.onChatNavigate}\r\n          />\r\n          <UserProfile\r\n            contact={this.state.contact}\r\n            toggle={this.userProfileToggle}\r\n            open={this.state.userProfile}\r\n          />\r\n          <EditProfile\r\n            user={this.state.user}\r\n            toggle={this.profileToggle}\r\n            open={this.state.profile}\r\n          />\r\n        </div>\r\n\r\n        {/* MESSAGES SECTION */}\r\n        <div id=\"messages-section\" className=\"col-6 col-md-8\">\r\n          <ChatHeader\r\n            contact={this.state.contact}\r\n            typing={this.state.typing}\r\n            toggle={this.userProfileToggle}\r\n            logout={this.logout}\r\n\r\n            /* NEW: pass a prop so ChatHeader has a \"Call\" button */\r\n            onCall={this.initiateCall}\r\n          />\r\n          {this.renderChat()}\r\n          <MessageForm sender={this.sendMessage} sendType={this.sendType} />\r\n        </div>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render messages component.\r\n   */\r\n  renderChat = () => {\r\n    const { contact, user } = this.state;\r\n    if (!contact) return null;\r\n    // Show only messages between me and the current contact\r\n    let messages = this.state.messages.filter(\r\n      (e) => e.sender === contact.id || e.receiver === contact.id\r\n    );\r\n    return <Messages user={user} messages={messages} />;\r\n  };\r\n\r\n  // ------------------- SOCKET.IO EVENTS ------------------- //\r\n\r\n  /**\r\n   * Initialize socket.io connection\r\n   */\r\n  initSocketConnection = () => {\r\n    let socket = socketIO(process.env.REACT_APP_SOCKET, {\r\n      query: 'token=' + Auth.getToken(),\r\n    });\r\n    socket.on('connect', () => this.setState({ connected: true }));\r\n    socket.on('disconnect', () => this.setState({ connected: false }));\r\n    socket.on('data', this.onData);\r\n    socket.on('new_user', this.onNewUser);\r\n    socket.on('update_user', this.onUpdateUser);\r\n    socket.on('message', this.onNewMessage);\r\n    socket.on('user_status', this.updateUsersState);\r\n    socket.on('typing', this.onTypingMessage);\r\n    socket.on('error', this.onSocketError);\r\n    this.setState({ socket });\r\n  };\r\n\r\n  /**\r\n   * Handle user data event (after connection).\r\n   */\r\n  onData = (user, contacts, messages, users) => {\r\n    let contact = contacts[0] || {};\r\n    this.setState({ messages, contacts, user, contact }, () => {\r\n      this.updateUsersState(users);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Handle new user event.\r\n   */\r\n  onNewUser = (user) => {\r\n    let contacts = this.state.contacts.concat(user);\r\n    this.setState({ contacts });\r\n  };\r\n\r\n  /**\r\n   * Handle update user event.\r\n   */\r\n  onUpdateUser = (user) => {\r\n    if (this.state.user.id === user.id) {\r\n      this.setState({ user });\r\n      Auth.setUser(user);\r\n      return;\r\n    }\r\n    let contacts = this.state.contacts;\r\n    contacts.forEach((element, index) => {\r\n      if (element.id === user.id) {\r\n        contacts[index] = user;\r\n        contacts[index].status = element.status;\r\n      }\r\n    });\r\n    this.setState({ contacts });\r\n    if (this.state.contact.id === user.id) this.setState({ contact: user });\r\n  };\r\n\r\n  /**\r\n   * Handle incoming message event.\r\n   */\r\n  onNewMessage = (message) => {\r\n    if (message.sender === this.state.contact.id) {\r\n      this.setState({ typing: false });\r\n      this.state.socket.emit('seen', this.state.contact.id);\r\n      message.seen = true;\r\n    }\r\n    let messages = this.state.messages.concat(message);\r\n    this.setState({ messages });\r\n  };\r\n\r\n  /**\r\n   * Handle typing or composing event.\r\n   */\r\n  onTypingMessage = (sender) => {\r\n    if (this.state.contact.id !== sender) return;\r\n    this.setState({ typing: sender });\r\n    clearTimeout(this.state.timeout);\r\n    const timeout = setTimeout(this.typingTimeout, 3000);\r\n    this.setState({ timeout });\r\n  };\r\n\r\n  onSocketError = (err) => {\r\n    if (err === 'auth_error') {\r\n      Auth.logout();\r\n      this.props.history.push('/login');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear typing status.\r\n   */\r\n  typingTimeout = () => this.setState({ typing: false });\r\n\r\n  /**\r\n   * Send message.\r\n   */\r\n  sendMessage = (message) => {\r\n    if (!this.state.contact.id) return;\r\n    message.receiver = this.state.contact.id;\r\n    let messages = this.state.messages.concat(message);\r\n    this.setState({ messages });\r\n    this.state.socket.emit('message', message);\r\n  };\r\n\r\n  /**\r\n   * Send typing (composing) message.\r\n   */\r\n  sendType = () => {\r\n    if (this.state.contact.id) {\r\n      this.state.socket.emit('typing', this.state.contact.id);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Logout user.\r\n   */\r\n  logout = () => {\r\n    this.state.socket.disconnect();\r\n    Auth.logout();\r\n    this.props.history.push('/');\r\n  };\r\n\r\n  /**\r\n   * update users statuses.\r\n   */\r\n  updateUsersState = (users) => {\r\n    let contacts = this.state.contacts;\r\n    contacts.forEach((element, index) => {\r\n      if (users[element.id]) contacts[index].status = users[element.id];\r\n    });\r\n    this.setState({ contacts });\r\n    let contact = this.state.contact;\r\n    if (users[contact.id]) contact.status = users[contact.id];\r\n    this.setState({ contact });\r\n  };\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}