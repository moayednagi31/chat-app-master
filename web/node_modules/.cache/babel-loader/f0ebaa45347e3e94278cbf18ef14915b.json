{"ast":null,"code":"import _classCallCheck from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\mohsh\\\\Downloads\\\\chat-app-master (1)\\\\chat-app-master\\\\web\\\\src\\\\views\\\\Chat.js\";\nimport React from 'react';\nimport { Row, Spinner } from 'reactstrap';\nimport { ContactHeader, Contacts, ChatHeader, Messages, MessageForm, UserProfile, EditProfile } from 'components';\nimport socketIO from 'socket.io-client';\nimport Auth from 'Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Chat = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      contacts: [],\n      contact: {},\n      userProfile: false,\n      profile: false\n    };\n\n    _this.onChatNavigate = function (contact) {\n      // Set current chat contact.\n      _this.setState({\n        contact: contact\n      }); // Mark unseen messages as seen.\n\n\n      _this.state.socket.emit('seen', contact.id);\n\n      var messages = _this.state.messages;\n      messages.forEach(function (element, index) {\n        if (element.sender === contact.id) messages[index].seen = true;\n      });\n\n      _this.setState({\n        messages: messages\n      });\n    };\n\n    _this.userProfileToggle = function () {\n      return _this.setState({\n        userProfile: !_this.state.userProfile\n      });\n    };\n\n    _this.profileToggle = function () {\n      return _this.setState({\n        profile: !_this.state.profile\n      });\n    };\n\n    _this.renderChat = function () {\n      var _this$state = _this.state,\n          contact = _this$state.contact,\n          user = _this$state.user;\n      if (!contact) return; // Show only related messages.\n\n      var messages = _this.state.messages.filter(function (e) {\n        return e.sender === contact.id || e.receiver === contact.id;\n      });\n\n      return /*#__PURE__*/_jsxDEV(Messages, {\n        user: user,\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 16\n      }, _assertThisInitialized(_this));\n    };\n\n    _this.initSocketConnection = function () {\n      // Connect to server and send user token.\n      var socket = socketIO(process.env.REACT_APP_SOCKET, {\n        query: 'token=' + Auth.getToken()\n      }); // Handle user connected event.\n\n      socket.on('connect', function () {\n        return _this.setState({\n          connected: true\n        });\n      }); // Handle user disconnected event.\n\n      socket.on('disconnect', function () {\n        return _this.setState({\n          connected: false\n        });\n      }); // Handle user data event (after connection).\n\n      socket.on('data', _this.onData); // Handle new user event.\n\n      socket.on('new_user', _this.onNewUser); // Handle update user event.\n\n      socket.on('update_user', _this.onUpdateUser); // Handle incoming message event.\n\n      socket.on('message', _this.onNewMessage); // Handle changes for user presence.\n\n      socket.on('user_status', _this.updateUsersState); // Handle typing or composing event.\n\n      socket.on('typing', _this.onTypingMessage); // Handle socket.io errors.\n\n      socket.on('error', _this.onSocketError); // Set user socket as state variable.\n\n      _this.setState({\n        socket: socket\n      });\n    };\n\n    _this.onData = function (user, contacts, messages, users) {\n      var contact = contacts[0] || {};\n\n      _this.setState({\n        messages: messages,\n        contacts: contacts,\n        user: user,\n        contact: contact\n      }, function () {\n        _this.updateUsersState(users);\n      });\n    };\n\n    _this.onNewUser = function (user) {\n      // Add user to contacts list.\n      var contacts = _this.state.contacts.concat(user);\n\n      _this.setState({\n        contacts: contacts\n      });\n    };\n\n    _this.onUpdateUser = function (user) {\n      // Add updated user is the current user then update local storage data.\n      if (_this.state.user.id === user.id) {\n        _this.setState({\n          user: user\n        });\n\n        Auth.setUser(user);\n        return;\n      } // Update contact data.\n\n\n      var contacts = _this.state.contacts;\n      contacts.forEach(function (element, index) {\n        if (element.id === user.id) {\n          contacts[index] = user;\n          contacts[index].status = element.status;\n        }\n      });\n\n      _this.setState({\n        contacts: contacts\n      });\n\n      if (_this.state.contact.id === user.id) _this.setState({\n        contact: user\n      });\n    };\n\n    _this.onNewMessage = function (message) {\n      // If user is already in chat then mark the message as seen.\n      if (message.sender === _this.state.contact.id) {\n        _this.setState({\n          typing: false\n        });\n\n        _this.state.socket.emit('seen', _this.state.contact.id);\n\n        message.seen = true;\n      } // Add message to messages list.\n\n\n      var messages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: messages\n      });\n    };\n\n    _this.onTypingMessage = function (sender) {\n      // If the typer not the current chat user then ignore it.\n      if (_this.state.contact.id !== sender) return; // Set typer.\n\n      _this.setState({\n        typing: sender\n      }); // Create timeout function to remove typing status after 3 seconds.\n\n\n      clearTimeout(_this.state.timeout);\n      var timeout = setTimeout(_this.typingTimeout, 3000);\n\n      _this.setState({\n        timeout: timeout\n      });\n    };\n\n    _this.onSocketError = function (err) {\n      // If authentication error then logout.\n      if (err === 'auth_error') {\n        Auth.logout();\n\n        _this.props.history.push('/login');\n      }\n    };\n\n    _this.typingTimeout = function () {\n      return _this.setState({\n        typing: false\n      });\n    };\n\n    _this.sendMessage = function (message) {\n      if (!_this.state.contact.id) return;\n      message.receiver = _this.state.contact.id;\n\n      var messages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: messages\n      });\n\n      _this.state.socket.emit('message', message);\n    };\n\n    _this.sendType = function () {\n      return _this.state.socket.emit('typing', _this.state.contact.id);\n    };\n\n    _this.logout = function () {\n      _this.state.socket.disconnect();\n\n      Auth.logout();\n\n      _this.props.history.push('/');\n    };\n\n    _this.updateUsersState = function (users) {\n      var contacts = _this.state.contacts;\n      contacts.forEach(function (element, index) {\n        if (users[element.id]) contacts[index].status = users[element.id];\n      });\n\n      _this.setState({\n        contacts: contacts\n      });\n\n      var contact = _this.state.contact;\n      if (users[contact.id]) contact.status = users[contact.id];\n\n      _this.setState({\n        contact: contact\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value:\n    /**\r\n     * When component start.\r\n     */\n    function componentDidMount() {\n      // Initialize socket.io connection.\n      this.initSocketConnection();\n    }\n    /**\r\n     * Handle navigation between chats.\r\n     * @param contact\r\n     */\n\n  }, {\n    key: \"render\",\n    value:\n    /**\r\n     * Render chat page\r\n     */\n    function render() {\n      // If socket.io client not connected show loading spinner.\n      if (!this.state.connected || !this.state.contacts || !this.state.messages) {\n        return /*#__PURE__*/_jsxDEV(Spinner, {\n          id: \"loader\",\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 20\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Row, {\n        className: \"h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"contacts-section\",\n          className: \"col-6 col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(ContactHeader, {\n            user: this.state.user,\n            toggle: this.profileToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Contacts, {\n            contacts: this.state.contacts,\n            messages: this.state.messages,\n            onChatNavigate: this.onChatNavigate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(UserProfile, {\n            contact: this.state.contact,\n            toggle: this.userProfileToggle,\n            open: this.state.userProfile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(EditProfile, {\n            user: this.state.user,\n            toggle: this.profileToggle,\n            open: this.state.profile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"messages-section\",\n          className: \"col-6 col-md-8\",\n          children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n            contact: this.state.contact,\n            typing: this.state.typing,\n            toggle: this.userProfileToggle,\n            logout: this.logout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this), this.renderChat(), /*#__PURE__*/_jsxDEV(MessageForm, {\n            sender: this.sendMessage,\n            sendType: this.sendType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this);\n    }\n    /**\r\n     * Render messages component.\r\n     */\n\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/src/views/Chat.js"],"names":["React","Row","Spinner","ContactHeader","Contacts","ChatHeader","Messages","MessageForm","UserProfile","EditProfile","socketIO","Auth","Chat","state","contacts","contact","userProfile","profile","onChatNavigate","setState","socket","emit","id","messages","forEach","element","index","sender","seen","userProfileToggle","profileToggle","renderChat","user","filter","e","receiver","initSocketConnection","process","env","REACT_APP_SOCKET","query","getToken","on","connected","onData","onNewUser","onUpdateUser","onNewMessage","updateUsersState","onTypingMessage","onSocketError","users","concat","setUser","status","message","typing","clearTimeout","timeout","setTimeout","typingTimeout","err","logout","props","history","push","sendMessage","sendType","disconnect","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Spinner } from 'reactstrap';\r\nimport { ContactHeader, Contacts, ChatHeader, Messages, MessageForm, UserProfile, EditProfile } from 'components';\r\nimport socketIO from 'socket.io-client';\r\nimport Auth from 'Auth';\r\n\r\nclass Chat extends React.Component {\r\n\r\n    state = { \r\n        contacts: [],\r\n        contact: {},\r\n        userProfile: false,\r\n        profile: false,\r\n    };\r\n\r\n    /**\r\n     * When component start.\r\n     */\r\n    componentDidMount(){\r\n        // Initialize socket.io connection.\r\n        this.initSocketConnection();\r\n    }\r\n\r\n    /**\r\n     * Handle navigation between chats.\r\n     * @param contact\r\n     */\r\n    onChatNavigate = contact => {\r\n        // Set current chat contact.\r\n        this.setState({contact});\r\n        // Mark unseen messages as seen.\r\n        this.state.socket.emit('seen', contact.id);\r\n        let messages = this.state.messages;\r\n        messages.forEach((element, index) => {\r\n            if(element.sender === contact.id) messages[index].seen = true;\r\n        });\r\n        this.setState({messages});\r\n    };\r\n\r\n    /**\r\n     * Toggle UserProfile component.\r\n     */\r\n    userProfileToggle = () => this.setState({userProfile: !this.state.userProfile});\r\n\r\n    /**\r\n     * Toggle EditProfile component.\r\n     */\r\n    profileToggle = () => this.setState({profile: !this.state.profile});\r\n\r\n    /**\r\n     * Render chat page\r\n     */\r\n    render(){\r\n        // If socket.io client not connected show loading spinner.\r\n        if(!this.state.connected || !this.state.contacts || !this.state.messages){\r\n            return <Spinner id=\"loader\" color=\"success\" />\r\n        }\r\n        return (\r\n            <Row className=\"h-100\">\r\n                <div id=\"contacts-section\" className=\"col-6 col-md-4\" >\r\n                <ContactHeader user={this.state.user} toggle={this.profileToggle}/>\r\n                <Contacts \r\n                    contacts={this.state.contacts}\r\n                    messages={this.state.messages}\r\n                    onChatNavigate={this.onChatNavigate} />\r\n                <UserProfile \r\n                    contact={this.state.contact}\r\n                    toggle={this.userProfileToggle}\r\n                    open={this.state.userProfile} />\r\n                <EditProfile \r\n                    user={this.state.user}\r\n                    toggle={this.profileToggle}\r\n                    open={this.state.profile} />\r\n                </div>\r\n                <div id=\"messages-section\" className=\"col-6 col-md-8\">\r\n                    <ChatHeader \r\n                        contact={this.state.contact}\r\n                        typing={this.state.typing}\r\n                        toggle={this.userProfileToggle}\r\n                        logout={this.logout} />\r\n                    {this.renderChat()}\r\n                    <MessageForm sender={this.sendMessage} sendType={this.sendType}/>\r\n                </div>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Render messages component.\r\n     */\r\n    renderChat = () => {\r\n        const { contact, user } = this.state;\r\n        if(!contact) return;\r\n        // Show only related messages.\r\n        let messages = this.state.messages.filter(e => e.sender === contact.id || e.receiver === contact.id);\r\n        return <Messages user={user} messages={messages} />\r\n    };\r\n\r\n    // Socket.IO Events --------------------------------------------------------//\r\n    /**\r\n     * Initialize socket.io connection\r\n     */\r\n    initSocketConnection = () => {\r\n        // Connect to server and send user token.\r\n        let socket = socketIO(process.env.REACT_APP_SOCKET, {\r\n            query: 'token=' + Auth.getToken(),\r\n        });\r\n        // Handle user connected event.\r\n        socket.on('connect', () => this.setState({connected: true}));\r\n        // Handle user disconnected event.\r\n        socket.on('disconnect', () => this.setState({connected: false}));\r\n        // Handle user data event (after connection).\r\n        socket.on('data', this.onData);\r\n        // Handle new user event.\r\n        socket.on('new_user', this.onNewUser);\r\n        // Handle update user event.\r\n        socket.on('update_user', this.onUpdateUser);\r\n        // Handle incoming message event.\r\n        socket.on('message', this.onNewMessage);\r\n        // Handle changes for user presence.\r\n        socket.on('user_status', this.updateUsersState);\r\n        // Handle typing or composing event.\r\n        socket.on('typing', this.onTypingMessage);\r\n        // Handle socket.io errors.\r\n        socket.on('error', this.onSocketError);\r\n        // Set user socket as state variable.\r\n        this.setState({socket});\r\n    };\r\n\r\n    /**\r\n     * Handle user data event (after connection).\r\n     * @param user\r\n     * @param contacts\r\n     * @param messages\r\n     * @param users\r\n     */\r\n    onData = (user, contacts, messages, users) => {\r\n        let contact = contacts[0] || {};\r\n        this.setState({messages, contacts, user, contact}, () => {\r\n            this.updateUsersState(users);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Handle new user event.\r\n     * @param user\r\n     */\r\n    onNewUser = user => {\r\n        // Add user to contacts list.\r\n        let contacts = this.state.contacts.concat(user);\r\n        this.setState({contacts});\r\n    };\r\n\r\n    /**\r\n     * Handle update user event.\r\n     * @param user\r\n     */\r\n    onUpdateUser = user => {\r\n        // Add updated user is the current user then update local storage data.\r\n        if (this.state.user.id === user.id) {\r\n            this.setState({user});\r\n            Auth.setUser(user);\r\n            return;\r\n        }\r\n        // Update contact data.\r\n        let contacts = this.state.contacts;\r\n        contacts.forEach((element, index) => {\r\n            if(element.id === user.id) {\r\n                contacts[index] = user;\r\n                contacts[index].status = element.status;\r\n            }\r\n        });\r\n        this.setState({contacts});\r\n        if (this.state.contact.id === user.id) this.setState({contact: user});\r\n    };\r\n\r\n    /**\r\n     * Handle incoming message event.\r\n     * @param message\r\n     */\r\n    onNewMessage = message => {\r\n        // If user is already in chat then mark the message as seen.\r\n        if(message.sender === this.state.contact.id){\r\n            this.setState({typing: false});\r\n            this.state.socket.emit('seen', this.state.contact.id);\r\n            message.seen = true;\r\n        }\r\n        // Add message to messages list.\r\n        let messages = this.state.messages.concat(message);\r\n        this.setState({messages});\r\n    };\r\n\r\n    /**\r\n     * Handle typing or composing event.\r\n     * @param sender\r\n     */\r\n    onTypingMessage = sender => {\r\n        // If the typer not the current chat user then ignore it.\r\n        if(this.state.contact.id !== sender) return;\r\n        // Set typer.\r\n        this.setState({typing: sender});\r\n        // Create timeout function to remove typing status after 3 seconds.\r\n        clearTimeout(this.state.timeout);\r\n        const timeout = setTimeout(this.typingTimeout, 3000);\r\n        this.setState({timeout});\r\n    };\r\n\r\n    onSocketError = err => {\r\n        // If authentication error then logout.\r\n        if(err === 'auth_error'){\r\n            Auth.logout();\r\n            this.props.history.push('/login');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clear typing status.\r\n     */\r\n    typingTimeout = () => this.setState({typing: false});\r\n\r\n    /**\r\n     * Send message.\r\n     * @param message\r\n     */\r\n    sendMessage = message => {\r\n        if(!this.state.contact.id) return;\r\n        message.receiver = this.state.contact.id;\r\n        let messages = this.state.messages.concat(message);\r\n        this.setState({messages});\r\n        this.state.socket.emit('message', message);\r\n    };\r\n\r\n    /**\r\n     * Send typing(composing) message.\r\n     */\r\n    sendType = () => this.state.socket.emit('typing', this.state.contact.id);\r\n\r\n    /**\r\n     * Logout user.\r\n     */\r\n    logout = () => {\r\n        this.state.socket.disconnect();\r\n        Auth.logout();\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    /**\r\n     * update users statuses.\r\n     * @param users\r\n     */\r\n    updateUsersState = users => {\r\n        let contacts = this.state.contacts;\r\n        contacts.forEach((element, index) => {\r\n            if(users[element.id]) contacts[index].status = users[element.id];\r\n        });\r\n        this.setState({contacts});\r\n        let contact = this.state.contact;\r\n        if(users[contact.id]) contact.status = users[contact.id];\r\n        this.setState({contact});\r\n    };\r\n\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}