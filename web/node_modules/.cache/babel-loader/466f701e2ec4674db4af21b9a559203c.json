{"ast":null,"code":"import _classCallCheck from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\mohsh\\\\Downloads\\\\chat-app-master (1)\\\\chat-app-master\\\\web\\\\src\\\\views\\\\Chat.js\";\nimport React from 'react';\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { ContactHeader, Contacts, ChatHeader, Messages, MessageForm, UserProfile, EditProfile } from 'components';\nimport socketIO from 'socket.io-client';\nimport Auth from 'Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Chat = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      contacts: [],\n      contact: {},\n      userProfile: false,\n      profile: false,\n      // Existing states from your code\n      connected: false,\n      messages: [],\n      user: null,\n      typing: false,\n      timeout: null,\n      // -------- NEW CALL STATES --------\n      callState: 'idle',\n      // 'idle' | 'calling' | 'receiving' | 'inCall'\n      incomingCallModal: false,\n      // to show/hide \"Incoming Call\" dialog\n      callerInfo: null,\n      // holds info about who’s calling\n      // WebRTC\n      localStream: null,\n      remoteStream: null,\n      peerConnection: null\n    };\n\n    _this.renderChat = function () {\n      var _this$state = _this.state,\n          contact = _this$state.contact,\n          user = _this$state.user,\n          messages = _this$state.messages;\n      if (!contact) return null; // Show only messages between the current user and the selected contact\n\n      var filtered = messages.filter(function (m) {\n        return m.sender === contact.id || m.receiver === contact.id;\n      });\n      return /*#__PURE__*/_jsxDEV(Messages, {\n        user: user,\n        messages: filtered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 16\n      }, _assertThisInitialized(_this));\n    };\n\n    _this.initSocketConnection = function () {\n      // Connect to server, sending user token\n      var socket = socketIO(process.env.REACT_APP_SOCKET, {\n        query: 'token=' + Auth.getToken()\n      }); // Existing events\n\n      socket.on('connect', function () {\n        return _this.setState({\n          connected: true\n        });\n      });\n      socket.on('disconnect', function () {\n        return _this.setState({\n          connected: false\n        });\n      });\n      socket.on('data', _this.onData);\n      socket.on('new_user', _this.onNewUser);\n      socket.on('update_user', _this.onUpdateUser);\n      socket.on('message', _this.onNewMessage);\n      socket.on('user_status', _this.updateUsersState);\n      socket.on('typing', _this.onTypingMessage);\n      socket.on('error', _this.onSocketError); // ---------------- NEW: CALL EVENTS ----------------\n\n      socket.on('incomingCall', function (data) {\n        // { from: userId, callerName: ... }\n        console.log('Incoming call from:', data);\n\n        _this.setState({\n          callState: 'receiving',\n          incomingCallModal: true,\n          callerInfo: data\n        });\n      });\n      socket.on('offer', function (_ref) {\n        var sdp = _ref.sdp,\n            caller = _ref.caller;\n        console.log('Received offer from:', caller);\n\n        if (_this.state.peerConnection) {\n          var desc = new RTCSessionDescription(sdp);\n\n          _this.state.peerConnection.setRemoteDescription(desc).then(function () {\n            // Now create the answer\n            return _this.state.peerConnection.createAnswer();\n          }).then(function (answer) {\n            _this.state.peerConnection.setLocalDescription(answer); // Send the answer to the caller\n\n\n            socket.emit('answer', {\n              sdp: answer,\n              target: caller\n            }); // We are effectively in a call now\n\n            _this.setState({\n              callState: 'inCall'\n            });\n          }).catch(function (err) {\n            return console.error(err);\n          });\n        }\n      });\n      socket.on('answer', function (_ref2) {\n        var sdp = _ref2.sdp,\n            callee = _ref2.callee;\n        console.log('Received answer from:', callee);\n\n        if (_this.state.peerConnection) {\n          var desc = new RTCSessionDescription(sdp);\n\n          _this.state.peerConnection.setRemoteDescription(desc).catch(function (err) {\n            return console.error(err);\n          });\n\n          _this.setState({\n            callState: 'inCall'\n          });\n        }\n      });\n      socket.on('iceCandidate', function (_ref3) {\n        var candidate = _ref3.candidate,\n            from = _ref3.from;\n        console.log('Received ICE candidate from:', from);\n\n        if (_this.state.peerConnection && candidate) {\n          _this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(function (e) {\n            return console.error(e);\n          });\n        }\n      });\n      socket.on('hangUp', function () {\n        console.log('Call ended by remote');\n\n        _this.endCall();\n      });\n\n      _this.setState({\n        socket: socket\n      });\n    };\n\n    _this.initiateCall = function (contact) {\n      if (!contact.id) return;\n\n      _this.setState({\n        callState: 'calling',\n        contact: contact\n      }); // Notify the callee via socket\n\n\n      _this.state.socket.emit('callUser', {\n        recipientId: contact.id,\n        callerName: _this.state.user.username\n      }); // Request microphone access\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        _this.setState({\n          localStream: stream\n        }); // Create and configure RTCPeerConnection\n\n\n        var pc = _this.createPeerConnection(); // Add local audio tracks\n\n\n        stream.getTracks().forEach(function (track) {\n          pc.addTrack(track, stream);\n        }); // Create SDP offer\n\n        pc.createOffer().then(function (offer) {\n          pc.setLocalDescription(offer); // Send offer via socket\n\n          _this.state.socket.emit('offer', {\n            sdp: offer,\n            target: contact.id\n          });\n        }).catch(function (err) {\n          return console.error('Offer creation error', err);\n        });\n\n        _this.setState({\n          peerConnection: pc\n        });\n      }).catch(function (err) {\n        return console.error('getUserMedia error', err);\n      });\n    };\n\n    _this.acceptCall = function () {\n      _this.setState({\n        callState: 'inCall',\n        incomingCallModal: false\n      }); // Get microphone\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        _this.setState({\n          localStream: stream\n        });\n\n        var pc = _this.createPeerConnection(); // Add local tracks\n\n\n        stream.getTracks().forEach(function (track) {\n          pc.addTrack(track, stream);\n        });\n\n        _this.setState({\n          peerConnection: pc\n        }); // We’ll wait for the 'offer' event to setRemoteDescription and send back 'answer'\n\n      }).catch(function (err) {\n        return console.error('Error accessing mic', err);\n      });\n    };\n\n    _this.rejectCall = function () {\n      // Just close modal and reset call state\n      _this.setState({\n        incomingCallModal: false,\n        callState: 'idle',\n        callerInfo: null\n      }); // Optionally inform caller we rejected\n      // this.state.socket.emit('rejectCall', {...});\n\n    };\n\n    _this.createPeerConnection = function () {\n      var configuration = {\n        iceServers: [{\n          urls: 'stun:stun1.l.google.com:19302'\n        } // { urls: 'turn:YOUR_TURN_SERVER', username: '...', credential: '...' }\n        ]\n      };\n      var pc = new RTCPeerConnection(configuration); // Gather ICE candidates and send them to the other peer\n\n      pc.onicecandidate = function (event) {\n        if (event.candidate) {\n          // The \"target\" is either the contact we are calling OR the caller if we are callee\n          var targetId = _this.state.contact.id || _this.state.callerInfo && _this.state.callerInfo.from;\n\n          _this.state.socket.emit('iceCandidate', {\n            candidate: event.candidate,\n            target: targetId\n          });\n        }\n      }; // Fired when remote tracks arrive (i.e., remote audio stream)\n\n\n      pc.ontrack = function (event) {\n        console.log('Remote track received');\n\n        _this.setState({\n          remoteStream: event.streams[0]\n        });\n      }; // On connection state change, handle disconnections, etc.\n\n\n      pc.onconnectionstatechange = function () {\n        var state = pc.connectionState;\n        console.log('Connection state change:', state);\n\n        if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n          _this.endCall();\n        }\n      };\n\n      return pc;\n    };\n\n    _this.endCall = function () {\n      var _this$state2 = _this.state,\n          socket = _this$state2.socket,\n          contact = _this$state2.contact,\n          callerInfo = _this$state2.callerInfo,\n          peerConnection = _this$state2.peerConnection,\n          localStream = _this$state2.localStream,\n          callState = _this$state2.callState; // Determine who we need to notify\n\n      var targetId = contact.id || callerInfo && callerInfo.from; // Notify remote side if we are actively in or initiating a call\n\n      if (callState === 'calling' || callState === 'inCall') {\n        socket.emit('hangUp', {\n          target: targetId\n        });\n      } // Close RTCPeerConnection\n\n\n      if (peerConnection) {\n        peerConnection.close();\n      } // Stop local audio tracks\n\n\n      if (localStream) {\n        localStream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      } // Reset call-related state\n\n\n      _this.setState({\n        callState: 'idle',\n        peerConnection: null,\n        localStream: null,\n        remoteStream: null,\n        callerInfo: null,\n        incomingCallModal: false\n      });\n    };\n\n    _this.onChatNavigate = function (contact) {\n      _this.setState({\n        contact: contact\n      }); // Mark unseen messages as seen\n\n\n      _this.state.socket.emit('seen', contact.id);\n\n      var messages = _this.state.messages;\n      messages.forEach(function (element, index) {\n        if (element.sender === contact.id) messages[index].seen = true;\n      });\n\n      _this.setState({\n        messages: messages\n      });\n    };\n\n    _this.onData = function (user, contacts, messages, users) {\n      var contact = contacts[0] || {};\n\n      _this.setState({\n        messages: messages,\n        contacts: contacts,\n        user: user,\n        contact: contact\n      }, function () {\n        _this.updateUsersState(users);\n      });\n    };\n\n    _this.onNewUser = function (user) {\n      var contacts = _this.state.contacts.concat(user);\n\n      _this.setState({\n        contacts: contacts\n      });\n    };\n\n    _this.onUpdateUser = function (user) {\n      if (_this.state.user.id === user.id) {\n        _this.setState({\n          user: user\n        });\n\n        Auth.setUser(user);\n        return;\n      }\n\n      var contacts = _this.state.contacts;\n      contacts.forEach(function (element, index) {\n        if (element.id === user.id) {\n          contacts[index] = user;\n          contacts[index].status = element.status;\n        }\n      });\n\n      _this.setState({\n        contacts: contacts\n      });\n\n      if (_this.state.contact.id === user.id) _this.setState({\n        contact: user\n      });\n    };\n\n    _this.onNewMessage = function (message) {\n      if (message.sender === _this.state.contact.id) {\n        _this.setState({\n          typing: false\n        });\n\n        _this.state.socket.emit('seen', _this.state.contact.id);\n\n        message.seen = true;\n      }\n\n      var messages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: messages\n      });\n    };\n\n    _this.onTypingMessage = function (sender) {\n      if (_this.state.contact.id !== sender) return;\n\n      _this.setState({\n        typing: sender\n      });\n\n      clearTimeout(_this.state.timeout);\n      var timeout = setTimeout(_this.typingTimeout, 3000);\n\n      _this.setState({\n        timeout: timeout\n      });\n    };\n\n    _this.typingTimeout = function () {\n      return _this.setState({\n        typing: false\n      });\n    };\n\n    _this.updateUsersState = function (users) {\n      var contacts = _this.state.contacts;\n      contacts.forEach(function (element, index) {\n        if (users[element.id]) contacts[index].status = users[element.id];\n      });\n\n      _this.setState({\n        contacts: contacts\n      });\n\n      var contact = _this.state.contact;\n      if (users[contact.id]) contact.status = users[contact.id];\n\n      _this.setState({\n        contact: contact\n      });\n    };\n\n    _this.sendMessage = function (message) {\n      if (!_this.state.contact.id) return;\n      message.receiver = _this.state.contact.id;\n\n      var messages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: messages\n      });\n\n      _this.state.socket.emit('message', message);\n    };\n\n    _this.sendType = function () {\n      if (_this.state.contact.id) {\n        _this.state.socket.emit('typing', _this.state.contact.id);\n      }\n    };\n\n    _this.onSocketError = function (err) {\n      if (err === 'auth_error') {\n        Auth.logout();\n\n        _this.props.history.push('/login');\n      }\n    };\n\n    _this.logout = function () {\n      _this.state.socket.disconnect();\n\n      Auth.logout();\n\n      _this.props.history.push('/');\n    };\n\n    _this.userProfileToggle = function () {\n      return _this.setState({\n        userProfile: !_this.state.userProfile\n      });\n    };\n\n    _this.profileToggle = function () {\n      return _this.setState({\n        profile: !_this.state.profile\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Initialize socket.io connection.\n      this.initSocketConnection();\n    } // ------------------ RENDER ------------------\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // If socket.io client not connected or data not loaded, show loading spinner.\n      if (!this.state.connected || !this.state.contacts || !this.state.messages) {\n        return /*#__PURE__*/_jsxDEV(Spinner, {\n          id: \"loader\",\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 20\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Row, {\n        className: \"h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"contacts-section\",\n          className: \"col-6 col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(ContactHeader, {\n            user: this.state.user,\n            toggle: this.profileToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Contacts, {\n            contacts: this.state.contacts,\n            messages: this.state.messages,\n            onChatNavigate: this.onChatNavigate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: '1rem'\n            },\n            children: this.state.contacts.map(function (c) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: '0.5rem'\n                },\n                children: [c.username, \" \\xA0\", /*#__PURE__*/_jsxDEV(Button, {\n                  color: \"primary\",\n                  size: \"sm\",\n                  onClick: function onClick() {\n                    return _this2.initiateCall(c);\n                  },\n                  children: \"Call\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 27\n                }, _this2)]\n              }, c.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 25\n              }, _this2);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(UserProfile, {\n            contact: this.state.contact,\n            toggle: this.userProfileToggle,\n            open: this.state.userProfile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(EditProfile, {\n            user: this.state.user,\n            toggle: this.profileToggle,\n            open: this.state.profile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"messages-section\",\n          className: \"col-6 col-md-8\",\n          children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n            contact: this.state.contact,\n            typing: this.state.typing,\n            toggle: this.userProfileToggle,\n            logout: this.logout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this), this.renderChat(), /*#__PURE__*/_jsxDEV(MessageForm, {\n            sender: this.sendMessage,\n            sendType: this.sendType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), (this.state.callState === 'calling' || this.state.callState === 'inCall') && /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: this.endCall,\n            children: \"Hang Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), this.state.remoteStream && /*#__PURE__*/_jsxDEV(\"audio\", {\n            ref: function ref(audioEl) {\n              if (audioEl && _this2.state.remoteStream) {\n                audioEl.srcObject = _this2.state.remoteStream;\n              }\n            },\n            autoPlay: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: this.state.incomingCallModal,\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: \"Incoming Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: this.state.callerInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.callerInfo.callerName, \" is calling...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"success\",\n              onClick: this.acceptCall,\n              children: \"Accept\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              onClick: this.rejectCall,\n              children: \"Reject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this);\n    }\n    /**\r\n     * Render messages component.\r\n     */\n\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/src/views/Chat.js"],"names":["React","Row","Spinner","Button","Modal","ModalHeader","ModalBody","ModalFooter","ContactHeader","Contacts","ChatHeader","Messages","MessageForm","UserProfile","EditProfile","socketIO","Auth","Chat","state","contacts","contact","userProfile","profile","connected","messages","user","typing","timeout","callState","incomingCallModal","callerInfo","localStream","remoteStream","peerConnection","renderChat","filtered","filter","m","sender","id","receiver","initSocketConnection","socket","process","env","REACT_APP_SOCKET","query","getToken","on","setState","onData","onNewUser","onUpdateUser","onNewMessage","updateUsersState","onTypingMessage","onSocketError","data","console","log","sdp","caller","desc","RTCSessionDescription","setRemoteDescription","then","createAnswer","answer","setLocalDescription","emit","target","catch","err","error","callee","candidate","from","addIceCandidate","RTCIceCandidate","e","endCall","initiateCall","recipientId","callerName","username","navigator","mediaDevices","getUserMedia","audio","video","stream","pc","createPeerConnection","getTracks","forEach","track","addTrack","createOffer","offer","acceptCall","rejectCall","configuration","iceServers","urls","RTCPeerConnection","onicecandidate","event","targetId","ontrack","streams","onconnectionstatechange","connectionState","close","stop","onChatNavigate","element","index","seen","users","concat","setUser","status","message","clearTimeout","setTimeout","typingTimeout","sendMessage","sendType","logout","props","history","push","disconnect","userProfileToggle","profileToggle","marginTop","map","c","marginBottom","audioEl","srcObject","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { ContactHeader, Contacts, ChatHeader, Messages, MessageForm, UserProfile, EditProfile } from 'components';\r\nimport socketIO from 'socket.io-client';\r\nimport Auth from 'Auth';\r\n\r\nclass Chat extends React.Component {\r\n\r\n    state = { \r\n        contacts: [],\r\n        contact: {},\r\n        userProfile: false,\r\n        profile: false,\r\n\r\n        // Existing states from your code\r\n        connected: false,\r\n        messages: [],\r\n        user: null,\r\n        typing: false,\r\n        timeout: null,\r\n\r\n        // -------- NEW CALL STATES --------\r\n        callState: 'idle',          // 'idle' | 'calling' | 'receiving' | 'inCall'\r\n        incomingCallModal: false,   // to show/hide \"Incoming Call\" dialog\r\n        callerInfo: null,           // holds info about who’s calling\r\n\r\n        // WebRTC\r\n        localStream: null,\r\n        remoteStream: null,\r\n        peerConnection: null,\r\n    };\r\n\r\n    componentDidMount() {\r\n        // Initialize socket.io connection.\r\n        this.initSocketConnection();\r\n    }\r\n\r\n    // ------------------ RENDER ------------------\r\n    render() {\r\n        // If socket.io client not connected or data not loaded, show loading spinner.\r\n        if (!this.state.connected || !this.state.contacts || !this.state.messages) {\r\n            return <Spinner id=\"loader\" color=\"success\" />;\r\n        }\r\n\r\n        return (\r\n            <Row className=\"h-100\">\r\n                {/* CONTACTS SECTION */}\r\n                <div id=\"contacts-section\" className=\"col-6 col-md-4\">\r\n                    <ContactHeader user={this.state.user} toggle={this.profileToggle} />\r\n                    <Contacts\r\n                        contacts={this.state.contacts}\r\n                        messages={this.state.messages}\r\n                        onChatNavigate={this.onChatNavigate}\r\n                    />\r\n\r\n                    {/* Example: Add a \"Call\" button for each contact (could also be inside <Contacts />) */}\r\n                    <div style={{ marginTop: '1rem' }}>\r\n                      {this.state.contacts.map(c => (\r\n                        <div key={c.id} style={{ marginBottom: '0.5rem' }}>\r\n                          {c.username} &nbsp;\r\n                          <Button color=\"primary\" size=\"sm\" onClick={() => this.initiateCall(c)}>\r\n                            Call\r\n                          </Button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n\r\n                    <UserProfile\r\n                        contact={this.state.contact}\r\n                        toggle={this.userProfileToggle}\r\n                        open={this.state.userProfile}\r\n                    />\r\n                    <EditProfile\r\n                        user={this.state.user}\r\n                        toggle={this.profileToggle}\r\n                        open={this.state.profile}\r\n                    />\r\n                </div>\r\n\r\n                {/* MESSAGES SECTION */}\r\n                <div id=\"messages-section\" className=\"col-6 col-md-8\">\r\n                    <ChatHeader\r\n                        contact={this.state.contact}\r\n                        typing={this.state.typing}\r\n                        toggle={this.userProfileToggle}\r\n                        logout={this.logout}\r\n                    />\r\n                    {this.renderChat()}\r\n                    <MessageForm sender={this.sendMessage} sendType={this.sendType} />\r\n\r\n                    {/* If in call or calling, show a Hang Up button */}\r\n                    {(this.state.callState === 'calling' || this.state.callState === 'inCall') && (\r\n                        <Button color=\"danger\" onClick={this.endCall}>\r\n                            Hang Up\r\n                        </Button>\r\n                    )}\r\n\r\n                    {/* AUDIO ELEMENT for remote stream */}\r\n                    {this.state.remoteStream && (\r\n                        <audio\r\n                            ref={(audioEl) => {\r\n                                if (audioEl && this.state.remoteStream) {\r\n                                    audioEl.srcObject = this.state.remoteStream;\r\n                                }\r\n                            }}\r\n                            autoPlay\r\n                        />\r\n                    )}\r\n                </div>\r\n\r\n                {/* INCOMING CALL MODAL */}\r\n                <Modal isOpen={this.state.incomingCallModal}>\r\n                    <ModalHeader>Incoming Call</ModalHeader>\r\n                    <ModalBody>\r\n                        {this.state.callerInfo && (\r\n                            <p>{this.state.callerInfo.callerName} is calling...</p>\r\n                        )}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"success\" onClick={this.acceptCall}>Accept</Button>\r\n                        <Button color=\"secondary\" onClick={this.rejectCall}>Reject</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Render messages component.\r\n     */\r\n    renderChat = () => {\r\n        const { contact, user, messages } = this.state;\r\n        if (!contact) return null;\r\n        // Show only messages between the current user and the selected contact\r\n        let filtered = messages.filter(m => m.sender === contact.id || m.receiver === contact.id);\r\n        return <Messages user={user} messages={filtered} />;\r\n    };\r\n\r\n    // ------------------ SOCKET.IO SETUP ------------------\r\n    initSocketConnection = () => {\r\n        // Connect to server, sending user token\r\n        let socket = socketIO(process.env.REACT_APP_SOCKET, {\r\n            query: 'token=' + Auth.getToken(),\r\n        });\r\n\r\n        // Existing events\r\n        socket.on('connect', () => this.setState({ connected: true }));\r\n        socket.on('disconnect', () => this.setState({ connected: false }));\r\n        socket.on('data', this.onData);\r\n        socket.on('new_user', this.onNewUser);\r\n        socket.on('update_user', this.onUpdateUser);\r\n        socket.on('message', this.onNewMessage);\r\n        socket.on('user_status', this.updateUsersState);\r\n        socket.on('typing', this.onTypingMessage);\r\n        socket.on('error', this.onSocketError);\r\n\r\n        // ---------------- NEW: CALL EVENTS ----------------\r\n        socket.on('incomingCall', (data) => {\r\n            // { from: userId, callerName: ... }\r\n            console.log('Incoming call from:', data);\r\n            this.setState({\r\n                callState: 'receiving',\r\n                incomingCallModal: true,\r\n                callerInfo: data\r\n            });\r\n        });\r\n\r\n        socket.on('offer', ({ sdp, caller }) => {\r\n            console.log('Received offer from:', caller);\r\n            if (this.state.peerConnection) {\r\n                const desc = new RTCSessionDescription(sdp);\r\n                this.state.peerConnection.setRemoteDescription(desc)\r\n                    .then(() => {\r\n                        // Now create the answer\r\n                        return this.state.peerConnection.createAnswer();\r\n                    })\r\n                    .then(answer => {\r\n                        this.state.peerConnection.setLocalDescription(answer);\r\n                        // Send the answer to the caller\r\n                        socket.emit('answer', {\r\n                            sdp: answer,\r\n                            target: caller\r\n                        });\r\n                        // We are effectively in a call now\r\n                        this.setState({ callState: 'inCall' });\r\n                    })\r\n                    .catch(err => console.error(err));\r\n            }\r\n        });\r\n\r\n        socket.on('answer', ({ sdp, callee }) => {\r\n            console.log('Received answer from:', callee);\r\n            if (this.state.peerConnection) {\r\n                const desc = new RTCSessionDescription(sdp);\r\n                this.state.peerConnection.setRemoteDescription(desc)\r\n                    .catch(err => console.error(err));\r\n                this.setState({ callState: 'inCall' });\r\n            }\r\n        });\r\n\r\n        socket.on('iceCandidate', ({ candidate, from }) => {\r\n            console.log('Received ICE candidate from:', from);\r\n            if (this.state.peerConnection && candidate) {\r\n                this.state.peerConnection\r\n                    .addIceCandidate(new RTCIceCandidate(candidate))\r\n                    .catch(e => console.error(e));\r\n            }\r\n        });\r\n\r\n        socket.on('hangUp', () => {\r\n            console.log('Call ended by remote');\r\n            this.endCall();\r\n        });\r\n\r\n        this.setState({ socket });\r\n    };\r\n\r\n    // ------------------ NEW CALL METHODS ------------------\r\n    initiateCall = (contact) => {\r\n        if (!contact.id) return;\r\n        this.setState({\r\n            callState: 'calling',\r\n            contact: contact\r\n        });\r\n\r\n        // Notify the callee via socket\r\n        this.state.socket.emit('callUser', {\r\n            recipientId: contact.id,\r\n            callerName: this.state.user.username\r\n        });\r\n\r\n        // Request microphone access\r\n        navigator.mediaDevices.getUserMedia({ audio: true, video: false })\r\n            .then(stream => {\r\n                this.setState({ localStream: stream });\r\n                // Create and configure RTCPeerConnection\r\n                const pc = this.createPeerConnection();\r\n\r\n                // Add local audio tracks\r\n                stream.getTracks().forEach(track => {\r\n                    pc.addTrack(track, stream);\r\n                });\r\n\r\n                // Create SDP offer\r\n                pc.createOffer()\r\n                    .then(offer => {\r\n                        pc.setLocalDescription(offer);\r\n                        // Send offer via socket\r\n                        this.state.socket.emit('offer', {\r\n                            sdp: offer,\r\n                            target: contact.id\r\n                        });\r\n                    })\r\n                    .catch(err => console.error('Offer creation error', err));\r\n\r\n                this.setState({ peerConnection: pc });\r\n            })\r\n            .catch(err => console.error('getUserMedia error', err));\r\n    };\r\n\r\n    acceptCall = () => {\r\n        this.setState({\r\n            callState: 'inCall',\r\n            incomingCallModal: false\r\n        });\r\n\r\n        // Get microphone\r\n        navigator.mediaDevices.getUserMedia({ audio: true, video: false })\r\n            .then(stream => {\r\n                this.setState({ localStream: stream });\r\n                const pc = this.createPeerConnection();\r\n                // Add local tracks\r\n                stream.getTracks().forEach(track => {\r\n                    pc.addTrack(track, stream);\r\n                });\r\n                this.setState({ peerConnection: pc });\r\n                // We’ll wait for the 'offer' event to setRemoteDescription and send back 'answer'\r\n            })\r\n            .catch(err => console.error('Error accessing mic', err));\r\n    };\r\n\r\n    rejectCall = () => {\r\n        // Just close modal and reset call state\r\n        this.setState({\r\n            incomingCallModal: false,\r\n            callState: 'idle',\r\n            callerInfo: null\r\n        });\r\n        // Optionally inform caller we rejected\r\n        // this.state.socket.emit('rejectCall', {...});\r\n    };\r\n\r\n    createPeerConnection = () => {\r\n        const configuration = {\r\n            iceServers: [\r\n                { urls: 'stun:stun1.l.google.com:19302' },\r\n                // { urls: 'turn:YOUR_TURN_SERVER', username: '...', credential: '...' }\r\n            ],\r\n        };\r\n        const pc = new RTCPeerConnection(configuration);\r\n\r\n        // Gather ICE candidates and send them to the other peer\r\n        pc.onicecandidate = (event) => {\r\n            if (event.candidate) {\r\n                // The \"target\" is either the contact we are calling OR the caller if we are callee\r\n                const targetId = this.state.contact.id || (this.state.callerInfo && this.state.callerInfo.from);\r\n                this.state.socket.emit('iceCandidate', {\r\n                    candidate: event.candidate,\r\n                    target: targetId\r\n                });\r\n            }\r\n        };\r\n\r\n        // Fired when remote tracks arrive (i.e., remote audio stream)\r\n        pc.ontrack = (event) => {\r\n            console.log('Remote track received');\r\n            this.setState({ remoteStream: event.streams[0] });\r\n        };\r\n\r\n        // On connection state change, handle disconnections, etc.\r\n        pc.onconnectionstatechange = () => {\r\n            const state = pc.connectionState;\r\n            console.log('Connection state change:', state);\r\n            if (state === 'disconnected' || state === 'failed' || state === 'closed') {\r\n                this.endCall();\r\n            }\r\n        };\r\n\r\n        return pc;\r\n    };\r\n\r\n    endCall = () => {\r\n        const { socket, contact, callerInfo, peerConnection, localStream, callState } = this.state;\r\n        // Determine who we need to notify\r\n        const targetId = contact.id || (callerInfo && callerInfo.from);\r\n\r\n        // Notify remote side if we are actively in or initiating a call\r\n        if (callState === 'calling' || callState === 'inCall') {\r\n            socket.emit('hangUp', { target: targetId });\r\n        }\r\n\r\n        // Close RTCPeerConnection\r\n        if (peerConnection) {\r\n            peerConnection.close();\r\n        }\r\n\r\n        // Stop local audio tracks\r\n        if (localStream) {\r\n            localStream.getTracks().forEach(track => track.stop());\r\n        }\r\n\r\n        // Reset call-related state\r\n        this.setState({\r\n            callState: 'idle',\r\n            peerConnection: null,\r\n            localStream: null,\r\n            remoteStream: null,\r\n            callerInfo: null,\r\n            incomingCallModal: false\r\n        });\r\n    };\r\n\r\n    // ------------------ EXISTING METHODS (MESSAGES/PRESENCE) ------------------\r\n    onChatNavigate = (contact) => {\r\n        this.setState({ contact });\r\n        // Mark unseen messages as seen\r\n        this.state.socket.emit('seen', contact.id);\r\n        let messages = this.state.messages;\r\n        messages.forEach((element, index) => {\r\n            if (element.sender === contact.id) messages[index].seen = true;\r\n        });\r\n        this.setState({ messages });\r\n    };\r\n\r\n    onData = (user, contacts, messages, users) => {\r\n        let contact = contacts[0] || {};\r\n        this.setState({ messages, contacts, user, contact }, () => {\r\n            this.updateUsersState(users);\r\n        });\r\n    };\r\n\r\n    onNewUser = (user) => {\r\n        let contacts = this.state.contacts.concat(user);\r\n        this.setState({ contacts });\r\n    };\r\n\r\n    onUpdateUser = (user) => {\r\n        if (this.state.user.id === user.id) {\r\n            this.setState({ user });\r\n            Auth.setUser(user);\r\n            return;\r\n        }\r\n        let contacts = this.state.contacts;\r\n        contacts.forEach((element, index) => {\r\n            if (element.id === user.id) {\r\n                contacts[index] = user;\r\n                contacts[index].status = element.status;\r\n            }\r\n        });\r\n        this.setState({ contacts });\r\n        if (this.state.contact.id === user.id) this.setState({ contact: user });\r\n    };\r\n\r\n    onNewMessage = (message) => {\r\n        if (message.sender === this.state.contact.id) {\r\n            this.setState({ typing: false });\r\n            this.state.socket.emit('seen', this.state.contact.id);\r\n            message.seen = true;\r\n        }\r\n        let messages = this.state.messages.concat(message);\r\n        this.setState({ messages });\r\n    };\r\n\r\n    onTypingMessage = (sender) => {\r\n        if (this.state.contact.id !== sender) return;\r\n        this.setState({ typing: sender });\r\n        clearTimeout(this.state.timeout);\r\n        const timeout = setTimeout(this.typingTimeout, 3000);\r\n        this.setState({ timeout });\r\n    };\r\n\r\n    typingTimeout = () => this.setState({ typing: false });\r\n\r\n    updateUsersState = (users) => {\r\n        let contacts = this.state.contacts;\r\n        contacts.forEach((element, index) => {\r\n            if (users[element.id]) contacts[index].status = users[element.id];\r\n        });\r\n        this.setState({ contacts });\r\n        let contact = this.state.contact;\r\n        if (users[contact.id]) contact.status = users[contact.id];\r\n        this.setState({ contact });\r\n    };\r\n\r\n    sendMessage = (message) => {\r\n        if (!this.state.contact.id) return;\r\n        message.receiver = this.state.contact.id;\r\n        let messages = this.state.messages.concat(message);\r\n        this.setState({ messages });\r\n        this.state.socket.emit('message', message);\r\n    };\r\n\r\n    sendType = () => {\r\n        if (this.state.contact.id) {\r\n            this.state.socket.emit('typing', this.state.contact.id);\r\n        }\r\n    };\r\n\r\n    onSocketError = (err) => {\r\n        if (err === 'auth_error') {\r\n            Auth.logout();\r\n            this.props.history.push('/login');\r\n        }\r\n    };\r\n\r\n    logout = () => {\r\n        this.state.socket.disconnect();\r\n        Auth.logout();\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    userProfileToggle = () => this.setState({ userProfile: !this.state.userProfile });\r\n    profileToggle = () => this.setState({ profile: !this.state.profile });\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}