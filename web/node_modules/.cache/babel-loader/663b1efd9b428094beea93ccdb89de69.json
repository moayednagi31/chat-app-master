{"ast":null,"code":"import _objectSpread from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\mohsh\\\\Downloads\\\\chat-app-master (1)\\\\chat-app-master\\\\web\\\\src\\\\views\\\\Chat.js\";\n\n/**\r\n * web/src/views/Chat.js\r\n */\nimport React from 'react';\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { ContactHeader, Contacts, ChatHeader, Messages, MessageForm, UserProfile, EditProfile } from 'components';\nimport socketIO from 'socket.io-client';\nimport Auth from 'Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Chat = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      contacts: [],\n      contact: {},\n      userProfile: false,\n      profile: false,\n      // Existing message-related states\n      connected: false,\n      messages: [],\n      typing: false,\n      timeout: null,\n      user: null,\n      // ------ CALL STATES ------\n      callState: 'idle',\n      // 'idle' | 'calling' | 'receiving' | 'inCall'\n      incomingCallModal: false,\n      callerInfo: null,\n      // WebRTC\n      localStream: null,\n      remoteStream: null,\n      peerConnection: null\n    };\n\n    _this.initSocketConnection = function () {\n      var socket = socketIO(process.env.REACT_APP_SOCKET, {\n        query: 'token=' + Auth.getToken()\n      }); // --- Existing events ---\n\n      socket.on('connect', function () {\n        return _this.setState({\n          connected: true\n        });\n      });\n      socket.on('disconnect', function () {\n        return _this.setState({\n          connected: false\n        });\n      });\n      socket.on('data', _this.onData);\n      socket.on('message', _this.onNewMessage);\n      socket.on('user_status', _this.updateUsersState);\n      socket.on('typing', _this.onTypingMessage);\n      socket.on('error', _this.onSocketError); // ----------- NEW CALL EVENTS -----------\n\n      socket.on('incomingCall', function (data) {\n        console.log('Incoming call from:', data);\n\n        _this.setState({\n          callState: 'receiving',\n          incomingCallModal: true,\n          callerInfo: data\n        });\n      });\n      socket.on('offer', function (_ref) {\n        var sdp = _ref.sdp,\n            caller = _ref.caller;\n        console.log('Received offer from:', caller);\n\n        if (_this.state.peerConnection) {\n          var desc = new RTCSessionDescription(sdp);\n\n          _this.state.peerConnection.setRemoteDescription(desc).then(function () {\n            return _this.state.peerConnection.createAnswer();\n          }).then(function (answer) {\n            _this.state.peerConnection.setLocalDescription(answer);\n\n            socket.emit('answer', {\n              sdp: answer,\n              target: caller\n            });\n\n            _this.setState({\n              callState: 'inCall'\n            });\n          }).catch(function (err) {\n            return console.error(err);\n          });\n        }\n      });\n      socket.on('answer', function (_ref2) {\n        var sdp = _ref2.sdp,\n            callee = _ref2.callee;\n        console.log('Received answer from:', callee);\n\n        if (_this.state.peerConnection) {\n          var desc = new RTCSessionDescription(sdp);\n\n          _this.state.peerConnection.setRemoteDescription(desc).catch(function (err) {\n            return console.error(err);\n          });\n\n          _this.setState({\n            callState: 'inCall'\n          });\n        }\n      });\n      socket.on('iceCandidate', function (_ref3) {\n        var candidate = _ref3.candidate,\n            from = _ref3.from;\n        console.log('Received ICE candidate from:', from);\n\n        if (_this.state.peerConnection && candidate) {\n          _this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(function (e) {\n            return console.error(e);\n          });\n        }\n      });\n      socket.on('hangUp', function () {\n        console.log('Call ended by remote');\n\n        _this.endCall();\n      });\n\n      _this.setState({\n        socket: socket\n      });\n    };\n\n    _this.initiateCall = function (contact) {\n      var _this$state$user;\n\n      if (!contact.id) return;\n\n      _this.setState({\n        callState: 'calling',\n        contact: contact\n      }); // Notify the callee\n\n\n      _this.state.socket.emit('callUser', {\n        recipientId: contact.id,\n        callerName: ((_this$state$user = _this.state.user) === null || _this$state$user === void 0 ? void 0 : _this$state$user.username) || 'Caller'\n      }); // Access microphone (audio only)\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        _this.setState({\n          localStream: stream\n        });\n\n        var peerConnection = _this.createPeerConnection(); // Add local audio tracks\n\n\n        stream.getTracks().forEach(function (track) {\n          peerConnection.addTrack(track, stream);\n        }); // Create SDP offer\n\n        peerConnection.createOffer().then(function (offer) {\n          peerConnection.setLocalDescription(offer);\n\n          _this.state.socket.emit('offer', {\n            sdp: offer,\n            target: contact.id\n          });\n        }).catch(function (err) {\n          return console.error('Offer creation error', err);\n        });\n\n        _this.setState({\n          peerConnection: peerConnection\n        });\n      }).catch(function (err) {\n        return console.error('getUserMedia error', err);\n      });\n    };\n\n    _this.acceptCall = function () {\n      _this.setState({\n        incomingCallModal: false,\n        callState: 'inCall'\n      });\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        _this.setState({\n          localStream: stream\n        });\n\n        var peerConnection = _this.createPeerConnection(); // Add local tracks\n\n\n        stream.getTracks().forEach(function (track) {\n          peerConnection.addTrack(track, stream);\n        });\n\n        _this.setState({\n          peerConnection: peerConnection\n        }); // Wait for the \"offer\" event to finalize the answer\n\n      }).catch(function (err) {\n        return console.error('Error accessing mic', err);\n      });\n    };\n\n    _this.rejectCall = function () {\n      _this.setState({\n        incomingCallModal: false,\n        callState: 'idle',\n        callerInfo: null\n      }); // Optionally notify the caller that call is rejected\n      // e.g. this.state.socket.emit('callRejected', {...});\n\n    };\n\n    _this.createPeerConnection = function () {\n      var configuration = {\n        iceServers: [{\n          urls: 'stun:stun1.l.google.com:19302'\n        }] // Add TURN servers if needed\n\n      };\n      var peerConnection = new RTCPeerConnection(configuration);\n\n      peerConnection.onicecandidate = function (event) {\n        if (event.candidate) {\n          var targetId = _this.state.contact.id || _this.state.callerInfo && _this.state.callerInfo.from;\n\n          _this.state.socket.emit('iceCandidate', {\n            candidate: event.candidate,\n            target: targetId\n          });\n        }\n      };\n\n      peerConnection.ontrack = function (event) {\n        console.log('Remote track received');\n\n        _this.setState({\n          remoteStream: event.streams[0]\n        });\n      };\n\n      peerConnection.onconnectionstatechange = function () {\n        var state = peerConnection.connectionState;\n        console.log('Connection state change:', state);\n\n        if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n          _this.endCall();\n        }\n      };\n\n      return peerConnection;\n    };\n\n    _this.endCall = function () {\n      var _this$state = _this.state,\n          socket = _this$state.socket,\n          contact = _this$state.contact,\n          callerInfo = _this$state.callerInfo,\n          peerConnection = _this$state.peerConnection,\n          localStream = _this$state.localStream,\n          callState = _this$state.callState;\n      var targetId = contact.id || callerInfo && callerInfo.from;\n\n      if (callState === 'calling' || callState === 'inCall') {\n        socket.emit('hangUp', {\n          target: targetId\n        });\n      }\n\n      if (peerConnection) {\n        peerConnection.close();\n      }\n\n      if (localStream) {\n        localStream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      }\n\n      _this.setState({\n        callState: 'idle',\n        peerConnection: null,\n        localStream: null,\n        remoteStream: null,\n        callerInfo: null,\n        incomingCallModal: false\n      });\n    };\n\n    _this.onData = function (user, contacts, messages, users) {\n      var contact = contacts[0] || {};\n\n      _this.setState({\n        messages: messages,\n        contacts: contacts,\n        user: user,\n        contact: contact\n      }, function () {\n        _this.updateUsersState(users);\n      });\n    };\n\n    _this.onNewMessage = function (message) {\n      if (message.sender === _this.state.contact.id) {\n        _this.setState({\n          typing: false\n        });\n\n        _this.state.socket.emit('seen', _this.state.contact.id);\n\n        message.seen = true;\n      }\n\n      var newMessages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: newMessages\n      });\n    };\n\n    _this.onTypingMessage = function (sender) {\n      if (_this.state.contact.id !== sender) return;\n\n      _this.setState({\n        typing: sender\n      });\n\n      clearTimeout(_this.state.timeout);\n      var timeout = setTimeout(function () {\n        return _this.setState({\n          typing: false\n        });\n      }, 3000);\n\n      _this.setState({\n        timeout: timeout\n      });\n    };\n\n    _this.onSocketError = function (err) {\n      if (err === 'auth_error') {\n        Auth.logout();\n\n        _this.props.history.push('/login');\n      }\n    };\n\n    _this.updateUsersState = function (users) {\n      var contacts = _this.state.contacts;\n      contacts.forEach(function (element, index) {\n        if (users[element.id]) contacts[index].status = users[element.id];\n      });\n\n      _this.setState({\n        contacts: contacts\n      });\n\n      var contact = _this.state.contact;\n      if (users[contact.id]) contact.status = users[contact.id];\n\n      _this.setState({\n        contact: contact\n      });\n    };\n\n    _this.sendMessage = function (message) {\n      if (!_this.state.contact.id) return;\n      message.receiver = _this.state.contact.id;\n\n      var newMessages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: newMessages\n      });\n\n      _this.state.socket.emit('message', message);\n    };\n\n    _this.sendType = function () {\n      if (_this.state.contact.id) {\n        _this.state.socket.emit('typing', _this.state.contact.id);\n      }\n    };\n\n    _this.logout = function () {\n      _this.state.socket.disconnect();\n\n      Auth.logout();\n\n      _this.props.history.push('/');\n    };\n\n    _this.renderChat = function () {\n      var _this$state2 = _this.state,\n          contact = _this$state2.contact,\n          user = _this$state2.user,\n          messages = _this$state2.messages;\n      if (!contact.id) return null;\n      var filtered = messages.filter(function (m) {\n        return m.sender === contact.id || m.receiver === contact.id;\n      });\n      return /*#__PURE__*/_jsxDEV(Messages, {\n        user: user,\n        messages: filtered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 12\n      }, _assertThisInitialized(_this));\n    };\n\n    _this.onChatNavigate = function (contact) {\n      _this.setState({\n        contact: contact\n      });\n\n      _this.state.socket.emit('seen', contact.id);\n\n      var newMessages = _this.state.messages.map(function (msg) {\n        if (msg.sender === contact.id) {\n          return _objectSpread(_objectSpread({}, msg), {}, {\n            seen: true\n          });\n        }\n\n        return msg;\n      });\n\n      _this.setState({\n        messages: newMessages\n      });\n    };\n\n    _this.userProfileToggle = function () {\n      return _this.setState({\n        userProfile: !_this.state.userProfile\n      });\n    };\n\n    _this.profileToggle = function () {\n      return _this.setState({\n        profile: !_this.state.profile\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Initialize socket.io connection.\n      this.initSocketConnection();\n    } // ============ SOCKET.IO CONNECTION & EVENTS ============\n\n  }, {\n    key: \"render\",\n    value: // ============ RENDERING ============\n    function render() {\n      var _this2 = this;\n\n      if (!this.state.connected || !this.state.contacts || !this.state.messages) {\n        return /*#__PURE__*/_jsxDEV(Spinner, {\n          id: \"loader\",\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 14\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Row, {\n        className: \"h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"contacts-section\",\n          className: \"col-6 col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(ContactHeader, {\n            user: this.state.user,\n            toggle: this.profileToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Contacts, {\n            contacts: this.state.contacts,\n            messages: this.state.messages,\n            onChatNavigate: this.onChatNavigate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(UserProfile, {\n            contact: this.state.contact,\n            toggle: this.userProfileToggle,\n            open: this.state.userProfile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(EditProfile, {\n            user: this.state.user,\n            toggle: this.profileToggle,\n            open: this.state.profile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"messages-section\",\n          className: \"col-6 col-md-8\",\n          children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n            contact: this.state.contact,\n            typing: this.state.typing,\n            toggle: this.userProfileToggle,\n            logout: this.logout // IMPORTANT: pass the call method so ChatHeader can call\n            ,\n            onCall: this.initiateCall\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 11\n          }, this), this.renderChat(), /*#__PURE__*/_jsxDEV(MessageForm, {\n            sender: this.sendMessage,\n            sendType: this.sendType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 11\n          }, this), (this.state.callState === 'calling' || this.state.callState === 'inCall') && /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: this.endCall,\n            className: \"mt-2\",\n            children: \"Hang Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this), this.state.remoteStream && /*#__PURE__*/_jsxDEV(\"audio\", {\n            ref: function ref(audioEl) {\n              if (audioEl && _this2.state.remoteStream) {\n                audioEl.srcObject = _this2.state.remoteStream;\n              }\n            },\n            autoPlay: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: this.state.incomingCallModal,\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: \"Incoming Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: this.state.callerInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.callerInfo.callerName, \" is calling...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"success\",\n              onClick: this.acceptCall,\n              children: \"Accept\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              onClick: this.rejectCall,\n              children: \"Reject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 7\n      }, this);\n    }\n    /**\r\n     * Render messages component.\r\n     */\n\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/src/views/Chat.js"],"names":["React","Row","Spinner","Button","Modal","ModalHeader","ModalBody","ModalFooter","ContactHeader","Contacts","ChatHeader","Messages","MessageForm","UserProfile","EditProfile","socketIO","Auth","Chat","state","contacts","contact","userProfile","profile","connected","messages","typing","timeout","user","callState","incomingCallModal","callerInfo","localStream","remoteStream","peerConnection","initSocketConnection","socket","process","env","REACT_APP_SOCKET","query","getToken","on","setState","onData","onNewMessage","updateUsersState","onTypingMessage","onSocketError","data","console","log","sdp","caller","desc","RTCSessionDescription","setRemoteDescription","then","createAnswer","answer","setLocalDescription","emit","target","catch","err","error","callee","candidate","from","addIceCandidate","RTCIceCandidate","e","endCall","initiateCall","id","recipientId","callerName","username","navigator","mediaDevices","getUserMedia","audio","video","stream","createPeerConnection","getTracks","forEach","track","addTrack","createOffer","offer","acceptCall","rejectCall","configuration","iceServers","urls","RTCPeerConnection","onicecandidate","event","targetId","ontrack","streams","onconnectionstatechange","connectionState","close","stop","users","message","sender","seen","newMessages","concat","clearTimeout","setTimeout","logout","props","history","push","element","index","status","sendMessage","receiver","sendType","disconnect","renderChat","filtered","filter","m","onChatNavigate","map","msg","userProfileToggle","profileToggle","audioEl","srcObject","Component"],"mappings":"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","sourcesContent":["/**\r\n * web/src/views/Chat.js\r\n */\r\n\r\nimport React from 'react';\r\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {\r\n  ContactHeader,\r\n  Contacts,\r\n  ChatHeader,\r\n  Messages,\r\n  MessageForm,\r\n  UserProfile,\r\n  EditProfile,\r\n} from 'components';\r\nimport socketIO from 'socket.io-client';\r\nimport Auth from 'Auth';\r\n\r\nclass Chat extends React.Component {\r\n  state = {\r\n    contacts: [],\r\n    contact: {},\r\n    userProfile: false,\r\n    profile: false,\r\n\r\n    // Existing message-related states\r\n    connected: false,\r\n    messages: [],\r\n    typing: false,\r\n    timeout: null,\r\n    user: null,\r\n\r\n    // ------ CALL STATES ------\r\n    callState: 'idle', // 'idle' | 'calling' | 'receiving' | 'inCall'\r\n    incomingCallModal: false,\r\n    callerInfo: null,\r\n\r\n    // WebRTC\r\n    localStream: null,\r\n    remoteStream: null,\r\n    peerConnection: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Initialize socket.io connection.\r\n    this.initSocketConnection();\r\n  }\r\n\r\n  // ============ SOCKET.IO CONNECTION & EVENTS ============\r\n  initSocketConnection = () => {\r\n    let socket = socketIO(process.env.REACT_APP_SOCKET, {\r\n      query: 'token=' + Auth.getToken(),\r\n    });\r\n\r\n    // --- Existing events ---\r\n    socket.on('connect', () => this.setState({ connected: true }));\r\n    socket.on('disconnect', () => this.setState({ connected: false }));\r\n    socket.on('data', this.onData);\r\n    socket.on('message', this.onNewMessage);\r\n    socket.on('user_status', this.updateUsersState);\r\n    socket.on('typing', this.onTypingMessage);\r\n    socket.on('error', this.onSocketError);\r\n\r\n    // ----------- NEW CALL EVENTS -----------\r\n    socket.on('incomingCall', (data) => {\r\n      console.log('Incoming call from:', data);\r\n      this.setState({\r\n        callState: 'receiving',\r\n        incomingCallModal: true,\r\n        callerInfo: data,\r\n      });\r\n    });\r\n\r\n    socket.on('offer', ({ sdp, caller }) => {\r\n      console.log('Received offer from:', caller);\r\n      if (this.state.peerConnection) {\r\n        const desc = new RTCSessionDescription(sdp);\r\n        this.state.peerConnection.setRemoteDescription(desc)\r\n          .then(() => this.state.peerConnection.createAnswer())\r\n          .then(answer => {\r\n            this.state.peerConnection.setLocalDescription(answer);\r\n            socket.emit('answer', {\r\n              sdp: answer,\r\n              target: caller,\r\n            });\r\n            this.setState({ callState: 'inCall' });\r\n          })\r\n          .catch(err => console.error(err));\r\n      }\r\n    });\r\n\r\n    socket.on('answer', ({ sdp, callee }) => {\r\n      console.log('Received answer from:', callee);\r\n      if (this.state.peerConnection) {\r\n        const desc = new RTCSessionDescription(sdp);\r\n        this.state.peerConnection\r\n          .setRemoteDescription(desc)\r\n          .catch(err => console.error(err));\r\n        this.setState({ callState: 'inCall' });\r\n      }\r\n    });\r\n\r\n    socket.on('iceCandidate', ({ candidate, from }) => {\r\n      console.log('Received ICE candidate from:', from);\r\n      if (this.state.peerConnection && candidate) {\r\n        this.state.peerConnection\r\n          .addIceCandidate(new RTCIceCandidate(candidate))\r\n          .catch(e => console.error(e));\r\n      }\r\n    });\r\n\r\n    socket.on('hangUp', () => {\r\n      console.log('Call ended by remote');\r\n      this.endCall();\r\n    });\r\n\r\n    this.setState({ socket });\r\n  };\r\n\r\n  // ============ CALLING FUNCTIONS ============\r\n  initiateCall = (contact) => {\r\n    if (!contact.id) return;\r\n\r\n    this.setState({\r\n      callState: 'calling',\r\n      contact: contact,\r\n    });\r\n\r\n    // Notify the callee\r\n    this.state.socket.emit('callUser', {\r\n      recipientId: contact.id,\r\n      callerName: this.state.user?.username || 'Caller',\r\n    });\r\n\r\n    // Access microphone (audio only)\r\n    navigator.mediaDevices\r\n      .getUserMedia({ audio: true, video: false })\r\n      .then(stream => {\r\n        this.setState({ localStream: stream });\r\n\r\n        const peerConnection = this.createPeerConnection();\r\n        // Add local audio tracks\r\n        stream.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, stream);\r\n        });\r\n\r\n        // Create SDP offer\r\n        peerConnection\r\n          .createOffer()\r\n          .then(offer => {\r\n            peerConnection.setLocalDescription(offer);\r\n            this.state.socket.emit('offer', {\r\n              sdp: offer,\r\n              target: contact.id,\r\n            });\r\n          })\r\n          .catch(err => console.error('Offer creation error', err));\r\n\r\n        this.setState({ peerConnection });\r\n      })\r\n      .catch(err => console.error('getUserMedia error', err));\r\n  };\r\n\r\n  acceptCall = () => {\r\n    this.setState({\r\n      incomingCallModal: false,\r\n      callState: 'inCall',\r\n    });\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia({ audio: true, video: false })\r\n      .then(stream => {\r\n        this.setState({ localStream: stream });\r\n        const peerConnection = this.createPeerConnection();\r\n\r\n        // Add local tracks\r\n        stream.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, stream);\r\n        });\r\n\r\n        this.setState({ peerConnection });\r\n        // Wait for the \"offer\" event to finalize the answer\r\n      })\r\n      .catch(err => console.error('Error accessing mic', err));\r\n  };\r\n\r\n  rejectCall = () => {\r\n    this.setState({\r\n      incomingCallModal: false,\r\n      callState: 'idle',\r\n      callerInfo: null,\r\n    });\r\n    // Optionally notify the caller that call is rejected\r\n    // e.g. this.state.socket.emit('callRejected', {...});\r\n  };\r\n\r\n  createPeerConnection = () => {\r\n    const configuration = {\r\n      iceServers: [{ urls: 'stun:stun1.l.google.com:19302' }],\r\n      // Add TURN servers if needed\r\n    };\r\n    const peerConnection = new RTCPeerConnection(configuration);\r\n\r\n    peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        const targetId = this.state.contact.id ||\r\n          (this.state.callerInfo && this.state.callerInfo.from);\r\n        this.state.socket.emit('iceCandidate', {\r\n          candidate: event.candidate,\r\n          target: targetId,\r\n        });\r\n      }\r\n    };\r\n\r\n    peerConnection.ontrack = (event) => {\r\n      console.log('Remote track received');\r\n      this.setState({ remoteStream: event.streams[0] });\r\n    };\r\n\r\n    peerConnection.onconnectionstatechange = () => {\r\n      const state = peerConnection.connectionState;\r\n      console.log('Connection state change:', state);\r\n      if (state === 'disconnected' || state === 'failed' || state === 'closed') {\r\n        this.endCall();\r\n      }\r\n    };\r\n\r\n    return peerConnection;\r\n  };\r\n\r\n  endCall = () => {\r\n    const { socket, contact, callerInfo, peerConnection, localStream, callState } = this.state;\r\n    const targetId = contact.id || (callerInfo && callerInfo.from);\r\n\r\n    if (callState === 'calling' || callState === 'inCall') {\r\n      socket.emit('hangUp', { target: targetId });\r\n    }\r\n\r\n    if (peerConnection) {\r\n      peerConnection.close();\r\n    }\r\n\r\n    if (localStream) {\r\n      localStream.getTracks().forEach(track => track.stop());\r\n    }\r\n\r\n    this.setState({\r\n      callState: 'idle',\r\n      peerConnection: null,\r\n      localStream: null,\r\n      remoteStream: null,\r\n      callerInfo: null,\r\n      incomingCallModal: false,\r\n    });\r\n  };\r\n\r\n  // ============ EXISTING MESSAGING LOGIC ============\r\n\r\n  onData = (user, contacts, messages, users) => {\r\n    const contact = contacts[0] || {};\r\n    this.setState({ messages, contacts, user, contact }, () => {\r\n      this.updateUsersState(users);\r\n    });\r\n  };\r\n\r\n  onNewMessage = (message) => {\r\n    if (message.sender === this.state.contact.id) {\r\n      this.setState({ typing: false });\r\n      this.state.socket.emit('seen', this.state.contact.id);\r\n      message.seen = true;\r\n    }\r\n    const newMessages = this.state.messages.concat(message);\r\n    this.setState({ messages: newMessages });\r\n  };\r\n\r\n  onTypingMessage = (sender) => {\r\n    if (this.state.contact.id !== sender) return;\r\n    this.setState({ typing: sender });\r\n    clearTimeout(this.state.timeout);\r\n    const timeout = setTimeout(() => this.setState({ typing: false }), 3000);\r\n    this.setState({ timeout });\r\n  };\r\n\r\n  onSocketError = (err) => {\r\n    if (err === 'auth_error') {\r\n      Auth.logout();\r\n      this.props.history.push('/login');\r\n    }\r\n  };\r\n\r\n  updateUsersState = (users) => {\r\n    let contacts = this.state.contacts;\r\n    contacts.forEach((element, index) => {\r\n      if (users[element.id]) contacts[index].status = users[element.id];\r\n    });\r\n    this.setState({ contacts });\r\n    let contact = this.state.contact;\r\n    if (users[contact.id]) contact.status = users[contact.id];\r\n    this.setState({ contact });\r\n  };\r\n\r\n  sendMessage = (message) => {\r\n    if (!this.state.contact.id) return;\r\n    message.receiver = this.state.contact.id;\r\n    let newMessages = this.state.messages.concat(message);\r\n    this.setState({ messages: newMessages });\r\n    this.state.socket.emit('message', message);\r\n  };\r\n\r\n  sendType = () => {\r\n    if (this.state.contact.id) {\r\n      this.state.socket.emit('typing', this.state.contact.id);\r\n    }\r\n  };\r\n\r\n  logout = () => {\r\n    this.state.socket.disconnect();\r\n    Auth.logout();\r\n    this.props.history.push('/');\r\n  };\r\n\r\n  // ============ RENDERING ============\r\n\r\n  render() {\r\n    if (!this.state.connected || !this.state.contacts || !this.state.messages) {\r\n      return <Spinner id=\"loader\" color=\"success\" />;\r\n    }\r\n\r\n    return (\r\n      <Row className=\"h-100\">\r\n        {/* LEFT: Contacts Section */}\r\n        <div id=\"contacts-section\" className=\"col-6 col-md-4\">\r\n          <ContactHeader user={this.state.user} toggle={this.profileToggle} />\r\n          <Contacts\r\n            contacts={this.state.contacts}\r\n            messages={this.state.messages}\r\n            onChatNavigate={this.onChatNavigate}\r\n          />\r\n\r\n          <UserProfile\r\n            contact={this.state.contact}\r\n            toggle={this.userProfileToggle}\r\n            open={this.state.userProfile}\r\n          />\r\n          <EditProfile\r\n            user={this.state.user}\r\n            toggle={this.profileToggle}\r\n            open={this.state.profile}\r\n          />\r\n        </div>\r\n\r\n        {/* RIGHT: Messages Section */}\r\n        <div id=\"messages-section\" className=\"col-6 col-md-8\">\r\n          <ChatHeader\r\n            contact={this.state.contact}\r\n            typing={this.state.typing}\r\n            toggle={this.userProfileToggle}\r\n            logout={this.logout}\r\n            // IMPORTANT: pass the call method so ChatHeader can call\r\n            onCall={this.initiateCall}\r\n          />\r\n          {this.renderChat()}\r\n          <MessageForm sender={this.sendMessage} sendType={this.sendType} />\r\n\r\n          {/* Hang Up button if in a call */}\r\n          {(this.state.callState === 'calling' || this.state.callState === 'inCall') && (\r\n            <Button color=\"danger\" onClick={this.endCall} className=\"mt-2\">\r\n              Hang Up\r\n            </Button>\r\n          )}\r\n\r\n          {/* Audio element for remote stream */}\r\n          {this.state.remoteStream && (\r\n            <audio\r\n              ref={(audioEl) => {\r\n                if (audioEl && this.state.remoteStream) {\r\n                  audioEl.srcObject = this.state.remoteStream;\r\n                }\r\n              }}\r\n              autoPlay\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* INCOMING CALL MODAL */}\r\n        <Modal isOpen={this.state.incomingCallModal}>\r\n          <ModalHeader>Incoming Call</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.callerInfo && (\r\n              <p>{this.state.callerInfo.callerName} is calling...</p>\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"success\" onClick={this.acceptCall}>Accept</Button>\r\n            <Button color=\"secondary\" onClick={this.rejectCall}>Reject</Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render messages component.\r\n   */\r\n  renderChat = () => {\r\n    const { contact, user, messages } = this.state;\r\n    if (!contact.id) return null;\r\n    let filtered = messages.filter(\r\n      (m) => m.sender === contact.id || m.receiver === contact.id\r\n    );\r\n    return <Messages user={user} messages={filtered} />;\r\n  };\r\n\r\n  onChatNavigate = (contact) => {\r\n    this.setState({ contact });\r\n    this.state.socket.emit('seen', contact.id);\r\n    let newMessages = this.state.messages.map((msg) => {\r\n      if (msg.sender === contact.id) {\r\n        return { ...msg, seen: true };\r\n      }\r\n      return msg;\r\n    });\r\n    this.setState({ messages: newMessages });\r\n  };\r\n\r\n  userProfileToggle = () => this.setState({ userProfile: !this.state.userProfile });\r\n  profileToggle = () => this.setState({ profile: !this.state.profile });\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}