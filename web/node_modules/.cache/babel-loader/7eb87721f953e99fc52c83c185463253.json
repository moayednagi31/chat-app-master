{"ast":null,"code":"import _classCallCheck from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\mohsh\\\\Downloads\\\\chat-app-master (1)\\\\chat-app-master\\\\web\\\\src\\\\views\\\\Chat.js\";\nimport React from 'react';\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport socketIO from 'socket.io-client';\nimport Auth from 'Auth'; // ...other imports\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Chat = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      contacts: [],\n      contact: {},\n      userProfile: false,\n      profile: false,\n      // ------- CALLING STATES ----------\n      callState: 'idle',\n      // 'idle' | 'calling' | 'receiving' | 'inCall'\n      incomingCallModal: false,\n      callerInfo: null,\n      // WebRTC\n      localStream: null,\n      remoteStream: null,\n      peerConnection: null\n    };\n\n    _this.initSocketConnection = function () {\n      var socket = socketIO(process.env.REACT_APP_SOCKET, {\n        query: 'token=' + Auth.getToken()\n      }); // --- Existing events ---\n\n      socket.on('connect', function () {\n        return _this.setState({\n          connected: true\n        });\n      });\n      socket.on('disconnect', function () {\n        return _this.setState({\n          connected: false\n        });\n      });\n      socket.on('data', _this.onData);\n      socket.on('message', _this.onNewMessage);\n      socket.on('user_status', _this.updateUsersState);\n      socket.on('typing', _this.onTypingMessage);\n      socket.on('error', _this.onSocketError); // --------- NEW: EVENTS FOR CALLING -------------\n\n      socket.on('incomingCall', function (data) {\n        // data => { from: userId, callerName: ... }\n        console.log('Incoming call from:', data);\n\n        _this.setState({\n          callState: 'receiving',\n          incomingCallModal: true,\n          callerInfo: data\n        });\n      }); // Remote user sent an SDP offer\n\n      socket.on('offer', function (_ref) {\n        var sdp = _ref.sdp,\n            caller = _ref.caller;\n\n        // Set remote description as the offer\n        if (_this.state.peerConnection) {\n          var desc = new RTCSessionDescription(sdp);\n\n          _this.state.peerConnection.setRemoteDescription(desc).then(function () {\n            // Now create the answer\n            return _this.state.peerConnection.createAnswer();\n          }).then(function (answer) {\n            _this.state.peerConnection.setLocalDescription(answer); // Send answer via signaling server\n\n\n            socket.emit('answer', {\n              sdp: answer,\n              target: caller\n            });\n          }).catch(function (err) {\n            return console.error(err);\n          });\n        }\n      }); // Remote user sent an SDP answer\n\n      socket.on('answer', function (_ref2) {\n        var sdp = _ref2.sdp,\n            callee = _ref2.callee;\n\n        if (_this.state.peerConnection) {\n          var desc = new RTCSessionDescription(sdp);\n\n          _this.state.peerConnection.setRemoteDescription(desc).catch(function (err) {\n            return console.error(err);\n          });\n        }\n      }); // Remote ICE candidate\n\n      socket.on('iceCandidate', function (_ref3) {\n        var candidate = _ref3.candidate,\n            from = _ref3.from;\n\n        if (_this.state.peerConnection && candidate) {\n          _this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(function (e) {\n            return console.error(e);\n          });\n        }\n      }); // Remote user hung up\n\n      socket.on('hangUp', function () {\n        console.log('Call ended by remote');\n\n        _this.endCall();\n      });\n\n      _this.setState({\n        socket: socket\n      });\n    };\n\n    _this.initiateCall = function (contact) {\n      if (!contact.id) return; // 1) Update state to indicate calling\n\n      _this.setState({\n        callState: 'calling',\n        contact: contact\n      }); // 2) Notify the callee via socket\n\n\n      _this.state.socket.emit('callUser', {\n        recipientId: contact.id,\n        callerName: _this.state.user.username // or fullName\n\n      }); // 3) Prepare local media\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        _this.setState({\n          localStream: stream\n        }); // 4) Create RTCPeerConnection\n\n\n        var peerConnection = _this.createPeerConnection(); // 5) Add tracks to the peer connection\n\n\n        stream.getTracks().forEach(function (track) {\n          peerConnection.addTrack(track, stream);\n        }); // 6) Create Offer\n\n        peerConnection.createOffer().then(function (offer) {\n          peerConnection.setLocalDescription(offer); // 7) Send Offer via socket\n\n          _this.state.socket.emit('offer', {\n            sdp: offer,\n            target: contact.id\n          });\n        }).catch(function (err) {\n          return console.error('Offer creation error', err);\n        });\n\n        _this.setState({\n          peerConnection: peerConnection\n        });\n      }).catch(function (err) {\n        return console.error('getUserMedia error', err);\n      });\n    };\n\n    _this.acceptCall = function () {\n      _this.setState({\n        incomingCallModal: false,\n        callState: 'inCall'\n      }); // 1) Retrieve local audio stream\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        _this.setState({\n          localStream: stream\n        }); // 2) Create RTCPeerConnection\n\n\n        var peerConnection = _this.createPeerConnection(); // 3) Add local stream tracks\n\n\n        stream.getTracks().forEach(function (track) {\n          peerConnection.addTrack(track, stream);\n        });\n\n        _this.setState({\n          peerConnection: peerConnection\n        });\n      }).catch(function (err) {\n        return console.error('Error accessing mic', err);\n      });\n    };\n\n    _this.rejectCall = function () {\n      _this.setState({\n        incomingCallModal: false,\n        callState: 'idle',\n        callerInfo: null\n      }); // Optionally, emit an event to notify caller that you declined.\n\n    };\n\n    _this.createPeerConnection = function () {\n      var configuration = {\n        iceServers: [{\n          urls: 'stun:stun1.l.google.com:19302'\n        } // { urls: 'turn:your-turn-server', username: '...', credential: '...' }\n        ]\n      };\n      var peerConnection = new RTCPeerConnection(configuration); // On ICE candidate\n\n      peerConnection.onicecandidate = function (event) {\n        if (event.candidate) {\n          _this.state.socket.emit('iceCandidate', {\n            candidate: event.candidate,\n            target: _this.state.contact.id || _this.state.callerInfo.from\n          });\n        }\n      }; // On track (remote track arrives)\n\n\n      peerConnection.ontrack = function (event) {\n        // The remote audio stream is event.streams[0]\n        console.log('Remote track received');\n\n        _this.setState({\n          remoteStream: event.streams[0]\n        });\n      }; // (optional) On connection state change\n\n\n      peerConnection.onconnectionstatechange = function () {\n        var state = peerConnection.connectionState;\n        console.log('Connection state change:', state);\n\n        if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n          _this.endCall();\n        }\n      };\n\n      return peerConnection;\n    };\n\n    _this.endCall = function () {\n      // 1) Notify the other user\n      var _this$state = _this.state,\n          socket = _this$state.socket,\n          contact = _this$state.contact,\n          callerInfo = _this$state.callerInfo,\n          peerConnection = _this$state.peerConnection,\n          localStream = _this$state.localStream;\n      var targetId = contact.id || callerInfo && callerInfo.from;\n\n      if (_this.state.callState === 'calling' || _this.state.callState === 'inCall') {\n        socket.emit('hangUp', {\n          target: targetId\n        });\n      } // 2) Cleanup peer connection\n\n\n      if (peerConnection) {\n        peerConnection.close();\n      } // 3) Stop local audio track\n\n\n      if (localStream) {\n        localStream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      }\n\n      _this.setState({\n        callState: 'idle',\n        peerConnection: null,\n        localStream: null,\n        remoteStream: null,\n        callerInfo: null,\n        incomingCallModal: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initSocketConnection();\n    } // ==================== WEBSOCKET / SOCKET.IO SETUP =====================\n\n  }, {\n    key: \"render\",\n    value: // ==================== RENDERING UI =====================\n    function render() {\n      var _this2 = this;\n\n      if (!this.state.connected || !this.state.contacts || !this.state.messages) {\n        return /*#__PURE__*/_jsxDEV(Spinner, {\n          id: \"loader\",\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 14\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Row, {\n        className: \"h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"contacts-section\",\n          className: \"col-6 col-md-4\",\n          children: this.state.contacts.map(function (contact) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: contact.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 15\n              }, _this2), /*#__PURE__*/_jsxDEV(Button, {\n                color: \"primary\",\n                size: \"sm\",\n                onClick: function onClick() {\n                  return _this2.initiateCall(contact);\n                },\n                children: \"Call\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 15\n              }, _this2)]\n            }, contact.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 13\n            }, _this2);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"messages-section\",\n          className: \"col-6 col-md-8\",\n          children: [(this.state.callState === 'calling' || this.state.callState === 'inCall') && /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: this.endCall,\n            children: \"Hang Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), this.state.remoteStream && /*#__PURE__*/_jsxDEV(\"audio\", {\n            ref: function ref(audioEl) {\n              if (audioEl && _this2.state.remoteStream) {\n                audioEl.srcObject = _this2.state.remoteStream;\n              }\n            },\n            autoPlay: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: this.state.incomingCallModal,\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: \"Incoming Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: this.state.callerInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.callerInfo.callerName, \" is calling...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"success\",\n              onClick: this.acceptCall,\n              children: \"Accept\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              onClick: this.rejectCall,\n              children: \"Reject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 7\n      }, this);\n    } // ... existing Chat methods like onData, onNewMessage, updateUsersState, etc.\n\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/src/views/Chat.js"],"names":["React","Row","Spinner","Button","Modal","ModalHeader","ModalBody","ModalFooter","socketIO","Auth","Chat","state","contacts","contact","userProfile","profile","callState","incomingCallModal","callerInfo","localStream","remoteStream","peerConnection","initSocketConnection","socket","process","env","REACT_APP_SOCKET","query","getToken","on","setState","connected","onData","onNewMessage","updateUsersState","onTypingMessage","onSocketError","data","console","log","sdp","caller","desc","RTCSessionDescription","setRemoteDescription","then","createAnswer","answer","setLocalDescription","emit","target","catch","err","error","callee","candidate","from","addIceCandidate","RTCIceCandidate","e","endCall","initiateCall","id","recipientId","callerName","user","username","navigator","mediaDevices","getUserMedia","audio","video","stream","createPeerConnection","getTracks","forEach","track","addTrack","createOffer","offer","acceptCall","rejectCall","configuration","iceServers","urls","RTCPeerConnection","onicecandidate","event","ontrack","streams","onconnectionstatechange","connectionState","targetId","close","stop","messages","map","audioEl","srcObject","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,WAAtC,EAAmDC,SAAnD,EAA8DC,WAA9D,QAAiF,YAAjF;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;;;;IAEMC,I;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,OAAO,EAAE,EAFH;AAGNC,MAAAA,WAAW,EAAE,KAHP;AAINC,MAAAA,OAAO,EAAE,KAJH;AAMN;AACAC,MAAAA,SAAS,EAAE,MAPL;AAOc;AACpBC,MAAAA,iBAAiB,EAAE,KARb;AASNC,MAAAA,UAAU,EAAE,IATN;AAWN;AACAC,MAAAA,WAAW,EAAE,IAZP;AAaNC,MAAAA,YAAY,EAAE,IAbR;AAcNC,MAAAA,cAAc,EAAE;AAdV,K;;UAsBRC,oB,GAAuB,YAAM;AAC3B,UAAIC,MAAM,GAAGf,QAAQ,CAACgB,OAAO,CAACC,GAAR,CAAYC,gBAAb,EAA+B;AAClDC,QAAAA,KAAK,EAAE,WAAWlB,IAAI,CAACmB,QAAL;AADgC,OAA/B,CAArB,CAD2B,CAK3B;;AACAL,MAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB;AAAA,eAAM,MAAKC,QAAL,CAAc;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAd,CAAN;AAAA,OAArB;AACAR,MAAAA,MAAM,CAACM,EAAP,CAAU,YAAV,EAAwB;AAAA,eAAM,MAAKC,QAAL,CAAc;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAd,CAAN;AAAA,OAAxB;AACAR,MAAAA,MAAM,CAACM,EAAP,CAAU,MAAV,EAAkB,MAAKG,MAAvB;AACAT,MAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,MAAKI,YAA1B;AACAV,MAAAA,MAAM,CAACM,EAAP,CAAU,aAAV,EAAyB,MAAKK,gBAA9B;AACAX,MAAAA,MAAM,CAACM,EAAP,CAAU,QAAV,EAAoB,MAAKM,eAAzB;AACAZ,MAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,MAAKO,aAAxB,EAZ2B,CAc3B;;AACAb,MAAAA,MAAM,CAACM,EAAP,CAAU,cAAV,EAA0B,UAACQ,IAAD,EAAU;AAClC;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,IAAnC;;AACA,cAAKP,QAAL,CAAc;AACZd,UAAAA,SAAS,EAAE,WADC;AAEZC,UAAAA,iBAAiB,EAAE,IAFP;AAGZC,UAAAA,UAAU,EAAEmB;AAHA,SAAd;AAKD,OARD,EAf2B,CAyB3B;;AACAd,MAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,gBAAqB;AAAA,YAAlBW,GAAkB,QAAlBA,GAAkB;AAAA,YAAbC,MAAa,QAAbA,MAAa;;AACtC;AACA,YAAI,MAAK9B,KAAL,CAAWU,cAAf,EAA+B;AAC7B,cAAMqB,IAAI,GAAG,IAAIC,qBAAJ,CAA0BH,GAA1B,CAAb;;AACA,gBAAK7B,KAAL,CAAWU,cAAX,CAA0BuB,oBAA1B,CAA+CF,IAA/C,EACGG,IADH,CACQ,YAAM;AACV;AACA,mBAAO,MAAKlC,KAAL,CAAWU,cAAX,CAA0ByB,YAA1B,EAAP;AACD,WAJH,EAKGD,IALH,CAKQ,UAAAE,MAAM,EAAI;AACd,kBAAKpC,KAAL,CAAWU,cAAX,CAA0B2B,mBAA1B,CAA8CD,MAA9C,EADc,CAEd;;;AACAxB,YAAAA,MAAM,CAAC0B,IAAP,CAAY,QAAZ,EAAsB;AACpBT,cAAAA,GAAG,EAAEO,MADe;AAEpBG,cAAAA,MAAM,EAAET;AAFY,aAAtB;AAID,WAZH,EAaGU,KAbH,CAaS,UAAAC,GAAG;AAAA,mBAAId,OAAO,CAACe,KAAR,CAAcD,GAAd,CAAJ;AAAA,WAbZ;AAcD;AACF,OAnBD,EA1B2B,CA+C3B;;AACA7B,MAAAA,MAAM,CAACM,EAAP,CAAU,QAAV,EAAoB,iBAAqB;AAAA,YAAlBW,GAAkB,SAAlBA,GAAkB;AAAA,YAAbc,MAAa,SAAbA,MAAa;;AACvC,YAAI,MAAK3C,KAAL,CAAWU,cAAf,EAA+B;AAC7B,cAAMqB,IAAI,GAAG,IAAIC,qBAAJ,CAA0BH,GAA1B,CAAb;;AACA,gBAAK7B,KAAL,CAAWU,cAAX,CAA0BuB,oBAA1B,CAA+CF,IAA/C,EACKS,KADL,CACW,UAAAC,GAAG;AAAA,mBAAId,OAAO,CAACe,KAAR,CAAcD,GAAd,CAAJ;AAAA,WADd;AAED;AACF,OAND,EAhD2B,CAwD3B;;AACA7B,MAAAA,MAAM,CAACM,EAAP,CAAU,cAAV,EAA0B,iBAAyB;AAAA,YAAtB0B,SAAsB,SAAtBA,SAAsB;AAAA,YAAXC,IAAW,SAAXA,IAAW;;AACjD,YAAI,MAAK7C,KAAL,CAAWU,cAAX,IAA6BkC,SAAjC,EAA4C;AAC1C,gBAAK5C,KAAL,CAAWU,cAAX,CAA0BoC,eAA1B,CAA0C,IAAIC,eAAJ,CAAoBH,SAApB,CAA1C,EACGJ,KADH,CACS,UAAAQ,CAAC;AAAA,mBAAIrB,OAAO,CAACe,KAAR,CAAcM,CAAd,CAAJ;AAAA,WADV;AAED;AACF,OALD,EAzD2B,CAgE3B;;AACApC,MAAAA,MAAM,CAACM,EAAP,CAAU,QAAV,EAAoB,YAAM;AACxBS,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AACA,cAAKqB,OAAL;AACD,OAHD;;AAKA,YAAK9B,QAAL,CAAc;AAAEP,QAAAA,MAAM,EAANA;AAAF,OAAd;AACD,K;;UAGDsC,Y,GAAe,UAAChD,OAAD,EAAa;AAC1B,UAAI,CAACA,OAAO,CAACiD,EAAb,EAAiB,OADS,CAG1B;;AACA,YAAKhC,QAAL,CAAc;AACZd,QAAAA,SAAS,EAAE,SADC;AAEZH,QAAAA,OAAO,EAAEA;AAFG,OAAd,EAJ0B,CAS1B;;;AACA,YAAKF,KAAL,CAAWY,MAAX,CAAkB0B,IAAlB,CAAuB,UAAvB,EAAmC;AACjCc,QAAAA,WAAW,EAAElD,OAAO,CAACiD,EADY;AAEjCE,QAAAA,UAAU,EAAE,MAAKrD,KAAL,CAAWsD,IAAX,CAAgBC,QAFK,CAEI;;AAFJ,OAAnC,EAV0B,CAe1B;;;AACAC,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAApC,EACG1B,IADH,CACQ,UAAA2B,MAAM,EAAI;AACd,cAAK1C,QAAL,CAAc;AAAEX,UAAAA,WAAW,EAAEqD;AAAf,SAAd,EADc,CAEd;;;AACA,YAAMnD,cAAc,GAAG,MAAKoD,oBAAL,EAAvB,CAHc,CAKd;;;AACAD,QAAAA,MAAM,CAACE,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK,EAAI;AAClCvD,UAAAA,cAAc,CAACwD,QAAf,CAAwBD,KAAxB,EAA+BJ,MAA/B;AACD,SAFD,EANc,CAUd;;AACAnD,QAAAA,cAAc,CAACyD,WAAf,GACGjC,IADH,CACQ,UAAAkC,KAAK,EAAI;AACb1D,UAAAA,cAAc,CAAC2B,mBAAf,CAAmC+B,KAAnC,EADa,CAEb;;AACA,gBAAKpE,KAAL,CAAWY,MAAX,CAAkB0B,IAAlB,CAAuB,OAAvB,EAAgC;AAC9BT,YAAAA,GAAG,EAAEuC,KADyB;AAE9B7B,YAAAA,MAAM,EAAErC,OAAO,CAACiD;AAFc,WAAhC;AAID,SARH,EASGX,KATH,CASS,UAAAC,GAAG;AAAA,iBAAId,OAAO,CAACe,KAAR,CAAc,sBAAd,EAAsCD,GAAtC,CAAJ;AAAA,SATZ;;AAWA,cAAKtB,QAAL,CAAc;AAAET,UAAAA,cAAc,EAAdA;AAAF,SAAd;AACD,OAxBH,EAyBG8B,KAzBH,CAyBS,UAAAC,GAAG;AAAA,eAAId,OAAO,CAACe,KAAR,CAAc,oBAAd,EAAoCD,GAApC,CAAJ;AAAA,OAzBZ;AA0BD,K;;UAGD4B,U,GAAa,YAAM;AACjB,YAAKlD,QAAL,CAAc;AAAEb,QAAAA,iBAAiB,EAAE,KAArB;AAA4BD,QAAAA,SAAS,EAAE;AAAvC,OAAd,EADiB,CAGjB;;;AACAmD,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAApC,EACG1B,IADH,CACQ,UAAA2B,MAAM,EAAI;AACd,cAAK1C,QAAL,CAAc;AAAEX,UAAAA,WAAW,EAAEqD;AAAf,SAAd,EADc,CAGd;;;AACA,YAAMnD,cAAc,GAAG,MAAKoD,oBAAL,EAAvB,CAJc,CAKd;;;AACAD,QAAAA,MAAM,CAACE,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK,EAAI;AAClCvD,UAAAA,cAAc,CAACwD,QAAf,CAAwBD,KAAxB,EAA+BJ,MAA/B;AACD,SAFD;;AAIA,cAAK1C,QAAL,CAAc;AAAET,UAAAA,cAAc,EAAdA;AAAF,SAAd;AACD,OAZH,EAaG8B,KAbH,CAaS,UAAAC,GAAG;AAAA,eAAId,OAAO,CAACe,KAAR,CAAc,qBAAd,EAAqCD,GAArC,CAAJ;AAAA,OAbZ;AAcD,K;;UAED6B,U,GAAa,YAAM;AACjB,YAAKnD,QAAL,CAAc;AACZb,QAAAA,iBAAiB,EAAE,KADP;AAEZD,QAAAA,SAAS,EAAE,MAFC;AAGZE,QAAAA,UAAU,EAAE;AAHA,OAAd,EADiB,CAMjB;;AACD,K;;UAGDuD,oB,GAAuB,YAAM;AAC3B,UAAMS,aAAa,GAAG;AACpBC,QAAAA,UAAU,EAAE,CACV;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADU,CAEV;AAFU;AADQ,OAAtB;AAMA,UAAM/D,cAAc,GAAG,IAAIgE,iBAAJ,CAAsBH,aAAtB,CAAvB,CAP2B,CAS3B;;AACA7D,MAAAA,cAAc,CAACiE,cAAf,GAAgC,UAACC,KAAD,EAAW;AACzC,YAAIA,KAAK,CAAChC,SAAV,EAAqB;AACnB,gBAAK5C,KAAL,CAAWY,MAAX,CAAkB0B,IAAlB,CAAuB,cAAvB,EAAuC;AACrCM,YAAAA,SAAS,EAAEgC,KAAK,CAAChC,SADoB;AAErCL,YAAAA,MAAM,EAAE,MAAKvC,KAAL,CAAWE,OAAX,CAAmBiD,EAAnB,IAAyB,MAAKnD,KAAL,CAAWO,UAAX,CAAsBsC;AAFlB,WAAvC;AAID;AACF,OAPD,CAV2B,CAmB3B;;;AACAnC,MAAAA,cAAc,CAACmE,OAAf,GAAyB,UAACD,KAAD,EAAW;AAClC;AACAjD,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,cAAKT,QAAL,CAAc;AAAEV,UAAAA,YAAY,EAAEmE,KAAK,CAACE,OAAN,CAAc,CAAd;AAAhB,SAAd;AACD,OAJD,CApB2B,CA0B3B;;;AACApE,MAAAA,cAAc,CAACqE,uBAAf,GAAyC,YAAM;AAC7C,YAAM/E,KAAK,GAAGU,cAAc,CAACsE,eAA7B;AACArD,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwC5B,KAAxC;;AACA,YAAIA,KAAK,KAAK,cAAV,IAA4BA,KAAK,KAAK,QAAtC,IAAkDA,KAAK,KAAK,QAAhE,EAA0E;AACxE,gBAAKiD,OAAL;AACD;AACF,OAND;;AAQA,aAAOvC,cAAP;AACD,K;;UAGDuC,O,GAAU,YAAM;AACd;AADc,wBAEuD,MAAKjD,KAF5D;AAAA,UAENY,MAFM,eAENA,MAFM;AAAA,UAEEV,OAFF,eAEEA,OAFF;AAAA,UAEWK,UAFX,eAEWA,UAFX;AAAA,UAEuBG,cAFvB,eAEuBA,cAFvB;AAAA,UAEuCF,WAFvC,eAEuCA,WAFvC;AAGd,UAAMyE,QAAQ,GAAG/E,OAAO,CAACiD,EAAR,IAAe5C,UAAU,IAAIA,UAAU,CAACsC,IAAzD;;AAEA,UAAI,MAAK7C,KAAL,CAAWK,SAAX,KAAyB,SAAzB,IAAsC,MAAKL,KAAL,CAAWK,SAAX,KAAyB,QAAnE,EAA6E;AAC3EO,QAAAA,MAAM,CAAC0B,IAAP,CAAY,QAAZ,EAAsB;AAAEC,UAAAA,MAAM,EAAE0C;AAAV,SAAtB;AACD,OAPa,CASd;;;AACA,UAAIvE,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACwE,KAAf;AACD,OAZa,CAad;;;AACA,UAAI1E,WAAJ,EAAiB;AACfA,QAAAA,WAAW,CAACuD,SAAZ,GAAwBC,OAAxB,CAAgC,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACkB,IAAN,EAAJ;AAAA,SAArC;AACD;;AAED,YAAKhE,QAAL,CAAc;AACZd,QAAAA,SAAS,EAAE,MADC;AAEZK,QAAAA,cAAc,EAAE,IAFJ;AAGZF,QAAAA,WAAW,EAAE,IAHD;AAIZC,QAAAA,YAAY,EAAE,IAJF;AAKZF,QAAAA,UAAU,EAAE,IALA;AAMZD,QAAAA,iBAAiB,EAAE;AANP,OAAd;AAQD,K;;;;;;;WA3ND,6BAAoB;AAClB,WAAKK,oBAAL;AACD,K,CAED;;;;WAyNA;AACA,sBAAS;AAAA;;AACP,UAAI,CAAC,KAAKX,KAAL,CAAWoB,SAAZ,IAAyB,CAAC,KAAKpB,KAAL,CAAWC,QAArC,IAAiD,CAAC,KAAKD,KAAL,CAAWoF,QAAjE,EAA2E;AACzE,4BAAO,QAAC,OAAD;AAAS,UAAA,EAAE,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;;AAED,0BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACE;AAAK,UAAA,EAAE,EAAC,kBAAR;AAA2B,UAAA,SAAS,EAAC,gBAArC;AAAA,oBAGG,KAAKpF,KAAL,CAAWC,QAAX,CAAoBoF,GAApB,CAAwB,UAAAnF,OAAO;AAAA,gCAC9B;AAAA,sCACE;AAAA,0BAAOA,OAAO,CAACqD;AAAf;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE,QAAC,MAAD;AAAQ,gBAAA,KAAK,EAAC,SAAd;AAAwB,gBAAA,IAAI,EAAC,IAA7B;AAAkC,gBAAA,OAAO,EAAE;AAAA,yBAAM,MAAI,CAACL,YAAL,CAAkBhD,OAAlB,CAAN;AAAA,iBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA,eAAUA,OAAO,CAACiD,EAAlB;AAAA;AAAA;AAAA;AAAA,sBAD8B;AAAA,WAA/B;AAHH;AAAA;AAAA;AAAA;AAAA,gBADF,eAYE;AAAK,UAAA,EAAE,EAAC,kBAAR;AAA2B,UAAA,SAAS,EAAC,gBAArC;AAAA,qBAGI,CAAC,KAAKnD,KAAL,CAAWK,SAAX,KAAyB,SAAzB,IAAsC,KAAKL,KAAL,CAAWK,SAAX,KAAyB,QAAhE,kBACA,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,QAAd;AAAuB,YAAA,OAAO,EAAE,KAAK4C,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,EAQI,KAAKjD,KAAL,CAAWS,YAAX,iBACA;AACE,YAAA,GAAG,EAAE,aAAC6E,OAAD,EAAa;AAChB,kBAAIA,OAAO,IAAI,MAAI,CAACtF,KAAL,CAAWS,YAA1B,EAAwC;AACtC6E,gBAAAA,OAAO,CAACC,SAAR,GAAoB,MAAI,CAACvF,KAAL,CAAWS,YAA/B;AACD;AACF,aALH;AAME,YAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF,eAiCE,QAAC,KAAD;AAAO,UAAA,MAAM,EAAE,KAAKT,KAAL,CAAWM,iBAA1B;AAAA,kCACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAA,sBACG,KAAKN,KAAL,CAAWO,UAAX,iBACC;AAAA,yBAAI,KAAKP,KAAL,CAAWO,UAAX,CAAsB8C,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,kBAFF,eAOE,QAAC,WAAD;AAAA,oCACE,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,SAAd;AAAwB,cAAA,OAAO,EAAE,KAAKgB,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,WAAd;AAA0B,cAAA,OAAO,EAAE,KAAKC,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjCF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAgDD,K,CAED;;;;;EAvSiBjF,KAAK,CAACmG,S;;AA0SzB,eAAezF,IAAf","sourcesContent":["import React from 'react';\r\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport socketIO from 'socket.io-client';\r\nimport Auth from 'Auth';\r\n// ...other imports\r\n\r\nclass Chat extends React.Component {\r\n  state = { \r\n    contacts: [],\r\n    contact: {},\r\n    userProfile: false,\r\n    profile: false,\r\n\r\n    // ------- CALLING STATES ----------\r\n    callState: 'idle',  // 'idle' | 'calling' | 'receiving' | 'inCall'\r\n    incomingCallModal: false, \r\n    callerInfo: null,\r\n    \r\n    // WebRTC\r\n    localStream: null,\r\n    remoteStream: null,\r\n    peerConnection: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initSocketConnection();\r\n  }\r\n\r\n  // ==================== WEBSOCKET / SOCKET.IO SETUP =====================\r\n  initSocketConnection = () => {\r\n    let socket = socketIO(process.env.REACT_APP_SOCKET, {\r\n      query: 'token=' + Auth.getToken(),\r\n    });\r\n    \r\n    // --- Existing events ---\r\n    socket.on('connect', () => this.setState({connected: true}));\r\n    socket.on('disconnect', () => this.setState({connected: false}));\r\n    socket.on('data', this.onData);\r\n    socket.on('message', this.onNewMessage);\r\n    socket.on('user_status', this.updateUsersState);\r\n    socket.on('typing', this.onTypingMessage);\r\n    socket.on('error', this.onSocketError);\r\n\r\n    // --------- NEW: EVENTS FOR CALLING -------------\r\n    socket.on('incomingCall', (data) => {\r\n      // data => { from: userId, callerName: ... }\r\n      console.log('Incoming call from:', data);\r\n      this.setState({\r\n        callState: 'receiving',\r\n        incomingCallModal: true,\r\n        callerInfo: data,\r\n      });\r\n    });\r\n\r\n    // Remote user sent an SDP offer\r\n    socket.on('offer', ({ sdp, caller }) => {\r\n      // Set remote description as the offer\r\n      if (this.state.peerConnection) {\r\n        const desc = new RTCSessionDescription(sdp);\r\n        this.state.peerConnection.setRemoteDescription(desc)\r\n          .then(() => {\r\n            // Now create the answer\r\n            return this.state.peerConnection.createAnswer();\r\n          })\r\n          .then(answer => {\r\n            this.state.peerConnection.setLocalDescription(answer);\r\n            // Send answer via signaling server\r\n            socket.emit('answer', { \r\n              sdp: answer, \r\n              target: caller \r\n            });\r\n          })\r\n          .catch(err => console.error(err));\r\n      }\r\n    });\r\n\r\n    // Remote user sent an SDP answer\r\n    socket.on('answer', ({ sdp, callee }) => {\r\n      if (this.state.peerConnection) {\r\n        const desc = new RTCSessionDescription(sdp);\r\n        this.state.peerConnection.setRemoteDescription(desc)\r\n            .catch(err => console.error(err));\r\n      }\r\n    });\r\n\r\n    // Remote ICE candidate\r\n    socket.on('iceCandidate', ({ candidate, from }) => {\r\n      if (this.state.peerConnection && candidate) {\r\n        this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate))\r\n          .catch(e => console.error(e));\r\n      }\r\n    });\r\n\r\n    // Remote user hung up\r\n    socket.on('hangUp', () => {\r\n      console.log('Call ended by remote');\r\n      this.endCall();\r\n    });\r\n\r\n    this.setState({ socket });\r\n  };\r\n\r\n  // ==================== INITIATING A CALL =====================\r\n  initiateCall = (contact) => {\r\n    if (!contact.id) return;\r\n\r\n    // 1) Update state to indicate calling\r\n    this.setState({\r\n      callState: 'calling',\r\n      contact: contact,\r\n    });\r\n    \r\n    // 2) Notify the callee via socket\r\n    this.state.socket.emit('callUser', {\r\n      recipientId: contact.id,\r\n      callerName: this.state.user.username // or fullName\r\n    });\r\n\r\n    // 3) Prepare local media\r\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\r\n      .then(stream => {\r\n        this.setState({ localStream: stream });\r\n        // 4) Create RTCPeerConnection\r\n        const peerConnection = this.createPeerConnection();\r\n\r\n        // 5) Add tracks to the peer connection\r\n        stream.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, stream);\r\n        });\r\n\r\n        // 6) Create Offer\r\n        peerConnection.createOffer()\r\n          .then(offer => {\r\n            peerConnection.setLocalDescription(offer);\r\n            // 7) Send Offer via socket\r\n            this.state.socket.emit('offer', { \r\n              sdp: offer, \r\n              target: contact.id\r\n            });\r\n          })\r\n          .catch(err => console.error('Offer creation error', err));\r\n\r\n        this.setState({ peerConnection });\r\n      })\r\n      .catch(err => console.error('getUserMedia error', err));\r\n  };\r\n\r\n  // ==================== RECEIVING A CALL ======================\r\n  acceptCall = () => {\r\n    this.setState({ incomingCallModal: false, callState: 'inCall' });\r\n    \r\n    // 1) Retrieve local audio stream\r\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\r\n      .then(stream => {\r\n        this.setState({ localStream: stream });\r\n\r\n        // 2) Create RTCPeerConnection\r\n        const peerConnection = this.createPeerConnection();\r\n        // 3) Add local stream tracks\r\n        stream.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, stream);\r\n        });\r\n        \r\n        this.setState({ peerConnection });\r\n      })\r\n      .catch(err => console.error('Error accessing mic', err));\r\n  };\r\n\r\n  rejectCall = () => {\r\n    this.setState({\r\n      incomingCallModal: false,\r\n      callState: 'idle',\r\n      callerInfo: null\r\n    });\r\n    // Optionally, emit an event to notify caller that you declined.\r\n  };\r\n\r\n  // ==================== SHARED HELPER: CREATE PEER CONNECTION =====================\r\n  createPeerConnection = () => {\r\n    const configuration = {\r\n      iceServers: [\r\n        { urls: 'stun:stun1.l.google.com:19302' }, \r\n        // { urls: 'turn:your-turn-server', username: '...', credential: '...' }\r\n      ],\r\n    };\r\n    const peerConnection = new RTCPeerConnection(configuration);\r\n\r\n    // On ICE candidate\r\n    peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        this.state.socket.emit('iceCandidate', {\r\n          candidate: event.candidate,\r\n          target: this.state.contact.id || this.state.callerInfo.from\r\n        });\r\n      }\r\n    };\r\n\r\n    // On track (remote track arrives)\r\n    peerConnection.ontrack = (event) => {\r\n      // The remote audio stream is event.streams[0]\r\n      console.log('Remote track received');\r\n      this.setState({ remoteStream: event.streams[0] });\r\n    };\r\n\r\n    // (optional) On connection state change\r\n    peerConnection.onconnectionstatechange = () => {\r\n      const state = peerConnection.connectionState;\r\n      console.log('Connection state change:', state);\r\n      if (state === 'disconnected' || state === 'failed' || state === 'closed') {\r\n        this.endCall();\r\n      }\r\n    };\r\n\r\n    return peerConnection;\r\n  };\r\n\r\n  // ==================== END CALL =====================\r\n  endCall = () => {\r\n    // 1) Notify the other user\r\n    const { socket, contact, callerInfo, peerConnection, localStream } = this.state;\r\n    const targetId = contact.id || (callerInfo && callerInfo.from);\r\n\r\n    if (this.state.callState === 'calling' || this.state.callState === 'inCall') {\r\n      socket.emit('hangUp', { target: targetId });\r\n    }\r\n\r\n    // 2) Cleanup peer connection\r\n    if (peerConnection) {\r\n      peerConnection.close();\r\n    }\r\n    // 3) Stop local audio track\r\n    if (localStream) {\r\n      localStream.getTracks().forEach(track => track.stop());\r\n    }\r\n    \r\n    this.setState({\r\n      callState: 'idle',\r\n      peerConnection: null,\r\n      localStream: null,\r\n      remoteStream: null,\r\n      callerInfo: null,\r\n      incomingCallModal: false,\r\n    });\r\n  };\r\n\r\n  // ==================== RENDERING UI =====================\r\n  render() {\r\n    if (!this.state.connected || !this.state.contacts || !this.state.messages) {\r\n      return <Spinner id=\"loader\" color=\"success\" />;\r\n    }\r\n\r\n    return (\r\n      <Row className=\"h-100\">\r\n        <div id=\"contacts-section\" className=\"col-6 col-md-4\">\r\n          {/* Existing contact UI */}\r\n          {/* We can place a \"Call\" button next to each contact: */}\r\n          {this.state.contacts.map(contact => (\r\n            <div key={contact.id}>\r\n              <span>{contact.username}</span>\r\n              <Button color=\"primary\" size=\"sm\" onClick={() => this.initiateCall(contact)}>Call</Button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n        <div id=\"messages-section\" className=\"col-6 col-md-8\">\r\n          {/* Existing messages UI */}\r\n          {/* If in call, show \"Hang Up\" button */}\r\n          { (this.state.callState === 'calling' || this.state.callState === 'inCall') && (\r\n            <Button color=\"danger\" onClick={this.endCall}>Hang Up</Button>\r\n          )}\r\n          \r\n          {/* Render remote audio if present */}\r\n          { this.state.remoteStream && (\r\n            <audio \r\n              ref={(audioEl) => {\r\n                if (audioEl && this.state.remoteStream) {\r\n                  audioEl.srcObject = this.state.remoteStream;\r\n                }\r\n              }} \r\n              autoPlay \r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* INCOMING CALL MODAL */}\r\n        <Modal isOpen={this.state.incomingCallModal}>\r\n          <ModalHeader>Incoming Call</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.callerInfo && \r\n              <p>{this.state.callerInfo.callerName} is calling...</p>\r\n            }\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"success\" onClick={this.acceptCall}>Accept</Button>\r\n            <Button color=\"secondary\" onClick={this.rejectCall}>Reject</Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  // ... existing Chat methods like onData, onNewMessage, updateUsersState, etc.\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}