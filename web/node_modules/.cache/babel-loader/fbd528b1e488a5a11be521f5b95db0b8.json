{"ast":null,"code":"import _objectSpread from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\mohsh\\\\Downloads\\\\chat-app-master (1)\\\\chat-app-master\\\\web\\\\src\\\\views\\\\Chat.js\";\n\n/**\r\n * web/src/views/Chat.js\r\n */\nimport React from 'react';\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { ContactHeader, Contacts, ChatHeader, Messages, MessageForm, UserProfile, EditProfile } from 'components';\nimport socketIO from 'socket.io-client';\nimport Auth from 'Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Chat = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      contacts: [],\n      contact: {},\n      // Will hold { id, name, ... } of the current chat\n      userProfile: false,\n      profile: false,\n      // Existing message-related states\n      connected: false,\n      messages: [],\n      typing: false,\n      timeout: null,\n      user: null,\n      // ------ CALL STATES ------\n      callState: 'idle',\n      // 'idle' | 'calling' | 'receiving' | 'inCall'\n      incomingCallModal: false,\n      callerInfo: null,\n      // Will hold { from, callerName }\n      // WebRTC\n      localStream: null,\n      remoteStream: null,\n      peerConnection: null\n    };\n\n    _this.initSocketConnection = function () {\n      var socket = socketIO(process.env.REACT_APP_SOCKET, {\n        query: 'token=' + Auth.getToken()\n      }); // --- Existing events ---\n\n      socket.on('connect', function () {\n        console.log('[CHAT] Socket connected');\n\n        _this.setState({\n          connected: true\n        });\n      });\n      socket.on('disconnect', function () {\n        console.log('[CHAT] Socket disconnected');\n\n        _this.setState({\n          connected: false\n        });\n      });\n      socket.on('data', _this.onData);\n      socket.on('message', _this.onNewMessage);\n      socket.on('user_status', _this.updateUsersState);\n      socket.on('typing', _this.onTypingMessage);\n      socket.on('error', _this.onSocketError); // ---------------- NEW: CALL EVENTS ----------------\n\n      socket.on('incomingCall', function (data) {\n        // data => { from: userId, callerName: ... }\n        console.log('[CHAT] Incoming call from:', data);\n\n        _this.setState({\n          callState: 'receiving',\n          incomingCallModal: true,\n          callerInfo: data // store who is calling\n\n        }); // OPTIONAL: Update contact so we know who we talk to\n        // especially if 'this.state.contact.id' is empty or different\n\n\n        if (!_this.state.contact.id || _this.state.contact.id !== data.from) {\n          _this.setState({\n            contact: _objectSpread(_objectSpread({}, _this.state.contact), {}, {\n              id: data.from,\n              name: data.callerName\n            })\n          });\n        }\n      });\n      socket.on('offer', function (_ref) {\n        var sdp = _ref.sdp,\n            caller = _ref.caller;\n        console.log('[CHAT] Received offer from:', caller);\n\n        if (_this.state.peerConnection) {\n          var desc = new RTCSessionDescription(sdp);\n\n          _this.state.peerConnection.setRemoteDescription(desc).then(function () {\n            console.log('[CHAT] Remote description set (offer). Creating answer...');\n            return _this.state.peerConnection.createAnswer();\n          }).then(function (answer) {\n            console.log('[CHAT] Created answer, setting local desc and sending...');\n\n            _this.state.peerConnection.setLocalDescription(answer);\n\n            socket.emit('answer', {\n              sdp: answer,\n              target: caller\n            });\n\n            _this.setState({\n              callState: 'inCall'\n            });\n          }).catch(function (err) {\n            return console.error('[CHAT] Error handling offer->answer', err);\n          });\n        }\n      });\n      socket.on('answer', function (_ref2) {\n        var sdp = _ref2.sdp,\n            callee = _ref2.callee;\n        console.log('[CHAT] Received answer from:', callee);\n\n        if (_this.state.peerConnection) {\n          var desc = new RTCSessionDescription(sdp);\n\n          _this.state.peerConnection.setRemoteDescription(desc).then(function () {\n            console.log('[CHAT] Remote description set for answer, callState = inCall');\n\n            _this.setState({\n              callState: 'inCall'\n            });\n          }).catch(function (err) {\n            return console.error('[CHAT] Error setting remote desc (answer)', err);\n          });\n        }\n      });\n      socket.on('iceCandidate', function (_ref3) {\n        var candidate = _ref3.candidate,\n            from = _ref3.from;\n        console.log('[CHAT] Received ICE candidate from:', from);\n\n        if (_this.state.peerConnection && candidate) {\n          _this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(function (e) {\n            return console.error('[CHAT] Error adding ICE candidate', e);\n          });\n        }\n      });\n      socket.on('hangUp', function () {\n        console.log('[CHAT] Call ended by remote');\n\n        _this.endCall();\n      });\n\n      _this.setState({\n        socket: socket\n      });\n    };\n\n    _this.initiateCall = function (contact) {\n      var _this$state$user;\n\n      if (!contact.id) return;\n      console.log('[CHAT] Initiating call with contact:', contact.id);\n\n      _this.setState({\n        callState: 'calling',\n        contact: contact\n      }); // Notify the callee\n\n\n      _this.state.socket.emit('callUser', {\n        recipientId: contact.id,\n        callerName: ((_this$state$user = _this.state.user) === null || _this$state$user === void 0 ? void 0 : _this$state$user.username) || 'Unknown Caller'\n      }); // Access microphone (audio only)\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        console.log('[CHAT] Got localStream, tracks:', stream.getAudioTracks());\n\n        _this.setState({\n          localStream: stream\n        });\n\n        var peerConnection = _this.createPeerConnection(); // Add local tracks\n\n\n        stream.getTracks().forEach(function (track) {\n          console.log('[CHAT] Adding local track:', track.label);\n          peerConnection.addTrack(track, stream);\n        }); // Create offer\n\n        peerConnection.createOffer().then(function (offer) {\n          console.log('[CHAT] Created offer, setting local desc');\n          peerConnection.setLocalDescription(offer);\n          console.log('[CHAT] Sending offer to server...');\n\n          _this.state.socket.emit('offer', {\n            sdp: offer,\n            target: contact.id\n          });\n        }).catch(function (err) {\n          return console.error('[CHAT] Offer creation error', err);\n        });\n\n        _this.setState({\n          peerConnection: peerConnection\n        });\n      }).catch(function (err) {\n        return console.error('[CHAT] getUserMedia error', err);\n      });\n    };\n\n    _this.acceptCall = function () {\n      var _this$state$callerInf;\n\n      console.log('[CHAT] Accepting call from:', _this.state.callerInfo);\n\n      _this.setState({\n        incomingCallModal: false,\n        callState: 'inCall'\n      }); // If our contact doesn't match callerInfo.from, fix it\n\n\n      var callerId = (_this$state$callerInf = _this.state.callerInfo) === null || _this$state$callerInf === void 0 ? void 0 : _this$state$callerInf.from;\n\n      if (callerId && (!_this.state.contact.id || _this.state.contact.id !== callerId)) {\n        _this.setState({\n          contact: _objectSpread(_objectSpread({}, _this.state.contact), {}, {\n            id: callerId,\n            name: _this.state.callerInfo.callerName\n          })\n        });\n      } // Access microphone\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(function (stream) {\n        console.log('[CHAT] Got localStream (callee), tracks:', stream.getAudioTracks());\n\n        _this.setState({\n          localStream: stream\n        }); // Create RTCPeerConnection\n\n\n        var peerConnection = _this.createPeerConnection(); // Add local tracks\n\n\n        stream.getTracks().forEach(function (track) {\n          console.log('[CHAT] Callee adding local track:', track.label);\n          peerConnection.addTrack(track, stream);\n        });\n\n        _this.setState({\n          peerConnection: peerConnection\n        }); // Wait for 'offer' event => setRemoteDesc => createAnswer => send back\n\n      }).catch(function (err) {\n        return console.error('[CHAT] Error accessing mic (callee)', err);\n      });\n    };\n\n    _this.rejectCall = function () {\n      console.log('[CHAT] Rejecting call from:', _this.state.callerInfo);\n\n      _this.setState({\n        incomingCallModal: false,\n        callState: 'idle',\n        callerInfo: null\n      }); // Optionally notify the caller that call is rejected\n      // e.g. this.state.socket.emit('callRejected', {...});\n\n    };\n\n    _this.createPeerConnection = function () {\n      console.log('[CHAT] Creating RTCPeerConnection...');\n      var configuration = {\n        iceServers: [{\n          urls: 'stun:stun1.l.google.com:19302'\n        } // Add TURN if needed\n        ]\n      };\n      var peerConnection = new RTCPeerConnection(configuration); // On ICE candidate\n\n      peerConnection.onicecandidate = function (event) {\n        if (event.candidate) {\n          var targetId = _this.state.contact.id || _this.state.callerInfo && _this.state.callerInfo.from;\n          console.log('[CHAT] Sending ICE candidate to:', targetId);\n\n          _this.state.socket.emit('iceCandidate', {\n            candidate: event.candidate,\n            target: targetId\n          });\n        } else {\n          console.log('[CHAT] ICE gathering complete (no more candidates)');\n        }\n      }; // On track (remote stream)\n\n\n      peerConnection.ontrack = function (event) {\n        console.log('[CHAT] ontrack => remote track label:', event.track.label);\n\n        _this.setState({\n          remoteStream: event.streams[0]\n        });\n      }; // Handle connection state changes\n\n\n      peerConnection.onconnectionstatechange = function () {\n        var state = peerConnection.connectionState;\n        console.log('[CHAT] PeerConnection state:', state);\n\n        if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n          console.log('[CHAT] PeerConnection ended, calling endCall()');\n\n          _this.endCall();\n        }\n      };\n\n      return peerConnection;\n    };\n\n    _this.endCall = function () {\n      console.log('[CHAT] endCall invoked');\n      var _this$state = _this.state,\n          socket = _this$state.socket,\n          contact = _this$state.contact,\n          callerInfo = _this$state.callerInfo,\n          peerConnection = _this$state.peerConnection,\n          localStream = _this$state.localStream,\n          callState = _this$state.callState; // Decide who to hang up on\n\n      var targetId = contact.id || callerInfo && callerInfo.from;\n\n      if (callState === 'calling' || callState === 'inCall') {\n        console.log('[CHAT] Emitting hangUp to target:', targetId);\n        socket.emit('hangUp', {\n          target: targetId\n        });\n      }\n\n      if (peerConnection) {\n        console.log('[CHAT] Closing peerConnection...');\n        peerConnection.close();\n      }\n\n      if (localStream) {\n        console.log('[CHAT] Stopping localStream tracks');\n        localStream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      }\n\n      _this.setState({\n        callState: 'idle',\n        peerConnection: null,\n        localStream: null,\n        remoteStream: null,\n        callerInfo: null,\n        incomingCallModal: false\n      });\n    };\n\n    _this.onData = function (user, contacts, messages, users) {\n      console.log('[CHAT] onData => user:', user, ' contacts:', contacts.length);\n      var contact = contacts[0] || {};\n\n      _this.setState({\n        messages: messages,\n        contacts: contacts,\n        user: user,\n        contact: contact\n      }, function () {\n        _this.updateUsersState(users);\n      });\n    };\n\n    _this.onNewMessage = function (message) {\n      if (message.sender === _this.state.contact.id) {\n        _this.setState({\n          typing: false\n        });\n\n        _this.state.socket.emit('seen', _this.state.contact.id);\n\n        message.seen = true;\n      }\n\n      var newMessages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: newMessages\n      });\n    };\n\n    _this.onTypingMessage = function (sender) {\n      if (_this.state.contact.id !== sender) return;\n\n      _this.setState({\n        typing: sender\n      });\n\n      clearTimeout(_this.state.timeout);\n      var timeout = setTimeout(function () {\n        return _this.setState({\n          typing: false\n        });\n      }, 3000);\n\n      _this.setState({\n        timeout: timeout\n      });\n    };\n\n    _this.onSocketError = function (err) {\n      console.error('[CHAT] Socket error:', err);\n\n      if (err === 'auth_error') {\n        Auth.logout();\n\n        _this.props.history.push('/login');\n      }\n    };\n\n    _this.updateUsersState = function (users) {\n      var contacts = _this.state.contacts;\n      contacts.forEach(function (element, index) {\n        if (users[element.id]) contacts[index].status = users[element.id];\n      });\n\n      _this.setState({\n        contacts: contacts\n      });\n\n      var contact = _this.state.contact;\n      if (users[contact.id]) contact.status = users[contact.id];\n\n      _this.setState({\n        contact: contact\n      });\n    };\n\n    _this.sendMessage = function (message) {\n      if (!_this.state.contact.id) return;\n      message.receiver = _this.state.contact.id;\n\n      var newMessages = _this.state.messages.concat(message);\n\n      _this.setState({\n        messages: newMessages\n      });\n\n      _this.state.socket.emit('message', message);\n    };\n\n    _this.sendType = function () {\n      if (_this.state.contact.id) {\n        _this.state.socket.emit('typing', _this.state.contact.id);\n      }\n    };\n\n    _this.logout = function () {\n      console.log('[CHAT] Logging out user');\n\n      _this.state.socket.disconnect();\n\n      Auth.logout();\n\n      _this.props.history.push('/');\n    };\n\n    _this.renderChat = function () {\n      var _this$state2 = _this.state,\n          contact = _this$state2.contact,\n          user = _this$state2.user,\n          messages = _this$state2.messages;\n      if (!contact || !contact.id) return null;\n      var filtered = messages.filter(function (m) {\n        return m.sender === contact.id || m.receiver === contact.id;\n      });\n      return /*#__PURE__*/_jsxDEV(Messages, {\n        user: user,\n        messages: filtered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 12\n      }, _assertThisInitialized(_this));\n    };\n\n    _this.onChatNavigate = function (contact) {\n      console.log('[CHAT] onChatNavigate => switching to contact:', contact.id);\n\n      _this.setState({\n        contact: contact\n      });\n\n      _this.state.socket.emit('seen', contact.id);\n\n      var newMessages = _this.state.messages.map(function (m) {\n        if (m.sender === contact.id) {\n          return _objectSpread(_objectSpread({}, m), {}, {\n            seen: true\n          });\n        }\n\n        return m;\n      });\n\n      _this.setState({\n        messages: newMessages\n      });\n    };\n\n    _this.userProfileToggle = function () {\n      return _this.setState({\n        userProfile: !_this.state.userProfile\n      });\n    };\n\n    _this.profileToggle = function () {\n      return _this.setState({\n        profile: !_this.state.profile\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Initialize socket.io connection.\n      this.initSocketConnection();\n    } // ============ SOCKET.IO CONNECTION & EVENTS ============\n\n  }, {\n    key: \"render\",\n    value: // ============ RENDERING ============\n    function render() {\n      var _this2 = this;\n\n      if (!this.state.connected || !this.state.contacts || !this.state.messages) {\n        return /*#__PURE__*/_jsxDEV(Spinner, {\n          id: \"loader\",\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 14\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Row, {\n        className: \"h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"contacts-section\",\n          className: \"col-6 col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(ContactHeader, {\n            user: this.state.user,\n            toggle: this.profileToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Contacts, {\n            contacts: this.state.contacts,\n            messages: this.state.messages,\n            onChatNavigate: this.onChatNavigate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(UserProfile, {\n            contact: this.state.contact,\n            toggle: this.userProfileToggle,\n            open: this.state.userProfile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(EditProfile, {\n            user: this.state.user,\n            toggle: this.profileToggle,\n            open: this.state.profile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"messages-section\",\n          className: \"col-6 col-md-8\",\n          children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n            contact: this.state.contact,\n            typing: this.state.typing,\n            toggle: this.userProfileToggle,\n            logout: this.logout // pass the call method so ChatHeader can call\n            ,\n            onCall: this.initiateCall\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 11\n          }, this), this.renderChat(), /*#__PURE__*/_jsxDEV(MessageForm, {\n            sender: this.sendMessage,\n            sendType: this.sendType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 11\n          }, this), (this.state.callState === 'calling' || this.state.callState === 'inCall') && /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: this.endCall,\n            className: \"mt-2\",\n            children: \"Hang Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this), this.state.remoteStream && /*#__PURE__*/_jsxDEV(\"audio\", {\n            ref: function ref(audioEl) {\n              if (audioEl && _this2.state.remoteStream) {\n                console.log('[CHAT] Attaching remoteStream to audio element');\n                audioEl.srcObject = _this2.state.remoteStream;\n              }\n            },\n            autoPlay: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: this.state.incomingCallModal,\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: \"Incoming Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: this.state.callerInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [this.state.callerInfo.callerName, \" is calling...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"success\",\n              onClick: this.acceptCall,\n              children: \"Accept\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              onClick: this.rejectCall,\n              children: \"Reject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/mohsh/Downloads/chat-app-master (1)/chat-app-master/web/src/views/Chat.js"],"names":["React","Row","Spinner","Button","Modal","ModalHeader","ModalBody","ModalFooter","ContactHeader","Contacts","ChatHeader","Messages","MessageForm","UserProfile","EditProfile","socketIO","Auth","Chat","state","contacts","contact","userProfile","profile","connected","messages","typing","timeout","user","callState","incomingCallModal","callerInfo","localStream","remoteStream","peerConnection","initSocketConnection","socket","process","env","REACT_APP_SOCKET","query","getToken","on","console","log","setState","onData","onNewMessage","updateUsersState","onTypingMessage","onSocketError","data","id","from","name","callerName","sdp","caller","desc","RTCSessionDescription","setRemoteDescription","then","createAnswer","answer","setLocalDescription","emit","target","catch","err","error","callee","candidate","addIceCandidate","RTCIceCandidate","e","endCall","initiateCall","recipientId","username","navigator","mediaDevices","getUserMedia","audio","video","stream","getAudioTracks","createPeerConnection","getTracks","forEach","track","label","addTrack","createOffer","offer","acceptCall","callerId","rejectCall","configuration","iceServers","urls","RTCPeerConnection","onicecandidate","event","targetId","ontrack","streams","onconnectionstatechange","connectionState","close","stop","users","length","message","sender","seen","newMessages","concat","clearTimeout","setTimeout","logout","props","history","push","element","index","status","sendMessage","receiver","sendType","disconnect","renderChat","filtered","filter","m","onChatNavigate","map","userProfileToggle","profileToggle","audioEl","srcObject","Component"],"mappings":";;;;;;;;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,WAAtC,EAAmDC,SAAnD,EAA8DC,WAA9D,QAAiF,YAAjF;AACA,SACEC,aADF,EAEEC,QAFF,EAGEC,UAHF,EAIEC,QAJF,EAKEC,WALF,EAMEC,WANF,EAOEC,WAPF,QAQO,YARP;AASA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;;IAEMC,I;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,OAAO,EAAE,EAFH;AAEe;AACrBC,MAAAA,WAAW,EAAE,KAHP;AAINC,MAAAA,OAAO,EAAE,KAJH;AAMN;AACAC,MAAAA,SAAS,EAAE,KAPL;AAQNC,MAAAA,QAAQ,EAAE,EARJ;AASNC,MAAAA,MAAM,EAAE,KATF;AAUNC,MAAAA,OAAO,EAAE,IAVH;AAWNC,MAAAA,IAAI,EAAE,IAXA;AAaN;AACAC,MAAAA,SAAS,EAAE,MAdL;AAcc;AACpBC,MAAAA,iBAAiB,EAAE,KAfb;AAgBNC,MAAAA,UAAU,EAAE,IAhBN;AAgBc;AAEpB;AACAC,MAAAA,WAAW,EAAE,IAnBP;AAoBNC,MAAAA,YAAY,EAAE,IApBR;AAqBNC,MAAAA,cAAc,EAAE;AArBV,K;;UA8BRC,oB,GAAuB,YAAM;AAC3B,UAAMC,MAAM,GAAGpB,QAAQ,CAACqB,OAAO,CAACC,GAAR,CAAYC,gBAAb,EAA+B;AACpDC,QAAAA,KAAK,EAAE,WAAWvB,IAAI,CAACwB,QAAL;AADkC,OAA/B,CAAvB,CAD2B,CAK3B;;AACAL,MAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,YAAM;AACzBC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AACA,cAAKC,QAAL,CAAc;AAAErB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD,OAHD;AAIAY,MAAAA,MAAM,CAACM,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AACA,cAAKC,QAAL,CAAc;AAAErB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD,OAHD;AAIAY,MAAAA,MAAM,CAACM,EAAP,CAAU,MAAV,EAAkB,MAAKI,MAAvB;AACAV,MAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,MAAKK,YAA1B;AACAX,MAAAA,MAAM,CAACM,EAAP,CAAU,aAAV,EAAyB,MAAKM,gBAA9B;AACAZ,MAAAA,MAAM,CAACM,EAAP,CAAU,QAAV,EAAoB,MAAKO,eAAzB;AACAb,MAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,MAAKQ,aAAxB,EAlB2B,CAoB3B;;AACAd,MAAAA,MAAM,CAACM,EAAP,CAAU,cAAV,EAA0B,UAACS,IAAD,EAAU;AAClC;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CO,IAA1C;;AACA,cAAKN,QAAL,CAAc;AACZhB,UAAAA,SAAS,EAAE,WADC;AAEZC,UAAAA,iBAAiB,EAAE,IAFP;AAGZC,UAAAA,UAAU,EAAEoB,IAHA,CAGQ;;AAHR,SAAd,EAHkC,CASlC;AACA;;;AACA,YAAI,CAAC,MAAKhC,KAAL,CAAWE,OAAX,CAAmB+B,EAApB,IAA0B,MAAKjC,KAAL,CAAWE,OAAX,CAAmB+B,EAAnB,KAA0BD,IAAI,CAACE,IAA7D,EAAmE;AACjE,gBAAKR,QAAL,CAAc;AACZxB,YAAAA,OAAO,kCACF,MAAKF,KAAL,CAAWE,OADT;AAEL+B,cAAAA,EAAE,EAAED,IAAI,CAACE,IAFJ;AAGLC,cAAAA,IAAI,EAAEH,IAAI,CAACI;AAHN;AADK,WAAd;AAOD;AACF,OApBD;AAsBAnB,MAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,gBAAqB;AAAA,YAAlBc,GAAkB,QAAlBA,GAAkB;AAAA,YAAbC,MAAa,QAAbA,MAAa;AACtCd,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2Ca,MAA3C;;AACA,YAAI,MAAKtC,KAAL,CAAWe,cAAf,EAA+B;AAC7B,cAAMwB,IAAI,GAAG,IAAIC,qBAAJ,CAA0BH,GAA1B,CAAb;;AACA,gBAAKrC,KAAL,CAAWe,cAAX,CAA0B0B,oBAA1B,CAA+CF,IAA/C,EACGG,IADH,CACQ,YAAM;AACVlB,YAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACA,mBAAO,MAAKzB,KAAL,CAAWe,cAAX,CAA0B4B,YAA1B,EAAP;AACD,WAJH,EAKGD,IALH,CAKQ,UAAAE,MAAM,EAAI;AACdpB,YAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;;AACA,kBAAKzB,KAAL,CAAWe,cAAX,CAA0B8B,mBAA1B,CAA8CD,MAA9C;;AACA3B,YAAAA,MAAM,CAAC6B,IAAP,CAAY,QAAZ,EAAsB;AACpBT,cAAAA,GAAG,EAAEO,MADe;AAEpBG,cAAAA,MAAM,EAAET;AAFY,aAAtB;;AAIA,kBAAKZ,QAAL,CAAc;AAAEhB,cAAAA,SAAS,EAAE;AAAb,aAAd;AACD,WAbH,EAcGsC,KAdH,CAcS,UAAAC,GAAG;AAAA,mBAAIzB,OAAO,CAAC0B,KAAR,CAAc,qCAAd,EAAqDD,GAArD,CAAJ;AAAA,WAdZ;AAeD;AACF,OApBD;AAsBAhC,MAAAA,MAAM,CAACM,EAAP,CAAU,QAAV,EAAoB,iBAAqB;AAAA,YAAlBc,GAAkB,SAAlBA,GAAkB;AAAA,YAAbc,MAAa,SAAbA,MAAa;AACvC3B,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C0B,MAA5C;;AACA,YAAI,MAAKnD,KAAL,CAAWe,cAAf,EAA+B;AAC7B,cAAMwB,IAAI,GAAG,IAAIC,qBAAJ,CAA0BH,GAA1B,CAAb;;AACA,gBAAKrC,KAAL,CAAWe,cAAX,CAA0B0B,oBAA1B,CAA+CF,IAA/C,EACGG,IADH,CACQ,YAAM;AACVlB,YAAAA,OAAO,CAACC,GAAR,CAAY,8DAAZ;;AACA,kBAAKC,QAAL,CAAc;AAAEhB,cAAAA,SAAS,EAAE;AAAb,aAAd;AACD,WAJH,EAKGsC,KALH,CAKS,UAAAC,GAAG;AAAA,mBAAIzB,OAAO,CAAC0B,KAAR,CAAc,2CAAd,EAA2DD,GAA3D,CAAJ;AAAA,WALZ;AAMD;AACF,OAXD;AAaAhC,MAAAA,MAAM,CAACM,EAAP,CAAU,cAAV,EAA0B,iBAAyB;AAAA,YAAtB6B,SAAsB,SAAtBA,SAAsB;AAAA,YAAXlB,IAAW,SAAXA,IAAW;AACjDV,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDS,IAAnD;;AACA,YAAI,MAAKlC,KAAL,CAAWe,cAAX,IAA6BqC,SAAjC,EAA4C;AAC1C,gBAAKpD,KAAL,CAAWe,cAAX,CAA0BsC,eAA1B,CAA0C,IAAIC,eAAJ,CAAoBF,SAApB,CAA1C,EACGJ,KADH,CACS,UAAAO,CAAC;AAAA,mBAAI/B,OAAO,CAAC0B,KAAR,CAAc,mCAAd,EAAmDK,CAAnD,CAAJ;AAAA,WADV;AAED;AACF,OAND;AAQAtC,MAAAA,MAAM,CAACM,EAAP,CAAU,QAAV,EAAoB,YAAM;AACxBC,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AACA,cAAK+B,OAAL;AACD,OAHD;;AAKA,YAAK9B,QAAL,CAAc;AAAET,QAAAA,MAAM,EAANA;AAAF,OAAd;AACD,K;;UAGDwC,Y,GAAe,UAACvD,OAAD,EAAa;AAAA;;AAC1B,UAAI,CAACA,OAAO,CAAC+B,EAAb,EAAiB;AACjBT,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDvB,OAAO,CAAC+B,EAA5D;;AAEA,YAAKP,QAAL,CAAc;AACZhB,QAAAA,SAAS,EAAE,SADC;AAEZR,QAAAA,OAAO,EAAEA;AAFG,OAAd,EAJ0B,CAS1B;;;AACA,YAAKF,KAAL,CAAWiB,MAAX,CAAkB6B,IAAlB,CAAuB,UAAvB,EAAmC;AACjCY,QAAAA,WAAW,EAAExD,OAAO,CAAC+B,EADY;AAEjCG,QAAAA,UAAU,EAAE,2BAAKpC,KAAL,CAAWS,IAAX,sEAAiBkD,QAAjB,KAA6B;AAFR,OAAnC,EAV0B,CAe1B;;;AACAC,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAApC,EACGtB,IADH,CACQ,UAAAuB,MAAM,EAAI;AACdzC,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CwC,MAAM,CAACC,cAAP,EAA/C;;AACA,cAAKxC,QAAL,CAAc;AAAEb,UAAAA,WAAW,EAAEoD;AAAf,SAAd;;AAEA,YAAMlD,cAAc,GAAG,MAAKoD,oBAAL,EAAvB,CAJc,CAMd;;;AACAF,QAAAA,MAAM,CAACG,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK,EAAI;AAClC9C,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0C6C,KAAK,CAACC,KAAhD;AACAxD,UAAAA,cAAc,CAACyD,QAAf,CAAwBF,KAAxB,EAA+BL,MAA/B;AACD,SAHD,EAPc,CAYd;;AACAlD,QAAAA,cAAc,CAAC0D,WAAf,GACG/B,IADH,CACQ,UAAAgC,KAAK,EAAI;AACblD,UAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACAV,UAAAA,cAAc,CAAC8B,mBAAf,CAAmC6B,KAAnC;AACAlD,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;;AACA,gBAAKzB,KAAL,CAAWiB,MAAX,CAAkB6B,IAAlB,CAAuB,OAAvB,EAAgC;AAC9BT,YAAAA,GAAG,EAAEqC,KADyB;AAE9B3B,YAAAA,MAAM,EAAE7C,OAAO,CAAC+B;AAFc,WAAhC;AAID,SATH,EAUGe,KAVH,CAUS,UAAAC,GAAG;AAAA,iBAAIzB,OAAO,CAAC0B,KAAR,CAAc,6BAAd,EAA6CD,GAA7C,CAAJ;AAAA,SAVZ;;AAYA,cAAKvB,QAAL,CAAc;AAAEX,UAAAA,cAAc,EAAdA;AAAF,SAAd;AACD,OA3BH,EA4BGiC,KA5BH,CA4BS,UAAAC,GAAG;AAAA,eAAIzB,OAAO,CAAC0B,KAAR,CAAc,2BAAd,EAA2CD,GAA3C,CAAJ;AAAA,OA5BZ;AA6BD,K;;UAED0B,U,GAAa,YAAM;AAAA;;AACjBnD,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2C,MAAKzB,KAAL,CAAWY,UAAtD;;AACA,YAAKc,QAAL,CAAc;AACZf,QAAAA,iBAAiB,EAAE,KADP;AAEZD,QAAAA,SAAS,EAAE;AAFC,OAAd,EAFiB,CAOjB;;;AACA,UAAMkE,QAAQ,4BAAG,MAAK5E,KAAL,CAAWY,UAAd,0DAAG,sBAAuBsB,IAAxC;;AACA,UAAI0C,QAAQ,KAAK,CAAC,MAAK5E,KAAL,CAAWE,OAAX,CAAmB+B,EAApB,IAA0B,MAAKjC,KAAL,CAAWE,OAAX,CAAmB+B,EAAnB,KAA0B2C,QAAzD,CAAZ,EAAgF;AAC9E,cAAKlD,QAAL,CAAc;AACZxB,UAAAA,OAAO,kCACF,MAAKF,KAAL,CAAWE,OADT;AAEL+B,YAAAA,EAAE,EAAE2C,QAFC;AAGLzC,YAAAA,IAAI,EAAE,MAAKnC,KAAL,CAAWY,UAAX,CAAsBwB;AAHvB;AADK,SAAd;AAOD,OAjBgB,CAmBjB;;;AACAwB,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAApC,EACGtB,IADH,CACQ,UAAAuB,MAAM,EAAI;AACdzC,QAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDwC,MAAM,CAACC,cAAP,EAAxD;;AACA,cAAKxC,QAAL,CAAc;AAAEb,UAAAA,WAAW,EAAEoD;AAAf,SAAd,EAFc,CAId;;;AACA,YAAMlD,cAAc,GAAG,MAAKoD,oBAAL,EAAvB,CALc,CAOd;;;AACAF,QAAAA,MAAM,CAACG,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK,EAAI;AAClC9C,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiD6C,KAAK,CAACC,KAAvD;AACAxD,UAAAA,cAAc,CAACyD,QAAf,CAAwBF,KAAxB,EAA+BL,MAA/B;AACD,SAHD;;AAKA,cAAKvC,QAAL,CAAc;AAAEX,UAAAA,cAAc,EAAdA;AAAF,SAAd,EAbc,CAcd;;AACD,OAhBH,EAiBGiC,KAjBH,CAiBS,UAAAC,GAAG;AAAA,eAAIzB,OAAO,CAAC0B,KAAR,CAAc,qCAAd,EAAqDD,GAArD,CAAJ;AAAA,OAjBZ;AAkBD,K;;UAED4B,U,GAAa,YAAM;AACjBrD,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2C,MAAKzB,KAAL,CAAWY,UAAtD;;AACA,YAAKc,QAAL,CAAc;AACZf,QAAAA,iBAAiB,EAAE,KADP;AAEZD,QAAAA,SAAS,EAAE,MAFC;AAGZE,QAAAA,UAAU,EAAE;AAHA,OAAd,EAFiB,CAOjB;AACA;;AACD,K;;UAEDuD,oB,GAAuB,YAAM;AAC3B3C,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,UAAMqD,aAAa,GAAG;AACpBC,QAAAA,UAAU,EAAE,CACV;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADU,CAEV;AAFU;AADQ,OAAtB;AAMA,UAAMjE,cAAc,GAAG,IAAIkE,iBAAJ,CAAsBH,aAAtB,CAAvB,CAR2B,CAU3B;;AACA/D,MAAAA,cAAc,CAACmE,cAAf,GAAgC,UAACC,KAAD,EAAW;AACzC,YAAIA,KAAK,CAAC/B,SAAV,EAAqB;AACnB,cAAMgC,QAAQ,GAAG,MAAKpF,KAAL,CAAWE,OAAX,CAAmB+B,EAAnB,IAA0B,MAAKjC,KAAL,CAAWY,UAAX,IAAyB,MAAKZ,KAAL,CAAWY,UAAX,CAAsBsB,IAA1F;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgD2D,QAAhD;;AACA,gBAAKpF,KAAL,CAAWiB,MAAX,CAAkB6B,IAAlB,CAAuB,cAAvB,EAAuC;AACrCM,YAAAA,SAAS,EAAE+B,KAAK,CAAC/B,SADoB;AAErCL,YAAAA,MAAM,EAAEqC;AAF6B,WAAvC;AAID,SAPD,MAOO;AACL5D,UAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACD;AACF,OAXD,CAX2B,CAwB3B;;;AACAV,MAAAA,cAAc,CAACsE,OAAf,GAAyB,UAACF,KAAD,EAAW;AAClC3D,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqD0D,KAAK,CAACb,KAAN,CAAYC,KAAjE;;AACA,cAAK7C,QAAL,CAAc;AAAEZ,UAAAA,YAAY,EAAEqE,KAAK,CAACG,OAAN,CAAc,CAAd;AAAhB,SAAd;AACD,OAHD,CAzB2B,CA8B3B;;;AACAvE,MAAAA,cAAc,CAACwE,uBAAf,GAAyC,YAAM;AAC7C,YAAMvF,KAAK,GAAGe,cAAc,CAACyE,eAA7B;AACAhE,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CzB,KAA5C;;AACA,YAAIA,KAAK,KAAK,cAAV,IAA4BA,KAAK,KAAK,QAAtC,IAAkDA,KAAK,KAAK,QAAhE,EAA0E;AACxEwB,UAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;;AACA,gBAAK+B,OAAL;AACD;AACF,OAPD;;AASA,aAAOzC,cAAP;AACD,K;;UAEDyC,O,GAAU,YAAM;AACdhC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AADc,wBAEkE,MAAKzB,KAFvE;AAAA,UAENiB,MAFM,eAENA,MAFM;AAAA,UAEEf,OAFF,eAEEA,OAFF;AAAA,UAEWU,UAFX,eAEWA,UAFX;AAAA,UAEuBG,cAFvB,eAEuBA,cAFvB;AAAA,UAEuCF,WAFvC,eAEuCA,WAFvC;AAAA,UAEoDH,SAFpD,eAEoDA,SAFpD,EAGd;;AACA,UAAM0E,QAAQ,GAAGlF,OAAO,CAAC+B,EAAR,IAAerB,UAAU,IAAIA,UAAU,CAACsB,IAAzD;;AAEA,UAAIxB,SAAS,KAAK,SAAd,IAA2BA,SAAS,KAAK,QAA7C,EAAuD;AACrDc,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiD2D,QAAjD;AACAnE,QAAAA,MAAM,CAAC6B,IAAP,CAAY,QAAZ,EAAsB;AAAEC,UAAAA,MAAM,EAAEqC;AAAV,SAAtB;AACD;;AAED,UAAIrE,cAAJ,EAAoB;AAClBS,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAV,QAAAA,cAAc,CAAC0E,KAAf;AACD;;AAED,UAAI5E,WAAJ,EAAiB;AACfW,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAZ,QAAAA,WAAW,CAACuD,SAAZ,GAAwBC,OAAxB,CAAgC,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACoB,IAAN,EAAJ;AAAA,SAArC;AACD;;AAED,YAAKhE,QAAL,CAAc;AACZhB,QAAAA,SAAS,EAAE,MADC;AAEZK,QAAAA,cAAc,EAAE,IAFJ;AAGZF,QAAAA,WAAW,EAAE,IAHD;AAIZC,QAAAA,YAAY,EAAE,IAJF;AAKZF,QAAAA,UAAU,EAAE,IALA;AAMZD,QAAAA,iBAAiB,EAAE;AANP,OAAd;AAQD,K;;UAGDgB,M,GAAS,UAAClB,IAAD,EAAOR,QAAP,EAAiBK,QAAjB,EAA2BqF,KAA3B,EAAqC;AAC5CnE,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsChB,IAAtC,EAA4C,YAA5C,EAA0DR,QAAQ,CAAC2F,MAAnE;AACA,UAAI1F,OAAO,GAAGD,QAAQ,CAAC,CAAD,CAAR,IAAe,EAA7B;;AACA,YAAKyB,QAAL,CAAc;AAAEpB,QAAAA,QAAQ,EAARA,QAAF;AAAYL,QAAAA,QAAQ,EAARA,QAAZ;AAAsBQ,QAAAA,IAAI,EAAJA,IAAtB;AAA4BP,QAAAA,OAAO,EAAPA;AAA5B,OAAd,EAAqD,YAAM;AACzD,cAAK2B,gBAAL,CAAsB8D,KAAtB;AACD,OAFD;AAGD,K;;UAED/D,Y,GAAe,UAACiE,OAAD,EAAa;AAC1B,UAAIA,OAAO,CAACC,MAAR,KAAmB,MAAK9F,KAAL,CAAWE,OAAX,CAAmB+B,EAA1C,EAA8C;AAC5C,cAAKP,QAAL,CAAc;AAAEnB,UAAAA,MAAM,EAAE;AAAV,SAAd;;AACA,cAAKP,KAAL,CAAWiB,MAAX,CAAkB6B,IAAlB,CAAuB,MAAvB,EAA+B,MAAK9C,KAAL,CAAWE,OAAX,CAAmB+B,EAAlD;;AACA4D,QAAAA,OAAO,CAACE,IAAR,GAAe,IAAf;AACD;;AACD,UAAIC,WAAW,GAAG,MAAKhG,KAAL,CAAWM,QAAX,CAAoB2F,MAApB,CAA2BJ,OAA3B,CAAlB;;AACA,YAAKnE,QAAL,CAAc;AAAEpB,QAAAA,QAAQ,EAAE0F;AAAZ,OAAd;AACD,K;;UAEDlE,e,GAAkB,UAACgE,MAAD,EAAY;AAC5B,UAAI,MAAK9F,KAAL,CAAWE,OAAX,CAAmB+B,EAAnB,KAA0B6D,MAA9B,EAAsC;;AACtC,YAAKpE,QAAL,CAAc;AAAEnB,QAAAA,MAAM,EAAEuF;AAAV,OAAd;;AACAI,MAAAA,YAAY,CAAC,MAAKlG,KAAL,CAAWQ,OAAZ,CAAZ;AACA,UAAMA,OAAO,GAAG2F,UAAU,CAAC;AAAA,eAAM,MAAKzE,QAAL,CAAc;AAAEnB,UAAAA,MAAM,EAAE;AAAV,SAAd,CAAN;AAAA,OAAD,EAAyC,IAAzC,CAA1B;;AACA,YAAKmB,QAAL,CAAc;AAAElB,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACD,K;;UAEDuB,a,GAAgB,UAACkB,GAAD,EAAS;AACvBzB,MAAAA,OAAO,CAAC0B,KAAR,CAAc,sBAAd,EAAsCD,GAAtC;;AACA,UAAIA,GAAG,KAAK,YAAZ,EAA0B;AACxBnD,QAAAA,IAAI,CAACsG,MAAL;;AACA,cAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACD;AACF,K;;UAED1E,gB,GAAmB,UAAC8D,KAAD,EAAW;AAC5B,UAAI1F,QAAQ,GAAG,MAAKD,KAAL,CAAWC,QAA1B;AACAA,MAAAA,QAAQ,CAACoE,OAAT,CAAiB,UAACmC,OAAD,EAAUC,KAAV,EAAoB;AACnC,YAAId,KAAK,CAACa,OAAO,CAACvE,EAAT,CAAT,EAAuBhC,QAAQ,CAACwG,KAAD,CAAR,CAAgBC,MAAhB,GAAyBf,KAAK,CAACa,OAAO,CAACvE,EAAT,CAA9B;AACxB,OAFD;;AAGA,YAAKP,QAAL,CAAc;AAAEzB,QAAAA,QAAQ,EAARA;AAAF,OAAd;;AACA,UAAIC,OAAO,GAAG,MAAKF,KAAL,CAAWE,OAAzB;AACA,UAAIyF,KAAK,CAACzF,OAAO,CAAC+B,EAAT,CAAT,EAAuB/B,OAAO,CAACwG,MAAR,GAAiBf,KAAK,CAACzF,OAAO,CAAC+B,EAAT,CAAtB;;AACvB,YAAKP,QAAL,CAAc;AAAExB,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACD,K;;UAEDyG,W,GAAc,UAACd,OAAD,EAAa;AACzB,UAAI,CAAC,MAAK7F,KAAL,CAAWE,OAAX,CAAmB+B,EAAxB,EAA4B;AAC5B4D,MAAAA,OAAO,CAACe,QAAR,GAAmB,MAAK5G,KAAL,CAAWE,OAAX,CAAmB+B,EAAtC;;AACA,UAAI+D,WAAW,GAAG,MAAKhG,KAAL,CAAWM,QAAX,CAAoB2F,MAApB,CAA2BJ,OAA3B,CAAlB;;AACA,YAAKnE,QAAL,CAAc;AAAEpB,QAAAA,QAAQ,EAAE0F;AAAZ,OAAd;;AACA,YAAKhG,KAAL,CAAWiB,MAAX,CAAkB6B,IAAlB,CAAuB,SAAvB,EAAkC+C,OAAlC;AACD,K;;UAEDgB,Q,GAAW,YAAM;AACf,UAAI,MAAK7G,KAAL,CAAWE,OAAX,CAAmB+B,EAAvB,EAA2B;AACzB,cAAKjC,KAAL,CAAWiB,MAAX,CAAkB6B,IAAlB,CAAuB,QAAvB,EAAiC,MAAK9C,KAAL,CAAWE,OAAX,CAAmB+B,EAApD;AACD;AACF,K;;UAEDmE,M,GAAS,YAAM;AACb5E,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AACA,YAAKzB,KAAL,CAAWiB,MAAX,CAAkB6F,UAAlB;;AACAhH,MAAAA,IAAI,CAACsG,MAAL;;AACA,YAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,K;;UAiFDQ,U,GAAa,YAAM;AAAA,yBACmB,MAAK/G,KADxB;AAAA,UACTE,OADS,gBACTA,OADS;AAAA,UACAO,IADA,gBACAA,IADA;AAAA,UACMH,QADN,gBACMA,QADN;AAEjB,UAAI,CAACJ,OAAD,IAAY,CAACA,OAAO,CAAC+B,EAAzB,EAA6B,OAAO,IAAP;AAC7B,UAAI+E,QAAQ,GAAG1G,QAAQ,CAAC2G,MAAT,CACb,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACpB,MAAF,KAAa5F,OAAO,CAAC+B,EAArB,IAA2BiF,CAAC,CAACN,QAAF,KAAe1G,OAAO,CAAC+B,EAAzD;AAAA,OADa,CAAf;AAGA,0BAAO,QAAC,QAAD;AAAU,QAAA,IAAI,EAAExB,IAAhB;AAAsB,QAAA,QAAQ,EAAEuG;AAAhC;AAAA;AAAA;AAAA;AAAA,uCAAP;AACD,K;;UAEDG,c,GAAiB,UAACjH,OAAD,EAAa;AAC5BsB,MAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ,EAA8DvB,OAAO,CAAC+B,EAAtE;;AACA,YAAKP,QAAL,CAAc;AAAExB,QAAAA,OAAO,EAAPA;AAAF,OAAd;;AACA,YAAKF,KAAL,CAAWiB,MAAX,CAAkB6B,IAAlB,CAAuB,MAAvB,EAA+B5C,OAAO,CAAC+B,EAAvC;;AACA,UAAI+D,WAAW,GAAG,MAAKhG,KAAL,CAAWM,QAAX,CAAoB8G,GAApB,CAAwB,UAACF,CAAD,EAAO;AAC/C,YAAIA,CAAC,CAACpB,MAAF,KAAa5F,OAAO,CAAC+B,EAAzB,EAA6B;AAC3B,iDAAYiF,CAAZ;AAAenB,YAAAA,IAAI,EAAE;AAArB;AACD;;AACD,eAAOmB,CAAP;AACD,OALiB,CAAlB;;AAMA,YAAKxF,QAAL,CAAc;AAAEpB,QAAAA,QAAQ,EAAE0F;AAAZ,OAAd;AACD,K;;UAEDqB,iB,GAAoB;AAAA,aAAM,MAAK3F,QAAL,CAAc;AAAEvB,QAAAA,WAAW,EAAE,CAAC,MAAKH,KAAL,CAAWG;AAA3B,OAAd,CAAN;AAAA,K;;UACpBmH,a,GAAgB;AAAA,aAAM,MAAK5F,QAAL,CAAc;AAAEtB,QAAAA,OAAO,EAAE,CAAC,MAAKJ,KAAL,CAAWI;AAAvB,OAAd,CAAN;AAAA,K;;;;;;;WA1bhB,6BAAoB;AAClB;AACA,WAAKY,oBAAL;AACD,K,CAED;;;;WA+UA;AACA,sBAAS;AAAA;;AACP,UAAI,CAAC,KAAKhB,KAAL,CAAWK,SAAZ,IAAyB,CAAC,KAAKL,KAAL,CAAWC,QAArC,IAAiD,CAAC,KAAKD,KAAL,CAAWM,QAAjE,EAA2E;AACzE,4BAAO,QAAC,OAAD;AAAS,UAAA,EAAE,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;;AAED,0BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCAEE;AAAK,UAAA,EAAE,EAAC,kBAAR;AAA2B,UAAA,SAAS,EAAC,gBAArC;AAAA,kCACE,QAAC,aAAD;AAAe,YAAA,IAAI,EAAE,KAAKN,KAAL,CAAWS,IAAhC;AAAsC,YAAA,MAAM,EAAE,KAAK6G;AAAnD;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,QAAD;AACE,YAAA,QAAQ,EAAE,KAAKtH,KAAL,CAAWC,QADvB;AAEE,YAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWM,QAFvB;AAGE,YAAA,cAAc,EAAE,KAAK6G;AAHvB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAOE,QAAC,WAAD;AACE,YAAA,OAAO,EAAE,KAAKnH,KAAL,CAAWE,OADtB;AAEE,YAAA,MAAM,EAAE,KAAKmH,iBAFf;AAGE,YAAA,IAAI,EAAE,KAAKrH,KAAL,CAAWG;AAHnB;AAAA;AAAA;AAAA;AAAA,kBAPF,eAYE,QAAC,WAAD;AACE,YAAA,IAAI,EAAE,KAAKH,KAAL,CAAWS,IADnB;AAEE,YAAA,MAAM,EAAE,KAAK6G,aAFf;AAGE,YAAA,IAAI,EAAE,KAAKtH,KAAL,CAAWI;AAHnB;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAsBE;AAAK,UAAA,EAAE,EAAC,kBAAR;AAA2B,UAAA,SAAS,EAAC,gBAArC;AAAA,kCACE,QAAC,UAAD;AACE,YAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWE,OADtB;AAEE,YAAA,MAAM,EAAE,KAAKF,KAAL,CAAWO,MAFrB;AAGE,YAAA,MAAM,EAAE,KAAK8G,iBAHf;AAIE,YAAA,MAAM,EAAE,KAAKjB,MAJf,CAKE;AALF;AAME,YAAA,MAAM,EAAE,KAAK3C;AANf;AAAA;AAAA;AAAA;AAAA,kBADF,EASG,KAAKsD,UAAL,EATH,eAUE,QAAC,WAAD;AAAa,YAAA,MAAM,EAAE,KAAKJ,WAA1B;AAAuC,YAAA,QAAQ,EAAE,KAAKE;AAAtD;AAAA;AAAA;AAAA;AAAA,kBAVF,EAaG,CAAC,KAAK7G,KAAL,CAAWU,SAAX,KAAyB,SAAzB,IAAsC,KAAKV,KAAL,CAAWU,SAAX,KAAyB,QAAhE,kBACC,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,QAAd;AAAuB,YAAA,OAAO,EAAE,KAAK8C,OAArC;AAA8C,YAAA,SAAS,EAAC,MAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdJ,EAoBG,KAAKxD,KAAL,CAAWc,YAAX,iBACC;AACE,YAAA,GAAG,EAAE,aAACyG,OAAD,EAAa;AAChB,kBAAIA,OAAO,IAAI,MAAI,CAACvH,KAAL,CAAWc,YAA1B,EAAwC;AACtCU,gBAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACA8F,gBAAAA,OAAO,CAACC,SAAR,GAAoB,MAAI,CAACxH,KAAL,CAAWc,YAA/B;AACD;AACF,aANH;AAOE,YAAA,QAAQ;AAPV;AAAA;AAAA;AAAA;AAAA,kBArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBF,eAwDE,QAAC,KAAD;AAAO,UAAA,MAAM,EAAE,KAAKd,KAAL,CAAWW,iBAA1B;AAAA,kCACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAA,sBACG,KAAKX,KAAL,CAAWY,UAAX,iBACC;AAAA,yBAAI,KAAKZ,KAAL,CAAWY,UAAX,CAAsBwB,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,kBAFF,eAOE,QAAC,WAAD;AAAA,oCACE,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,SAAd;AAAwB,cAAA,OAAO,EAAE,KAAKuC,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,WAAd;AAA0B,cAAA,OAAO,EAAE,KAAKE,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxDF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAuED;;;;EA1bgB/F,KAAK,CAAC2I,S;;AAsdzB,eAAe1H,IAAf","sourcesContent":["/**\r\n * web/src/views/Chat.js\r\n */\r\n\r\nimport React from 'react';\r\nimport { Row, Spinner, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport {\r\n  ContactHeader,\r\n  Contacts,\r\n  ChatHeader,\r\n  Messages,\r\n  MessageForm,\r\n  UserProfile,\r\n  EditProfile,\r\n} from 'components';\r\nimport socketIO from 'socket.io-client';\r\nimport Auth from 'Auth';\r\n\r\nclass Chat extends React.Component {\r\n  state = {\r\n    contacts: [],\r\n    contact: {},         // Will hold { id, name, ... } of the current chat\r\n    userProfile: false,\r\n    profile: false,\r\n\r\n    // Existing message-related states\r\n    connected: false,\r\n    messages: [],\r\n    typing: false,\r\n    timeout: null,\r\n    user: null,\r\n\r\n    // ------ CALL STATES ------\r\n    callState: 'idle',  // 'idle' | 'calling' | 'receiving' | 'inCall'\r\n    incomingCallModal: false,\r\n    callerInfo: null,   // Will hold { from, callerName }\r\n\r\n    // WebRTC\r\n    localStream: null,\r\n    remoteStream: null,\r\n    peerConnection: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Initialize socket.io connection.\r\n    this.initSocketConnection();\r\n  }\r\n\r\n  // ============ SOCKET.IO CONNECTION & EVENTS ============\r\n  initSocketConnection = () => {\r\n    const socket = socketIO(process.env.REACT_APP_SOCKET, {\r\n      query: 'token=' + Auth.getToken(),\r\n    });\r\n\r\n    // --- Existing events ---\r\n    socket.on('connect', () => {\r\n      console.log('[CHAT] Socket connected');\r\n      this.setState({ connected: true });\r\n    });\r\n    socket.on('disconnect', () => {\r\n      console.log('[CHAT] Socket disconnected');\r\n      this.setState({ connected: false });\r\n    });\r\n    socket.on('data', this.onData);\r\n    socket.on('message', this.onNewMessage);\r\n    socket.on('user_status', this.updateUsersState);\r\n    socket.on('typing', this.onTypingMessage);\r\n    socket.on('error', this.onSocketError);\r\n\r\n    // ---------------- NEW: CALL EVENTS ----------------\r\n    socket.on('incomingCall', (data) => {\r\n      // data => { from: userId, callerName: ... }\r\n      console.log('[CHAT] Incoming call from:', data);\r\n      this.setState({\r\n        callState: 'receiving',\r\n        incomingCallModal: true,\r\n        callerInfo: data,   // store who is calling\r\n      });\r\n\r\n      // OPTIONAL: Update contact so we know who we talk to\r\n      // especially if 'this.state.contact.id' is empty or different\r\n      if (!this.state.contact.id || this.state.contact.id !== data.from) {\r\n        this.setState({\r\n          contact: {\r\n            ...this.state.contact,\r\n            id: data.from,\r\n            name: data.callerName,\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n    socket.on('offer', ({ sdp, caller }) => {\r\n      console.log('[CHAT] Received offer from:', caller);\r\n      if (this.state.peerConnection) {\r\n        const desc = new RTCSessionDescription(sdp);\r\n        this.state.peerConnection.setRemoteDescription(desc)\r\n          .then(() => {\r\n            console.log('[CHAT] Remote description set (offer). Creating answer...');\r\n            return this.state.peerConnection.createAnswer();\r\n          })\r\n          .then(answer => {\r\n            console.log('[CHAT] Created answer, setting local desc and sending...');\r\n            this.state.peerConnection.setLocalDescription(answer);\r\n            socket.emit('answer', {\r\n              sdp: answer,\r\n              target: caller,\r\n            });\r\n            this.setState({ callState: 'inCall' });\r\n          })\r\n          .catch(err => console.error('[CHAT] Error handling offer->answer', err));\r\n      }\r\n    });\r\n\r\n    socket.on('answer', ({ sdp, callee }) => {\r\n      console.log('[CHAT] Received answer from:', callee);\r\n      if (this.state.peerConnection) {\r\n        const desc = new RTCSessionDescription(sdp);\r\n        this.state.peerConnection.setRemoteDescription(desc)\r\n          .then(() => {\r\n            console.log('[CHAT] Remote description set for answer, callState = inCall');\r\n            this.setState({ callState: 'inCall' });\r\n          })\r\n          .catch(err => console.error('[CHAT] Error setting remote desc (answer)', err));\r\n      }\r\n    });\r\n\r\n    socket.on('iceCandidate', ({ candidate, from }) => {\r\n      console.log('[CHAT] Received ICE candidate from:', from);\r\n      if (this.state.peerConnection && candidate) {\r\n        this.state.peerConnection.addIceCandidate(new RTCIceCandidate(candidate))\r\n          .catch(e => console.error('[CHAT] Error adding ICE candidate', e));\r\n      }\r\n    });\r\n\r\n    socket.on('hangUp', () => {\r\n      console.log('[CHAT] Call ended by remote');\r\n      this.endCall();\r\n    });\r\n\r\n    this.setState({ socket });\r\n  };\r\n\r\n  // ============ CALLING FUNCTIONS ============\r\n  initiateCall = (contact) => {\r\n    if (!contact.id) return;\r\n    console.log('[CHAT] Initiating call with contact:', contact.id);\r\n\r\n    this.setState({\r\n      callState: 'calling',\r\n      contact: contact,\r\n    });\r\n\r\n    // Notify the callee\r\n    this.state.socket.emit('callUser', {\r\n      recipientId: contact.id,\r\n      callerName: this.state.user?.username || 'Unknown Caller',\r\n    });\r\n\r\n    // Access microphone (audio only)\r\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\r\n      .then(stream => {\r\n        console.log('[CHAT] Got localStream, tracks:', stream.getAudioTracks());\r\n        this.setState({ localStream: stream });\r\n\r\n        const peerConnection = this.createPeerConnection();\r\n\r\n        // Add local tracks\r\n        stream.getTracks().forEach(track => {\r\n          console.log('[CHAT] Adding local track:', track.label);\r\n          peerConnection.addTrack(track, stream);\r\n        });\r\n\r\n        // Create offer\r\n        peerConnection.createOffer()\r\n          .then(offer => {\r\n            console.log('[CHAT] Created offer, setting local desc');\r\n            peerConnection.setLocalDescription(offer);\r\n            console.log('[CHAT] Sending offer to server...');\r\n            this.state.socket.emit('offer', {\r\n              sdp: offer,\r\n              target: contact.id,\r\n            });\r\n          })\r\n          .catch(err => console.error('[CHAT] Offer creation error', err));\r\n\r\n        this.setState({ peerConnection });\r\n      })\r\n      .catch(err => console.error('[CHAT] getUserMedia error', err));\r\n  };\r\n\r\n  acceptCall = () => {\r\n    console.log('[CHAT] Accepting call from:', this.state.callerInfo);\r\n    this.setState({\r\n      incomingCallModal: false,\r\n      callState: 'inCall',\r\n    });\r\n\r\n    // If our contact doesn't match callerInfo.from, fix it\r\n    const callerId = this.state.callerInfo?.from;\r\n    if (callerId && (!this.state.contact.id || this.state.contact.id !== callerId)) {\r\n      this.setState({\r\n        contact: {\r\n          ...this.state.contact,\r\n          id: callerId,\r\n          name: this.state.callerInfo.callerName,\r\n        },\r\n      });\r\n    }\r\n\r\n    // Access microphone\r\n    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\r\n      .then(stream => {\r\n        console.log('[CHAT] Got localStream (callee), tracks:', stream.getAudioTracks());\r\n        this.setState({ localStream: stream });\r\n\r\n        // Create RTCPeerConnection\r\n        const peerConnection = this.createPeerConnection();\r\n\r\n        // Add local tracks\r\n        stream.getTracks().forEach(track => {\r\n          console.log('[CHAT] Callee adding local track:', track.label);\r\n          peerConnection.addTrack(track, stream);\r\n        });\r\n\r\n        this.setState({ peerConnection });\r\n        // Wait for 'offer' event => setRemoteDesc => createAnswer => send back\r\n      })\r\n      .catch(err => console.error('[CHAT] Error accessing mic (callee)', err));\r\n  };\r\n\r\n  rejectCall = () => {\r\n    console.log('[CHAT] Rejecting call from:', this.state.callerInfo);\r\n    this.setState({\r\n      incomingCallModal: false,\r\n      callState: 'idle',\r\n      callerInfo: null,\r\n    });\r\n    // Optionally notify the caller that call is rejected\r\n    // e.g. this.state.socket.emit('callRejected', {...});\r\n  };\r\n\r\n  createPeerConnection = () => {\r\n    console.log('[CHAT] Creating RTCPeerConnection...');\r\n    const configuration = {\r\n      iceServers: [\r\n        { urls: 'stun:stun1.l.google.com:19302' },\r\n        // Add TURN if needed\r\n      ],\r\n    };\r\n    const peerConnection = new RTCPeerConnection(configuration);\r\n\r\n    // On ICE candidate\r\n    peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        const targetId = this.state.contact.id || (this.state.callerInfo && this.state.callerInfo.from);\r\n        console.log('[CHAT] Sending ICE candidate to:', targetId);\r\n        this.state.socket.emit('iceCandidate', {\r\n          candidate: event.candidate,\r\n          target: targetId,\r\n        });\r\n      } else {\r\n        console.log('[CHAT] ICE gathering complete (no more candidates)');\r\n      }\r\n    };\r\n\r\n    // On track (remote stream)\r\n    peerConnection.ontrack = (event) => {\r\n      console.log('[CHAT] ontrack => remote track label:', event.track.label);\r\n      this.setState({ remoteStream: event.streams[0] });\r\n    };\r\n\r\n    // Handle connection state changes\r\n    peerConnection.onconnectionstatechange = () => {\r\n      const state = peerConnection.connectionState;\r\n      console.log('[CHAT] PeerConnection state:', state);\r\n      if (state === 'disconnected' || state === 'failed' || state === 'closed') {\r\n        console.log('[CHAT] PeerConnection ended, calling endCall()');\r\n        this.endCall();\r\n      }\r\n    };\r\n\r\n    return peerConnection;\r\n  };\r\n\r\n  endCall = () => {\r\n    console.log('[CHAT] endCall invoked');\r\n    const { socket, contact, callerInfo, peerConnection, localStream, callState } = this.state;\r\n    // Decide who to hang up on\r\n    const targetId = contact.id || (callerInfo && callerInfo.from);\r\n\r\n    if (callState === 'calling' || callState === 'inCall') {\r\n      console.log('[CHAT] Emitting hangUp to target:', targetId);\r\n      socket.emit('hangUp', { target: targetId });\r\n    }\r\n\r\n    if (peerConnection) {\r\n      console.log('[CHAT] Closing peerConnection...');\r\n      peerConnection.close();\r\n    }\r\n\r\n    if (localStream) {\r\n      console.log('[CHAT] Stopping localStream tracks');\r\n      localStream.getTracks().forEach(track => track.stop());\r\n    }\r\n\r\n    this.setState({\r\n      callState: 'idle',\r\n      peerConnection: null,\r\n      localStream: null,\r\n      remoteStream: null,\r\n      callerInfo: null,\r\n      incomingCallModal: false,\r\n    });\r\n  };\r\n\r\n  // ============ EXISTING MESSAGING LOGIC ============\r\n  onData = (user, contacts, messages, users) => {\r\n    console.log('[CHAT] onData => user:', user, ' contacts:', contacts.length);\r\n    let contact = contacts[0] || {};\r\n    this.setState({ messages, contacts, user, contact }, () => {\r\n      this.updateUsersState(users);\r\n    });\r\n  };\r\n\r\n  onNewMessage = (message) => {\r\n    if (message.sender === this.state.contact.id) {\r\n      this.setState({ typing: false });\r\n      this.state.socket.emit('seen', this.state.contact.id);\r\n      message.seen = true;\r\n    }\r\n    let newMessages = this.state.messages.concat(message);\r\n    this.setState({ messages: newMessages });\r\n  };\r\n\r\n  onTypingMessage = (sender) => {\r\n    if (this.state.contact.id !== sender) return;\r\n    this.setState({ typing: sender });\r\n    clearTimeout(this.state.timeout);\r\n    const timeout = setTimeout(() => this.setState({ typing: false }), 3000);\r\n    this.setState({ timeout });\r\n  };\r\n\r\n  onSocketError = (err) => {\r\n    console.error('[CHAT] Socket error:', err);\r\n    if (err === 'auth_error') {\r\n      Auth.logout();\r\n      this.props.history.push('/login');\r\n    }\r\n  };\r\n\r\n  updateUsersState = (users) => {\r\n    let contacts = this.state.contacts;\r\n    contacts.forEach((element, index) => {\r\n      if (users[element.id]) contacts[index].status = users[element.id];\r\n    });\r\n    this.setState({ contacts });\r\n    let contact = this.state.contact;\r\n    if (users[contact.id]) contact.status = users[contact.id];\r\n    this.setState({ contact });\r\n  };\r\n\r\n  sendMessage = (message) => {\r\n    if (!this.state.contact.id) return;\r\n    message.receiver = this.state.contact.id;\r\n    let newMessages = this.state.messages.concat(message);\r\n    this.setState({ messages: newMessages });\r\n    this.state.socket.emit('message', message);\r\n  };\r\n\r\n  sendType = () => {\r\n    if (this.state.contact.id) {\r\n      this.state.socket.emit('typing', this.state.contact.id);\r\n    }\r\n  };\r\n\r\n  logout = () => {\r\n    console.log('[CHAT] Logging out user');\r\n    this.state.socket.disconnect();\r\n    Auth.logout();\r\n    this.props.history.push('/');\r\n  };\r\n\r\n  // ============ RENDERING ============\r\n  render() {\r\n    if (!this.state.connected || !this.state.contacts || !this.state.messages) {\r\n      return <Spinner id=\"loader\" color=\"success\" />;\r\n    }\r\n\r\n    return (\r\n      <Row className=\"h-100\">\r\n        {/* LEFT: Contacts Section */}\r\n        <div id=\"contacts-section\" className=\"col-6 col-md-4\">\r\n          <ContactHeader user={this.state.user} toggle={this.profileToggle} />\r\n          <Contacts\r\n            contacts={this.state.contacts}\r\n            messages={this.state.messages}\r\n            onChatNavigate={this.onChatNavigate}\r\n          />\r\n          <UserProfile\r\n            contact={this.state.contact}\r\n            toggle={this.userProfileToggle}\r\n            open={this.state.userProfile}\r\n          />\r\n          <EditProfile\r\n            user={this.state.user}\r\n            toggle={this.profileToggle}\r\n            open={this.state.profile}\r\n          />\r\n        </div>\r\n\r\n        {/* RIGHT: Messages Section */}\r\n        <div id=\"messages-section\" className=\"col-6 col-md-8\">\r\n          <ChatHeader\r\n            contact={this.state.contact}\r\n            typing={this.state.typing}\r\n            toggle={this.userProfileToggle}\r\n            logout={this.logout}\r\n            // pass the call method so ChatHeader can call\r\n            onCall={this.initiateCall}\r\n          />\r\n          {this.renderChat()}\r\n          <MessageForm sender={this.sendMessage} sendType={this.sendType} />\r\n\r\n          {/* Hang Up button if in a call */}\r\n          {(this.state.callState === 'calling' || this.state.callState === 'inCall') && (\r\n            <Button color=\"danger\" onClick={this.endCall} className=\"mt-2\">\r\n              Hang Up\r\n            </Button>\r\n          )}\r\n\r\n          {/* Audio element for remote stream */}\r\n          {this.state.remoteStream && (\r\n            <audio\r\n              ref={(audioEl) => {\r\n                if (audioEl && this.state.remoteStream) {\r\n                  console.log('[CHAT] Attaching remoteStream to audio element');\r\n                  audioEl.srcObject = this.state.remoteStream;\r\n                }\r\n              }}\r\n              autoPlay\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* INCOMING CALL MODAL */}\r\n        <Modal isOpen={this.state.incomingCallModal}>\r\n          <ModalHeader>Incoming Call</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.callerInfo && (\r\n              <p>{this.state.callerInfo.callerName} is calling...</p>\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"success\" onClick={this.acceptCall}>Accept</Button>\r\n            <Button color=\"secondary\" onClick={this.rejectCall}>Reject</Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  renderChat = () => {\r\n    const { contact, user, messages } = this.state;\r\n    if (!contact || !contact.id) return null;\r\n    let filtered = messages.filter(\r\n      (m) => m.sender === contact.id || m.receiver === contact.id\r\n    );\r\n    return <Messages user={user} messages={filtered} />;\r\n  };\r\n\r\n  onChatNavigate = (contact) => {\r\n    console.log('[CHAT] onChatNavigate => switching to contact:', contact.id);\r\n    this.setState({ contact });\r\n    this.state.socket.emit('seen', contact.id);\r\n    let newMessages = this.state.messages.map((m) => {\r\n      if (m.sender === contact.id) {\r\n        return { ...m, seen: true };\r\n      }\r\n      return m;\r\n    });\r\n    this.setState({ messages: newMessages });\r\n  };\r\n\r\n  userProfileToggle = () => this.setState({ userProfile: !this.state.userProfile });\r\n  profileToggle = () => this.setState({ profile: !this.state.profile });\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}